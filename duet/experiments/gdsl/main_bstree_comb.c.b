/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is true */

#line 211 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include/stddef.h"
typedef unsigned int size_t;
#line 56 "/usr/include/bits/types.h"
typedef long long __quad_t;
#line 141 "/usr/include/bits/types.h"
typedef long __off_t;
#line 142 "/usr/include/bits/types.h"
typedef __quad_t __off64_t;
#line 45 "/usr/include/stdio.h"
struct _IO_FILE;
#line 49 "/usr/include/stdio.h"
typedef struct _IO_FILE FILE;
#line 180 "/usr/include/libio.h"
typedef void _IO_lock_t;
#line 186 "/usr/include/libio.h"
struct _IO_marker {
   struct _IO_marker *_next ;
   struct _IO_FILE *_sbuf ;
   int _pos ;
};
#line 271 "/usr/include/libio.h"
struct _IO_FILE {
   int _flags ;
   char *_IO_read_ptr ;
   char *_IO_read_end ;
   char *_IO_read_base ;
   char *_IO_write_base ;
   char *_IO_write_ptr ;
   char *_IO_write_end ;
   char *_IO_buf_base ;
   char *_IO_buf_end ;
   char *_IO_save_base ;
   char *_IO_backup_base ;
   char *_IO_save_end ;
   struct _IO_marker *_markers ;
   struct _IO_FILE *_chain ;
   int _fileno ;
   int _flags2 ;
   __off_t _old_offset ;
   unsigned short _cur_column ;
   signed char _vtable_offset ;
   char _shortbuf[1] ;
   _IO_lock_t *_lock ;
   __off64_t _offset ;
   void *__pad1 ;
   void *__pad2 ;
   void *__pad3 ;
   void *__pad4 ;
   size_t __pad5 ;
   int _mode ;
   char _unused2[(15U * sizeof(int ) - 4U * sizeof(void *)) - sizeof(size_t )] ;
};
#include "stubs.c"
#line 130 "../gdsl_types.h"
typedef void *gdsl_element_t;
#line 242 "../gdsl_types.h"
typedef unsigned long ulong___0;
#line 267
enum __anonenum_bool_25 {
    FALSE = 0,
    TRUE = 1
} ;
#line 267 "../gdsl_types.h"
typedef enum __anonenum_bool_25 bool;
#line 54 "../_gdsl_bintree.h"
struct _gdsl_bintree;
#line 54 "../_gdsl_bintree.h"
typedef struct _gdsl_bintree *_gdsl_bintree_t;
#line 49 "../_gdsl_bintree.c"
struct _gdsl_bintree {
   struct _gdsl_bintree *left ;
   struct _gdsl_bintree *right ;
   struct _gdsl_bintree *parent ;
   gdsl_element_t content ;
};
#line 69 "../gdsl_types.h"
enum __anonenum_gdsl_location_t_24 {
    GDSL_LOCATION_UNDEF = 0,
    GDSL_LOCATION_HEAD = 1,
    GDSL_LOCATION_ROOT = 1,
    GDSL_LOCATION_TOP = 1,
    GDSL_LOCATION_TAIL = 2,
    GDSL_LOCATION_LEAF = 2,
    GDSL_LOCATION_BOTTOM = 2,
    GDSL_LOCATION_FIRST = 1,
    GDSL_LOCATION_LAST = 2,
    GDSL_LOCATION_FIRST_COL = 1,
    GDSL_LOCATION_LAST_COL = 2,
    GDSL_LOCATION_FIRST_ROW = 4,
    GDSL_LOCATION_LAST_ROW = 8
} ;
#line 69 "../gdsl_types.h"
typedef enum __anonenum_gdsl_location_t_24 gdsl_location_t;
#line 54 "../gdsl_heap.h"
struct heap;
#line 54 "../gdsl_heap.h"
typedef struct heap *gdsl_heap_t;
#line 38 "../gdsl_heap.c"
struct heap {
   char *name ;
   ulong___0 card ;
   gdsl_element_t *nodes ;
   gdsl_element_t (*alloc_f)(void *USER_DATA ) ;
   void (*free_f)(gdsl_element_t E ) ;
   long (*comp_f)(gdsl_element_t const   E , void *VALUE ) ;
};
#line 53 "../_gdsl_node.h"
struct _gdsl_node;
#line 53 "../_gdsl_node.h"
typedef struct _gdsl_node *_gdsl_node_t;
#line 54 "../gdsl_queue.h"
struct _gdsl_queue;
#line 54 "../gdsl_queue.h"
typedef struct _gdsl_queue *gdsl_queue_t;
#line 41 "../gdsl_queue.c"
struct _gdsl_queue {
   _gdsl_node_t d ;
   _gdsl_node_t z ;
   char *name ;
   ulong___0 card ;
   gdsl_element_t (*alloc_f)(void *USER_DATA ) ;
   void (*free_f)(gdsl_element_t E ) ;
};
#line 52 "../_gdsl_bstree.h"
typedef _gdsl_bintree_t _gdsl_bstree_t;
#line 53 "../gdsl_2darray.h"
struct gdsl_2darray;
#line 53 "../gdsl_2darray.h"
typedef struct gdsl_2darray *gdsl_2darray_t;
#line 39 "../gdsl_2darray.c"
struct gdsl_2darray {
   char *name ;
   ulong___0 rows ;
   ulong___0 cols ;
   gdsl_element_t **elements ;
   gdsl_element_t (*alloc_f)(void *USER_DATA ) ;
   void (*free_f)(gdsl_element_t E ) ;
};
#line 53 "../gdsl_interval_heap.h"
typedef struct heap___0 *gdsl_interval_heap_t;
#line 58 "../gdsl_interval_heap.c"
struct heap___0 {
   char *name ;
   ulong___0 card ;
   ulong___0 allocated ;
   ulong___0 size ;
   gdsl_element_t *nodes ;
   gdsl_element_t (*alloc_f)(void *USER_DATA ) ;
   void (*free_f)(gdsl_element_t E ) ;
   long (*comp_f)(gdsl_element_t const   E , void *VALUE ) ;
};
#line 52 "../gdsl_rbtree.h"
struct gdsl_rbtree;
#line 52 "../gdsl_rbtree.h"
typedef struct gdsl_rbtree *gdsl_rbtree_t;
#line 46 "../gdsl_rbtree.c"
enum __anonenum_gdsl_rbtree_node_color_t_26 {
    RED = 0,
    BLACK = 1
} ;
#line 46 "../gdsl_rbtree.c"
typedef enum __anonenum_gdsl_rbtree_node_color_t_26 gdsl_rbtree_node_color_t;
#line 52 "../gdsl_rbtree.c"
struct gdsl_rbtree_node {
   struct gdsl_rbtree_node *left ;
   struct gdsl_rbtree_node *right ;
   struct gdsl_rbtree_node *parent ;
   gdsl_element_t content ;
   gdsl_rbtree_node_color_t color ;
};
#line 60 "../gdsl_rbtree.c"
typedef struct gdsl_rbtree_node *gdsl_rbtree_node_t;
#line 62 "../gdsl_rbtree.c"
struct gdsl_rbtree {
   char *name ;
   ulong___0 card ;
   struct gdsl_rbtree_node sent ;
   gdsl_element_t (*alloc_f)(void *USER_DATA ) ;
   void (*free_f)(gdsl_element_t E ) ;
   long (*comp_f)(gdsl_element_t const   E , void *VALUE ) ;
};
#line 54 "../_gdsl_list.h"
typedef _gdsl_node_t _gdsl_list_t;
#line 53 "../gdsl_bstree.h"
struct gdsl_bstree;
#line 53 "../gdsl_bstree.h"
typedef struct gdsl_bstree *gdsl_bstree_t;
#line 47 "../gdsl_bstree.c"
struct gdsl_bstree {
   char *name ;
   ulong___0 card ;
   _gdsl_bintree_t sent ;
   gdsl_element_t (*alloc_f)(void *USER_DATA ) ;
   void (*free_f)(gdsl_element_t E ) ;
   long (*comp_f)(gdsl_element_t const   E , void *VALUE ) ;
};
#line 51 "../gdsl_list.h"
struct _gdsl_list;
#line 51 "../gdsl_list.h"
typedef struct _gdsl_list *gdsl_list_t;
#line 59
struct _gdsl_list_cursor;
#line 59 "../gdsl_list.h"
typedef struct _gdsl_list_cursor *gdsl_list_cursor_t;
#line 39 "../gdsl_list.c"
struct _gdsl_list {
   _gdsl_node_t d ;
   _gdsl_node_t z ;
   char *name ;
   ulong___0 card ;
   gdsl_element_t (*alloc_func)(void *USER_DATA ) ;
   void (*free_func)(gdsl_element_t E ) ;
};
#line 50 "../gdsl_list.c"
struct _gdsl_list_cursor {
   _gdsl_node_t c ;
   gdsl_list_t l ;
};
#line 38 "../_gdsl_node.c"
struct _gdsl_node {
   struct _gdsl_node *succ ;
   struct _gdsl_node *pred ;
   gdsl_element_t content ;
};
#line 246 "../gdsl_types.h"
typedef unsigned short ushort___0;
#line 54 "../gdsl_hash.h"
struct hash_table;
#line 54 "../gdsl_hash.h"
typedef struct hash_table *gdsl_hash_t;
#line 44 "../gdsl_hash.c"
struct hash_table {
   char *name ;
   gdsl_list_t *lists ;
   ushort___0 lists_count ;
   ushort___0 lists_max_size ;
   char const   *(*key_func)(void *VALUE ) ;
   ulong___0 (*hash_func)(char const   *KEY ) ;
   gdsl_element_t (*alloc_func)(void *USER_DATA ) ;
   void (*free_func)(gdsl_element_t E ) ;
};
#line 56 "../gdsl_hash.c"
struct hash_element {
   char const   *key ;
   gdsl_element_t content ;
};
#line 56 "../gdsl_hash.c"
typedef struct hash_element *hash_element;
#line 64 "../gdsl_hash.c"
struct infos {
   void *(*f)(void * , void * , void * ) ;
   void *ud ;
   void *d ;
   gdsl_element_t e ;
};
#line 149 "/usr/include/bits/types.h"
typedef long __time_t;
#line 151 "/usr/include/bits/types.h"
typedef long __suseconds_t;
#line 69 "/usr/include/bits/time.h"
struct timeval {
   __time_t tv_sec ;
   __suseconds_t tv_usec ;
};
#line 57 "/usr/include/sys/time.h"
struct timezone {
   int tz_minuteswest ;
   int tz_dsttime ;
};
#line 63 "/usr/include/sys/time.h"
typedef struct timezone * __restrict  __timezone_ptr_t;
#line 50 "../gdsl_perm.h"
struct gdsl_perm;
#line 50 "../gdsl_perm.h"
typedef struct gdsl_perm *gdsl_perm_t;
#line 41 "../gdsl_perm.c"
struct gdsl_perm {
   ulong___0 n ;
   ulong___0 *e ;
   char *name ;
};
#line 53 "../gdsl_stack.h"
struct _gdsl_stack;
#line 53 "../gdsl_stack.h"
typedef struct _gdsl_stack *gdsl_stack_t;
#line 43 "../gdsl_stack.c"
struct _gdsl_stack {
   char *name ;
   ulong___0 card ;
   ulong___0 size ;
   ulong___0 growing_factor ;
   gdsl_element_t *nodes ;
   gdsl_element_t (*alloc_f)(void *USER_DATA ) ;
   void (*free_f)(gdsl_element_t E ) ;
};
#line 1 "cil-kP1BVGRP.o"
#pragma merger("0","/tmp/cil-7VT3CXLP.i","")
#line 333 "/usr/include/stdio.h"
extern int fprintf(FILE * __restrict  __stream , char const   * __restrict  __format 
                   , ...) ;
#line 471 "/usr/include/stdlib.h"
extern  __attribute__((__nothrow__)) void *malloc(size_t __size )  __attribute__((__malloc__)) ;
#line 488
extern  __attribute__((__nothrow__)) void free(void *__ptr ) ;
#line 97 "../_gdsl_bintree.h"
extern _gdsl_bintree_t _gdsl_bintree_alloc(gdsl_element_t const   e , _gdsl_bintree_t const   l ,
                                           _gdsl_bintree_t const   r ) ;
#line 116
extern void _gdsl_bintree_free(_gdsl_bintree_t t , void (* const  free_f)(gdsl_element_t E ) ) ;
#line 138
extern _gdsl_bintree_t _gdsl_bintree_copy(_gdsl_bintree_t const   t , gdsl_element_t (* const  copy_f)(gdsl_element_t const   E ) ) ;
#line 157
extern bool _gdsl_bintree_is_empty(_gdsl_bintree_t const   t ) ;
#line 171
extern bool _gdsl_bintree_is_leaf(_gdsl_bintree_t const   t ) ;
#line 185
extern bool _gdsl_bintree_is_root(_gdsl_bintree_t const   t ) ;
#line 197
extern gdsl_element_t _gdsl_bintree_get_content(_gdsl_bintree_t const   t ) ;
#line 211
extern _gdsl_bintree_t _gdsl_bintree_get_parent(_gdsl_bintree_t const   t ) ;
#line 230
extern _gdsl_bintree_t _gdsl_bintree_get_left(_gdsl_bintree_t const   t ) ;
#line 249
extern _gdsl_bintree_t _gdsl_bintree_get_right(_gdsl_bintree_t const   t ) ;
#line 261
extern _gdsl_bintree_t *_gdsl_bintree_get_left_ref(_gdsl_bintree_t const   t ) ;
#line 273
extern _gdsl_bintree_t *_gdsl_bintree_get_right_ref(_gdsl_bintree_t const   t ) ;
#line 288
extern ulong___0 _gdsl_bintree_get_height(_gdsl_bintree_t const   t ) ;
#line 300
extern ulong___0 _gdsl_bintree_get_size(_gdsl_bintree_t const   t ) ;
#line 319
extern void _gdsl_bintree_set_content(_gdsl_bintree_t t , gdsl_element_t const   e ) ;
#line 335
extern void _gdsl_bintree_set_parent(_gdsl_bintree_t t , _gdsl_bintree_t const   p ) ;
#line 353
extern void _gdsl_bintree_set_left(_gdsl_bintree_t t , _gdsl_bintree_t const   l ) ;
#line 371
extern void _gdsl_bintree_set_right(_gdsl_bintree_t t , _gdsl_bintree_t const   r ) ;
#line 393
extern _gdsl_bintree_t _gdsl_bintree_rotate_left(_gdsl_bintree_t *t ) ;
#line 410
extern _gdsl_bintree_t _gdsl_bintree_rotate_right(_gdsl_bintree_t *t ) ;
#line 427
extern _gdsl_bintree_t _gdsl_bintree_rotate_left_right(_gdsl_bintree_t *t ) ;
#line 444
extern _gdsl_bintree_t _gdsl_bintree_rotate_right_left(_gdsl_bintree_t *t ) ;
#line 470
extern _gdsl_bintree_t _gdsl_bintree_map_prefix(_gdsl_bintree_t const   t , int (* const  map_f)(_gdsl_bintree_t const   TREE ,
                                                                                                 void *USER_DATA ) ,
                                                void *d ) ;
#line 494
extern _gdsl_bintree_t _gdsl_bintree_map_infix(_gdsl_bintree_t const   t , int (* const  map_f)(_gdsl_bintree_t const   TREE ,
                                                                                                void *USER_DATA ) ,
                                               void *d ) ;
#line 518
extern _gdsl_bintree_t _gdsl_bintree_map_postfix(_gdsl_bintree_t const   t , int (* const  map_f)(_gdsl_bintree_t const   TREE ,
                                                                                                  void *USER_DATA ) ,
                                                 void *d ) ;
#line 544
extern void _gdsl_bintree_write(_gdsl_bintree_t const   t , void (* const  write_f)(_gdsl_bintree_t const   TREE ,
                                                                                    FILE *OUTPUT_FILE ,
                                                                                    void *USER_DATA ) ,
                                FILE *file , void *user_data ) ;
#line 568
extern void _gdsl_bintree_write_xml(_gdsl_bintree_t const   t , void (* const  write_f)(_gdsl_bintree_t const   TREE ,
                                                                                        FILE *OUTPUT_FILE ,
                                                                                        void *USER_DATA ) ,
                                    FILE *file , void *user_data ) ;
#line 592
extern void _gdsl_bintree_dump(_gdsl_bintree_t const   t , void (* const  write_f)(_gdsl_bintree_t const   TREE ,
                                                                                   FILE *OUTPUT_FILE ,
                                                                                   void *USER_DATA ) ,
                               FILE *file , void *user_data ) ;
#line 57 "../_gdsl_bintree.c"
static void bintree_free(_gdsl_bintree_t t ) ;
#line 60
static void bintree_free_with_func(_gdsl_bintree_t t , void (*free_f)(gdsl_element_t E ) ) ;
#line 63
static void bintree_write(_gdsl_bintree_t const   t , void (* const  write_f)(_gdsl_bintree_t const   TREE ,
                                                                              FILE *OUTPUT_FILE ,
                                                                              void *USER_DATA ) ,
                          FILE *file , void *d , bool dump ) ;
#line 72 "../_gdsl_bintree.c"
extern _gdsl_bintree_t _gdsl_bintree_alloc(gdsl_element_t const   e , _gdsl_bintree_t const   l ,
                                           _gdsl_bintree_t const   r ) 
{ 
  _gdsl_bintree_t t ;
  void *tmp ;

  {
#line 78
  tmp = malloc(sizeof(struct _gdsl_bintree ));
#line 78
  t = (_gdsl_bintree_t )tmp;
#line 80
  if ((unsigned int )t == (unsigned int )((void *)0)) {
#line 82
    return ((_gdsl_bintree_t )((void *)0));
  }
#line 85
  t->left = (struct _gdsl_bintree *)l;
#line 86
  t->right = (struct _gdsl_bintree *)r;
#line 88
  if ((unsigned int )l != (unsigned int )((void *)0)) {
#line 90
    l->parent = t;
  }
#line 93
  if ((unsigned int )r != (unsigned int )((void *)0)) {
#line 95
    r->parent = t;
  }
#line 98
  t->parent = t;
#line 99
  t->content = (gdsl_element_t )e;
#line 101
  return (t);
}
}
#line 104 "../_gdsl_bintree.c"
extern void _gdsl_bintree_free(_gdsl_bintree_t t , void (* const  free_f)(gdsl_element_t E ) ) 
{ 


  {
#line 107
  if ((unsigned int )free_f == (unsigned int )((void *)0)) {
#line 107
    bintree_free(t);
  } else {
#line 107
    bintree_free_with_func(t, (void (*)(gdsl_element_t E ))free_f);
  }
#line 108
  return;
}
}
#line 110 "../_gdsl_bintree.c"
extern _gdsl_bintree_t _gdsl_bintree_copy(_gdsl_bintree_t const   t , gdsl_element_t (* const  copy_f)(gdsl_element_t const   E ) ) 
{ 
  _gdsl_bintree_t tmp ;
  gdsl_element_t tmp___0 ;

  {
#line 117
  if ((unsigned int )t == (unsigned int )((void *)0)) {
#line 119
    return ((_gdsl_bintree_t )((void *)0));
  }
#line 122
  tmp___0 = (*copy_f)((gdsl_element_t const   )t->content);
#line 122
  tmp = _gdsl_bintree_alloc((gdsl_element_t const   )tmp___0, (_gdsl_bintree_t const   )((void *)0),
                            (_gdsl_bintree_t const   )((void *)0));
#line 124
  if ((unsigned int )tmp == (unsigned int )((void *)0)) {
#line 126
    return ((_gdsl_bintree_t )((void *)0));
  }
#line 129
  tmp->left = _gdsl_bintree_copy((_gdsl_bintree_t const   )t->left, copy_f);
#line 131
  if ((unsigned int )tmp->left != (unsigned int )((void *)0)) {
#line 133
    (tmp->left)->parent = tmp;
  }
#line 136
  tmp->right = _gdsl_bintree_copy((_gdsl_bintree_t const   )t->right, copy_f);
#line 138
  if ((unsigned int )tmp->right != (unsigned int )((void *)0)) {
#line 140
    (tmp->right)->parent = tmp;
  }
#line 143
  return (tmp);
}
}
#line 150 "../_gdsl_bintree.c"
extern bool _gdsl_bintree_is_empty(_gdsl_bintree_t const   t ) 
{ 


  {
#line 153
  return ((bool )((unsigned int )t == (unsigned int )((void *)0)));
}
}
#line 156 "../_gdsl_bintree.c"
extern bool _gdsl_bintree_is_leaf(_gdsl_bintree_t const   t ) 
{ 
  int tmp ;

  {
#line 161
  if ((unsigned int )t->left == (unsigned int )((void *)0)) {
#line 161
    if ((unsigned int )t->right == (unsigned int )((void *)0)) {
#line 161
      tmp = 1;
    } else {
#line 161
      tmp = 0;
    }
  } else {
#line 161
    tmp = 0;
  }
#line 161
  return ((bool )tmp);
}
}
#line 164 "../_gdsl_bintree.c"
extern bool _gdsl_bintree_is_root(_gdsl_bintree_t const   t ) 
{ 


  {
#line 169
  return ((bool )((unsigned int )t->parent == (unsigned int )t));
}
}
#line 172 "../_gdsl_bintree.c"
extern gdsl_element_t _gdsl_bintree_get_content(_gdsl_bintree_t const   t ) 
{ 


  {
#line 177
  return (t->content);
}
}
#line 180 "../_gdsl_bintree.c"
extern _gdsl_bintree_t _gdsl_bintree_get_parent(_gdsl_bintree_t const   t ) 
{ 


  {
#line 185
  return (t->parent);
}
}
#line 188 "../_gdsl_bintree.c"
extern _gdsl_bintree_t _gdsl_bintree_get_left(_gdsl_bintree_t const   t ) 
{ 


  {
#line 193
  return (t->left);
}
}
#line 196 "../_gdsl_bintree.c"
extern _gdsl_bintree_t _gdsl_bintree_get_right(_gdsl_bintree_t const   t ) 
{ 


  {
#line 201
  return (t->right);
}
}
#line 204 "../_gdsl_bintree.c"
extern _gdsl_bintree_t *_gdsl_bintree_get_left_ref(_gdsl_bintree_t const   t ) 
{ 


  {
#line 209
  return (& t->left);
}
}
#line 212 "../_gdsl_bintree.c"
extern _gdsl_bintree_t *_gdsl_bintree_get_right_ref(_gdsl_bintree_t const   t ) 
{ 


  {
#line 217
  return (& t->right);
}
}
#line 220 "../_gdsl_bintree.c"
extern ulong___0 _gdsl_bintree_get_height(_gdsl_bintree_t const   t ) 
{ 
  ulong___0 tmp___1 ;
  ulong___0 tmp___2 ;
  ulong___0 tmp___3 ;
  ulong___0 tmp___4 ;
  ulong___0 tmp___5 ;

  {
#line 223
  if ((unsigned int )t == (unsigned int )((void *)0)) {
#line 225
    return (0UL);
  }
#line 228
  if ((unsigned int )t->left == (unsigned int )((void *)0)) {
#line 228
    if ((unsigned int )t->right == (unsigned int )((void *)0)) {
#line 230
      return (0UL);
    }
  }
#line 233
  tmp___4 = _gdsl_bintree_get_height((_gdsl_bintree_t const   )t->left);
#line 233
  tmp___5 = _gdsl_bintree_get_height((_gdsl_bintree_t const   )t->right);
#line 233
  if (tmp___4 > tmp___5) {
#line 233
    tmp___1 = _gdsl_bintree_get_height((_gdsl_bintree_t const   )t->left);
#line 233
    tmp___3 = tmp___1;
  } else {
#line 233
    tmp___2 = _gdsl_bintree_get_height((_gdsl_bintree_t const   )t->right);
#line 233
    tmp___3 = tmp___2;
  }
#line 233
  return (1UL + tmp___3);
}
}
#line 238 "../_gdsl_bintree.c"
extern ulong___0 _gdsl_bintree_get_size(_gdsl_bintree_t const   t ) 
{ 
  ulong___0 tmp ;
  ulong___0 tmp___0 ;

  {
#line 241
  if ((unsigned int )t == (unsigned int )((void *)0)) {
#line 243
    return (0UL);
  }
#line 246
  tmp = _gdsl_bintree_get_size((_gdsl_bintree_t const   )t->left);
#line 246
  tmp___0 = _gdsl_bintree_get_size((_gdsl_bintree_t const   )t->right);
#line 246
  return ((1UL + tmp) + tmp___0);
}
}
#line 255 "../_gdsl_bintree.c"
extern void _gdsl_bintree_set_content(_gdsl_bintree_t t , gdsl_element_t const   e ) 
{ 


  {
#line 260
  t->content = (gdsl_element_t )e;
#line 261
  return;
}
}
#line 263 "../_gdsl_bintree.c"
extern void _gdsl_bintree_set_parent(_gdsl_bintree_t t , _gdsl_bintree_t const   p ) 
{ 


  {
#line 268
  t->parent = (struct _gdsl_bintree *)p;
#line 269
  return;
}
}
#line 271 "../_gdsl_bintree.c"
extern void _gdsl_bintree_set_left(_gdsl_bintree_t t , _gdsl_bintree_t const   l ) 
{ 


  {
#line 276
  t->left = (struct _gdsl_bintree *)l;
#line 278
  if ((unsigned int )l != (unsigned int )((void *)0)) {
#line 280
    l->parent = t;
  }
#line 282
  return;
}
}
#line 284 "../_gdsl_bintree.c"
extern void _gdsl_bintree_set_right(_gdsl_bintree_t t , _gdsl_bintree_t const   r ) 
{ 


  {
#line 289
  t->right = (struct _gdsl_bintree *)r;
#line 291
  if ((unsigned int )r != (unsigned int )((void *)0)) {
#line 293
    r->parent = t;
  }
#line 295
  return;
}
}
#line 301 "../_gdsl_bintree.c"
extern _gdsl_bintree_t _gdsl_bintree_rotate_left(_gdsl_bintree_t *t ) 
{ 
  _gdsl_bintree_t rn ;

  {
#line 309
  rn = (*t)->right;
#line 310
  (*t)->right = rn->left;
#line 312
  if ((unsigned int )rn->left != (unsigned int )((void *)0)) {
#line 314
    (rn->left)->parent = *t;
  }
#line 317
  rn->parent = (*t)->parent;
#line 319
  rn->left = *t;
#line 320
  (*t)->parent = rn;
#line 321
  *t = rn;
#line 323
  return (rn);
}
}
#line 326 "../_gdsl_bintree.c"
extern _gdsl_bintree_t _gdsl_bintree_rotate_right(_gdsl_bintree_t *t ) 
{ 
  _gdsl_bintree_t ln ;

  {
#line 334
  ln = (*t)->left;
#line 335
  (*t)->left = ln->right;
#line 337
  if ((unsigned int )ln->right != (unsigned int )((void *)0)) {
#line 339
    (ln->right)->parent = *t;
  }
#line 342
  ln->parent = (*t)->parent;
#line 344
  ln->right = *t;
#line 345
  (*t)->parent = ln;
#line 346
  *t = ln;
#line 348
  return (ln);
}
}
#line 351 "../_gdsl_bintree.c"
extern _gdsl_bintree_t _gdsl_bintree_rotate_left_right(_gdsl_bintree_t *t ) 
{ 
  _gdsl_bintree_t tmp ;

  {
#line 358
  _gdsl_bintree_rotate_left(& (*t)->left);
#line 360
  tmp = _gdsl_bintree_rotate_right(t);
#line 360
  return (tmp);
}
}
#line 363 "../_gdsl_bintree.c"
extern _gdsl_bintree_t _gdsl_bintree_rotate_right_left(_gdsl_bintree_t *t ) 
{ 
  _gdsl_bintree_t tmp ;

  {
#line 370
  _gdsl_bintree_rotate_right(& (*t)->right);
#line 372
  tmp = _gdsl_bintree_rotate_left(t);
#line 372
  return (tmp);
}
}
#line 379 "../_gdsl_bintree.c"
extern _gdsl_bintree_t _gdsl_bintree_map_prefix(_gdsl_bintree_t const   t , int (* const  map_f)(_gdsl_bintree_t const   TREE ,
                                                                                                 void *USER_DATA ) ,
                                                void *d ) 
{ 
  int tmp ;

  {
#line 385
  if (! ((unsigned int )t == (unsigned int )((void *)0))) {
#line 387
    tmp = (*map_f)(t, d);
#line 387
    if (tmp == 0) {
#line 389
      return ((_gdsl_bintree_t )t);
    }
#line 392
    _gdsl_bintree_map_prefix((_gdsl_bintree_t const   )t->left, map_f, d);
#line 393
    _gdsl_bintree_map_prefix((_gdsl_bintree_t const   )t->right, map_f, d);
  }
#line 396
  return ((_gdsl_bintree_t )((void *)0));
}
}
#line 399 "../_gdsl_bintree.c"
extern _gdsl_bintree_t _gdsl_bintree_map_infix(_gdsl_bintree_t const   t , int (* const  map_f)(_gdsl_bintree_t const   TREE ,
                                                                                                void *USER_DATA ) ,
                                               void *d ) 
{ 
  int tmp ;

  {
#line 405
  if (! ((unsigned int )t == (unsigned int )((void *)0))) {
#line 407
    _gdsl_bintree_map_infix((_gdsl_bintree_t const   )t->left, map_f, d);
#line 409
    tmp = (*map_f)(t, d);
#line 409
    if (tmp == 0) {
#line 411
      return ((_gdsl_bintree_t )t);
    }
#line 414
    _gdsl_bintree_map_infix((_gdsl_bintree_t const   )t->right, map_f, d);
  }
#line 417
  return ((_gdsl_bintree_t )((void *)0));
}
}
#line 420 "../_gdsl_bintree.c"
extern _gdsl_bintree_t _gdsl_bintree_map_postfix(_gdsl_bintree_t const   t , int (* const  map_f)(_gdsl_bintree_t const   TREE ,
                                                                                                  void *USER_DATA ) ,
                                                 void *d ) 
{ 
  int tmp ;

  {
#line 426
  if (! ((unsigned int )t == (unsigned int )((void *)0))) {
#line 428
    _gdsl_bintree_map_postfix((_gdsl_bintree_t const   )t->left, map_f, d);
#line 429
    _gdsl_bintree_map_postfix((_gdsl_bintree_t const   )t->right, map_f, d);
#line 431
    tmp = (*map_f)(t, d);
#line 431
    if (tmp == 0) {
#line 433
      return ((_gdsl_bintree_t )t);
    }
  }
#line 437
  return ((_gdsl_bintree_t )((void *)0));
}
}
#line 455 "../_gdsl_bintree.c"
extern void _gdsl_bintree_write(_gdsl_bintree_t const   t , void (* const  write_f)(_gdsl_bintree_t const   TREE ,
                                                                                    FILE *OUTPUT_FILE ,
                                                                                    void *USER_DATA ) ,
                                FILE *file , void *user_data ) 
{ 


  {
#line 463
  if (! ((unsigned int )t == (unsigned int )((void *)0))) {
#line 465
    (*write_f)(t, file, user_data);
#line 466
    _gdsl_bintree_write((_gdsl_bintree_t const   )t->left, write_f, file, user_data);
#line 467
    _gdsl_bintree_write((_gdsl_bintree_t const   )t->right, write_f, file, user_data);
  }
#line 469
  return;
}
}
#line 471 "../_gdsl_bintree.c"
extern void _gdsl_bintree_write_xml(_gdsl_bintree_t const   t , void (* const  write_f)(_gdsl_bintree_t const   TREE ,
                                                                                        FILE *OUTPUT_FILE ,
                                                                                        void *USER_DATA ) ,
                                    FILE *file , void *user_data ) 
{ 


  {
#line 478
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<_GDSL_BINTREE ROOT=\"%p\">\n",
          (void *)t);
#line 479
  bintree_write(t, write_f, file, user_data, (bool )0);
#line 480
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</_GDSL_BINTREE>\n");
#line 481
  return;
}
}
#line 483 "../_gdsl_bintree.c"
extern void _gdsl_bintree_dump(_gdsl_bintree_t const   t , void (* const  write_f)(_gdsl_bintree_t const   TREE ,
                                                                                   FILE *OUTPUT_FILE ,
                                                                                   void *USER_DATA ) ,
                               FILE *file , void *user_data ) 
{ 


  {
#line 490
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<_GDSL_BINTREE ROOT=\"%p\">\n",
          (void *)t);
#line 491
  bintree_write(t, write_f, file, user_data, (bool )1);
#line 492
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</_GDSL_BINTREE>\n");
#line 493
  return;
}
}
#line 499 "../_gdsl_bintree.c"
static void bintree_free(_gdsl_bintree_t t ) 
{ 


  {
#line 502
  if (! ((unsigned int )t == (unsigned int )((void *)0))) {
#line 504
    bintree_free(t->left);
#line 505
    bintree_free(t->right);
#line 506
    free((void *)t);
  }
#line 508
  return;
}
}
#line 510 "../_gdsl_bintree.c"
static void bintree_free_with_func(_gdsl_bintree_t t , void (*free_f)(gdsl_element_t E ) ) 
{ 


  {
#line 513
  if (! ((unsigned int )t == (unsigned int )((void *)0))) {
#line 515
    bintree_free_with_func(t->left, free_f);
#line 516
    bintree_free_with_func(t->right, free_f);
#line 517
    (*free_f)(t->content);
#line 518
    free((void *)t);
  }
#line 520
  return;
}
}
#line 522 "../_gdsl_bintree.c"
static void bintree_write(_gdsl_bintree_t const   t , void (* const  write_f)(_gdsl_bintree_t const   TREE ,
                                                                              FILE *OUTPUT_FILE ,
                                                                              void *USER_DATA ) ,
                          FILE *file , void *d , bool dump ) 
{ 


  {
#line 527
  if (! ((unsigned int )t == (unsigned int )((void *)0))) {
#line 529
    if ((unsigned int )t->left == (unsigned int )((void *)0)) {
#line 529
      if ((unsigned int )t->right == (unsigned int )((void *)0)) {
#line 531
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<_GDSL_BINTREE_LEAF REF=\"%p\"",
                (void *)t);
      } else {
#line 535
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<_GDSL_BINTREE_NODE REF=\"%p\"",
                (void *)t);
      }
    } else {
#line 535
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<_GDSL_BINTREE_NODE REF=\"%p\"",
              (void *)t);
    }
#line 538
    if ((unsigned int )dump == 1U) {
#line 540
      if (t->content) {
#line 542
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )" CONTENT=\"%p\"",
                t->content);
      } else {
#line 546
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )" CONTENT=\"\"");
      }
    }
#line 550
    if ((unsigned int )t->left == (unsigned int )((void *)0)) {
#line 550
      if (! ((unsigned int )t->right == (unsigned int )((void *)0))) {
#line 550
        goto _L;
      }
    } else {
      _L: /* CIL Label */ 
#line 552
      if ((unsigned int )t->left != (unsigned int )((void *)0)) {
#line 554
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )" LEFT=\"%p\"",
                (void *)t->left);
      } else {
#line 558
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )" LEFT=\"\"");
      }
#line 561
      if ((unsigned int )t->right != (unsigned int )((void *)0)) {
#line 563
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )" RIGHT=\"%p\"",
                (void *)t->right);
      } else {
#line 567
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )" RIGHT=\"\"");
      }
    }
#line 571
    if ((unsigned int )t->parent != (unsigned int )t) {
#line 573
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )" PARENT=\"%p\"",
              (void *)t->parent);
    } else {
#line 577
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )" PARENT=\"\"");
    }
#line 580
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )">");
#line 582
    if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 584
      (*write_f)(t, file, d);
    }
#line 587
    if ((unsigned int )t->left == (unsigned int )((void *)0)) {
#line 587
      if ((unsigned int )t->right == (unsigned int )((void *)0)) {
#line 589
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</_GDSL_BINTREE_LEAF>\n");
      } else {
#line 593
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</_GDSL_BINTREE_NODE>\n");
      }
    } else {
#line 593
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</_GDSL_BINTREE_NODE>\n");
    }
#line 596
    bintree_write((_gdsl_bintree_t const   )t->left, write_f, file, d, dump);
#line 597
    bintree_write((_gdsl_bintree_t const   )t->right, write_f, file, d, dump);
  }
#line 599
  return;
}
}
#line 1 "cil-6JRsZ0zF.o"
#pragma merger("0","/tmp/cil-96ijQaNK.i","")
#line 33 "../gdsl.c"
extern char const   *gdsl_get_version(void) 
{ 


  {
#line 36
  return ("1.6");
}
}
#line 1 "cil-31gK5HJj.o"
#pragma merger("0","/tmp/cil-htBOchxI.i","")
#line 147 "/usr/include/stdio.h"
extern struct _IO_FILE *stderr ;
#line 485 "/usr/include/stdlib.h"
extern  __attribute__((__nothrow__)) void *( __attribute__((__warn_unused_result__)) realloc)(void *__ptr ,
                                                                                              size_t __size ) ;
#line 127 "/usr/include/string.h"
extern  __attribute__((__nothrow__)) char *( __attribute__((__nonnull__(1,2))) strcpy)(char * __restrict  __dest ,
                                                                                       char const   * __restrict  __src ) ;
#line 397
extern  __attribute__((__nothrow__)) size_t ( __attribute__((__nonnull__(1))) strlen)(char const   *__s )  __attribute__((__pure__)) ;
#line 82 "../gdsl_heap.h"
extern gdsl_heap_t gdsl_heap_alloc(char const   *name , gdsl_element_t (*alloc_f)(void *USER_DATA ) ,
                                   void (*free_f)(gdsl_element_t E ) , long (*comp_f)(gdsl_element_t const   E ,
                                                                                      void *VALUE ) ) ;
#line 102
extern void gdsl_heap_free(gdsl_heap_t heap ) ;
#line 119
extern void gdsl_heap_flush(gdsl_heap_t heap ) ;
#line 136
extern char const   *gdsl_heap_get_name(gdsl_heap_t const   heap ) ;
#line 147
extern ulong___0 gdsl_heap_get_size(gdsl_heap_t const   heap ) ;
#line 161
extern gdsl_element_t gdsl_heap_get_top(gdsl_heap_t const   heap ) ;
#line 173
extern bool gdsl_heap_is_empty(gdsl_heap_t const   heap ) ;
#line 194
extern gdsl_heap_t gdsl_heap_set_name(gdsl_heap_t heap , char const   *name ) ;
#line 213
extern gdsl_element_t gdsl_heap_set_top(gdsl_heap_t heap , void *value ) ;
#line 236
extern gdsl_element_t gdsl_heap_insert(gdsl_heap_t heap , void *value ) ;
#line 255
extern gdsl_element_t gdsl_heap_remove_top(gdsl_heap_t heap ) ;
#line 274
extern gdsl_heap_t gdsl_heap_delete_top(gdsl_heap_t heap ) ;
#line 297
extern gdsl_element_t gdsl_heap_map_forward(gdsl_heap_t const   heap , int (*map_f)(gdsl_element_t const   E ,
                                                                                    gdsl_location_t LOCATION ,
                                                                                    void *USER_DATA ) ,
                                            void *user_data ) ;
#line 322
extern void gdsl_heap_write(gdsl_heap_t const   heap , void (*write_f)(gdsl_element_t const   E ,
                                                                       FILE *OUTPUT_FILE ,
                                                                       gdsl_location_t LOCATION ,
                                                                       void *USER_DATA ) ,
                            FILE *file , void *user_data ) ;
#line 345
extern void gdsl_heap_write_xml(gdsl_heap_t const   heap , void (*write_f)(gdsl_element_t const   E ,
                                                                           FILE *OUTPUT_FILE ,
                                                                           gdsl_location_t LOCATION ,
                                                                           void *USER_DATA ) ,
                                FILE *file , void *user_data ) ;
#line 368
extern void gdsl_heap_dump(gdsl_heap_t const   heap , void (*write_f)(gdsl_element_t const   E ,
                                                                      FILE *OUTPUT_FILE ,
                                                                      gdsl_location_t LOCATION ,
                                                                      void *USER_DATA ) ,
                           FILE *file , void *user_data ) ;
#line 49 "../gdsl_heap.c"
static gdsl_element_t default_alloc(void *e ) ;
#line 52
static void default_free(gdsl_element_t e ) ;
#line 55
static long default_comp(gdsl_element_t e , void *key ) ;
#line 58
static gdsl_location_t get_location(gdsl_heap_t heap , int i ) ;
#line 61
static void taslacmite(gdsl_element_t *t , ulong___0 k , long (*comp_f)(gdsl_element_t const   E ,
                                                                        void *VALUE ) ) ;
#line 64
static ulong___0 taslactite(gdsl_element_t *t , ulong___0 n , ulong___0 k , long (*comp_f)(gdsl_element_t const   E ,
                                                                                           void *VALUE ) ) ;
#line 71 "../gdsl_heap.c"
extern gdsl_heap_t gdsl_heap_alloc(char const   *name , gdsl_element_t (*alloc_f)(void *USER_DATA ) ,
                                   void (*free_f)(gdsl_element_t E ) , long (*comp_f)(gdsl_element_t const   E ,
                                                                                      void *VALUE ) ) 
{ 
  gdsl_heap_t heap ;
  void *tmp ;
  gdsl_heap_t tmp___0 ;
  void *tmp___1 ;

  {
#line 78
  tmp = malloc(sizeof(struct heap ));
#line 78
  heap = (gdsl_heap_t )tmp;
#line 80
  if ((unsigned int )heap == (unsigned int )((void *)0)) {
#line 82
    return ((gdsl_heap_t )((void *)0));
  }
#line 85
  heap->name = (char *)((void *)0);
#line 87
  tmp___0 = gdsl_heap_set_name(heap, name);
#line 87
  if ((unsigned int )tmp___0 == (unsigned int )((void *)0)) {
#line 89
    free((void *)heap);
#line 90
    return ((gdsl_heap_t )((void *)0));
  }
#line 93
  tmp___1 = malloc(sizeof(gdsl_element_t ));
#line 93
  heap->nodes = (gdsl_element_t *)tmp___1;
#line 94
  if ((unsigned int )heap->nodes == (unsigned int )((void *)0)) {
#line 96
    if ((unsigned int )heap->name != (unsigned int )((void *)0)) {
#line 98
      free((void *)heap->name);
    }
#line 100
    free((void *)heap);
#line 101
    return ((gdsl_heap_t )((void *)0));
  }
#line 104
  *(heap->nodes + 0) = (void *)0;
#line 105
  heap->card = (ulong___0 )0;
#line 107
  if (alloc_f) {
#line 107
    heap->alloc_f = alloc_f;
  } else {
#line 107
    heap->alloc_f = & default_alloc;
  }
#line 108
  if (free_f) {
#line 108
    heap->free_f = free_f;
  } else {
#line 108
    heap->free_f = & default_free;
  }
#line 109
  if (comp_f) {
#line 109
    heap->comp_f = comp_f;
  } else {
#line 109
    heap->comp_f = (long (*)(gdsl_element_t const   E , void *VALUE ))(& default_comp);
  }
#line 111
  return (heap);
}
}
#line 114 "../gdsl_heap.c"
extern void gdsl_heap_free(gdsl_heap_t heap ) 
{ 
  ulong___0 i ;

  {
#line 121
  if ((unsigned int )heap->name != (unsigned int )((void *)0)) {
#line 123
    free((void *)heap->name);
  }
#line 126
  i = (ulong___0 )1;
#line 126
  while (i < heap->card) {
#line 128
    (*(heap->free_f))(*(heap->nodes + i));
#line 126
    i ++;
  }
#line 131
  free((void *)heap->nodes);
#line 132
  free((void *)heap);
#line 133
  return;
}
}
#line 135 "../gdsl_heap.c"
extern void gdsl_heap_flush(gdsl_heap_t heap ) 
{ 
  ulong___0 i ;

  {
#line 142
  i = (ulong___0 )1;
#line 142
  while (i < heap->card) {
#line 144
    (*(heap->free_f))(*(heap->nodes + i));
#line 142
    i ++;
  }
#line 147
  heap->card = (ulong___0 )0;
#line 148
  return;
}
}
#line 154 "../gdsl_heap.c"
extern char const   *gdsl_heap_get_name(gdsl_heap_t const   heap ) 
{ 


  {
#line 159
  return ((char const   *)heap->name);
}
}
#line 162 "../gdsl_heap.c"
extern ulong___0 gdsl_heap_get_size(gdsl_heap_t const   heap ) 
{ 


  {
#line 167
  return (heap->card);
}
}
#line 170 "../gdsl_heap.c"
extern gdsl_element_t gdsl_heap_get_top(gdsl_heap_t const   heap ) 
{ 
  void *tmp ;

  {
#line 175
  if (heap->card == 0UL) {
#line 175
    tmp = (void *)0;
  } else {
#line 175
    tmp = *(heap->nodes + 1);
  }
#line 175
  return (tmp);
}
}
#line 178 "../gdsl_heap.c"
extern bool gdsl_heap_is_empty(gdsl_heap_t const   heap ) 
{ 


  {
#line 183
  return ((bool )(heap->card == 0UL));
}
}
#line 190 "../gdsl_heap.c"
extern gdsl_heap_t gdsl_heap_set_name(gdsl_heap_t heap , char const   *name ) 
{ 
  size_t tmp ;
  void *tmp___0 ;

  {
#line 193
  if ((unsigned int )heap->name != (unsigned int )((void *)0)) {
#line 195
    free((void *)heap->name);
#line 196
    heap->name = (char *)((void *)0);
  }
#line 199
  if ((unsigned int )name != (unsigned int )((void *)0)) {
#line 201
    tmp = strlen(name);
#line 201
    tmp___0 = malloc((1U + tmp) * sizeof(char ));
#line 201
    heap->name = (char *)tmp___0;
#line 203
    if ((unsigned int )heap->name == (unsigned int )((void *)0)) {
#line 205
      return ((gdsl_heap_t )((void *)0));
    }
#line 208
    strcpy((char * __restrict  )heap->name, (char const   * __restrict  )name);
  }
#line 211
  return (heap);
}
}
#line 214 "../gdsl_heap.c"
extern gdsl_element_t gdsl_heap_set_top(gdsl_heap_t heap , void *value ) 
{ 
  gdsl_element_t e ;
  ulong___0 tmp ;

  {
#line 221
  e = (*(heap->alloc_f))(value);
#line 223
  if ((unsigned int )e == (unsigned int )((void *)0)) {
#line 225
    return ((void *)0);
  }
#line 228
  *(heap->nodes + 0) = e;
#line 230
  tmp = taslactite(heap->nodes, heap->card, (ulong___0 )0, heap->comp_f);
#line 230
  if (tmp == 0UL) {
#line 232
    (*(heap->free_f))(e);
#line 233
    *(heap->nodes + 0) = (void *)0;
#line 234
    return ((void *)0);
  }
#line 237
  return (*(heap->nodes + 0));
}
}
#line 240 "../gdsl_heap.c"
extern gdsl_element_t gdsl_heap_insert(gdsl_heap_t heap , void *value ) 
{ 
  gdsl_element_t e ;
  void *tmp ;

  {
#line 247
  e = (*(heap->alloc_f))(value);
#line 249
  if ((unsigned int )e == (unsigned int )((void *)0)) {
#line 251
    return ((void *)0);
  }
#line 254
  tmp = realloc((void *)heap->nodes, (size_t )((2UL + heap->card) * (ulong___0 )sizeof(gdsl_element_t )));
#line 254
  heap->nodes = (gdsl_element_t *)tmp;
#line 257
  if ((unsigned int )heap->nodes == (unsigned int )((void *)0)) {
#line 259
    (*(heap->free_f))(e);
#line 260
    return ((void *)0);
  }
#line 263
  (heap->card) ++;
#line 264
  *(heap->nodes + heap->card) = e;
#line 265
  taslacmite(heap->nodes, heap->card, heap->comp_f);
#line 267
  return (e);
}
}
#line 306 "../gdsl_heap.c"
extern gdsl_element_t gdsl_heap_remove_top(gdsl_heap_t heap ) 
{ 
  gdsl_element_t e ;

  {
#line 309
  e = (void *)0;
#line 313
  if (heap->card == 0UL) {
#line 315
    return ((void *)0);
  }
#line 318
  e = *(heap->nodes + 1);
#line 319
  *(heap->nodes + 1) = *(heap->nodes + heap->card);
#line 320
  (heap->card) --;
#line 321
  taslactite(heap->nodes, heap->card, (ulong___0 )1, heap->comp_f);
#line 323
  return (e);
}
}
#line 326 "../gdsl_heap.c"
extern gdsl_heap_t gdsl_heap_delete_top(gdsl_heap_t heap ) 
{ 
  gdsl_element_t e ;
  gdsl_element_t tmp ;

  {
#line 329
  tmp = gdsl_heap_remove_top(heap);
#line 329
  e = tmp;
#line 331
  if ((unsigned int )e == (unsigned int )((void *)0)) {
#line 333
    return ((gdsl_heap_t )((void *)0));
  }
#line 336
  (*(heap->free_f))(e);
#line 337
  return (heap);
}
}
#line 344 "../gdsl_heap.c"
extern gdsl_element_t gdsl_heap_map_forward(gdsl_heap_t const   heap , int (*map_f)(gdsl_element_t const   E ,
                                                                                    gdsl_location_t LOCATION ,
                                                                                    void *USER_DATA ) ,
                                            void *user_data ) 
{ 
  ulong___0 i ;
  gdsl_element_t e ;
  gdsl_location_t tmp ;
  int tmp___0 ;

  {
#line 352
  i = (ulong___0 )1;
#line 352
  while (i <= heap->card) {
#line 354
    e = *(heap->nodes + i);
#line 356
    tmp = get_location((gdsl_heap_t )heap, (int )i);
#line 356
    tmp___0 = (*map_f)((gdsl_element_t const   )e, tmp, user_data);
#line 356
    if (tmp___0 == 0) {
#line 358
      return (e);
    }
#line 352
    i ++;
  }
#line 362
  return ((void *)0);
}
}
#line 369 "../gdsl_heap.c"
extern void gdsl_heap_write(gdsl_heap_t const   heap , void (*write_f)(gdsl_element_t const   E ,
                                                                       FILE *OUTPUT_FILE ,
                                                                       gdsl_location_t LOCATION ,
                                                                       void *USER_DATA ) ,
                            FILE *file , void *user_data ) 
{ 
  ulong___0 i ;
  gdsl_location_t tmp ;

  {
#line 375
  i = (ulong___0 )1;
#line 375
  while (i <= heap->card) {
#line 377
    if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 379
      tmp = get_location((gdsl_heap_t )heap, (int )i);
#line 379
      (*write_f)((gdsl_element_t const   )*(heap->nodes + i), file, tmp, user_data);
    }
#line 375
    i ++;
  }
#line 383
  return;
}
}
#line 385 "../gdsl_heap.c"
extern void gdsl_heap_write_xml(gdsl_heap_t const   heap , void (*write_f)(gdsl_element_t const   E ,
                                                                           FILE *OUTPUT_FILE ,
                                                                           gdsl_location_t LOCATION ,
                                                                           void *USER_DATA ) ,
                                FILE *file , void *user_data ) 
{ 
  ulong___0 i ;
  char const   *tmp ;
  gdsl_location_t tmp___0 ;

  {
#line 391
  if ((unsigned int )heap->name == (unsigned int )((void *)0)) {
#line 391
    tmp = "";
  } else {
#line 391
    tmp = (char const   *)heap->name;
  }
#line 391
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_HEAP REF=\"%p\" NAME=\"%s\" SIZE=\"%ld\">\n",
          (void *)heap, tmp, heap->card);
#line 394
  i = (ulong___0 )1;
#line 394
  while (i <= heap->card) {
#line 396
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_HEAP_ENTRY VALUE=\"%ld\">\n",
            i);
#line 397
    if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 399
      tmp___0 = get_location((gdsl_heap_t )heap, (int )i);
#line 399
      (*write_f)((gdsl_element_t const   )*(heap->nodes + i), file, tmp___0, user_data);
    }
#line 402
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_HEAP_ENTRY>\n");
#line 394
    i ++;
  }
#line 405
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_HEAP>\n");
#line 406
  return;
}
}
#line 408 "../gdsl_heap.c"
extern void gdsl_heap_dump(gdsl_heap_t const   heap , void (*write_f)(gdsl_element_t const   E ,
                                                                      FILE *OUTPUT_FILE ,
                                                                      gdsl_location_t LOCATION ,
                                                                      void *USER_DATA ) ,
                           FILE *file , void *user_data ) 
{ 
  ulong___0 i ;
  char const   *tmp ;
  gdsl_location_t tmp___0 ;

  {
#line 414
  if ((unsigned int )heap->name == (unsigned int )((void *)0)) {
#line 414
    tmp = "";
  } else {
#line 414
    tmp = (char const   *)heap->name;
  }
#line 414
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_HEAP REF=\"%p\" NAME=\"%s\" SIZE=\"%ld\">\n",
          (void *)heap, tmp, heap->card);
#line 417
  i = (ulong___0 )1;
#line 417
  while (i <= heap->card) {
#line 419
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_HEAP_ENTRY VALUE=\"%ld\">\n",
            i);
#line 420
    if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 422
      tmp___0 = get_location((gdsl_heap_t )heap, (int )i);
#line 422
      (*write_f)((gdsl_element_t const   )*(heap->nodes + i), file, tmp___0, user_data);
    }
#line 425
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_HEAP_ENTRY>\n");
#line 417
    i ++;
  }
#line 428
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_HEAP>\n");
#line 429
  return;
}
}
#line 435 "../gdsl_heap.c"
static gdsl_element_t default_alloc(void *e ) 
{ 


  {
#line 438
  return (e);
}
}
#line 441 "../gdsl_heap.c"
static void default_free(gdsl_element_t e ) 
{ 


  {
#line 445
  return;
}
}
#line 447 "../gdsl_heap.c"
static long default_comp(gdsl_element_t e , void *key ) 
{ 


  {
#line 450
  fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"default_comp\n");
#line 451
  return (0L);
}
}
#line 454 "../gdsl_heap.c"
static void taslacmite(gdsl_element_t *t , ulong___0 k , long (*comp_f)(gdsl_element_t const   E ,
                                                                        void *VALUE ) ) 
{ 
  gdsl_element_t v ;
  long tmp ;

  {
#line 459
  v = *(t + k);
#line 466
  while (1) {
#line 466
    if (k != 1UL) {
#line 466
      tmp = (*comp_f)((gdsl_element_t const   )*(t + k / 2UL), v);
#line 466
      if (! (tmp <= 0L)) {
#line 466
        break;
      }
    } else {
#line 466
      break;
    }
#line 468
    *(t + k) = *(t + k / 2UL);
#line 469
    k /= 2UL;
  }
#line 472
  *(t + k) = v;
#line 473
  return;
}
}
#line 475 "../gdsl_heap.c"
static ulong___0 taslactite(gdsl_element_t *t , ulong___0 n , ulong___0 k , long (*comp_f)(gdsl_element_t const   E ,
                                                                                           void *VALUE ) ) 
{ 
  ulong___0 j ;
  gdsl_element_t v ;
  long tmp ;
  long tmp___0 ;

  {
#line 481
  v = *(t + k);
#line 483
  while (k <= n / 2UL) {
#line 485
    j = k + k;
#line 487
    if (j < n) {
#line 487
      tmp = (*comp_f)((gdsl_element_t const   )*(t + j), *(t + (j + 1UL)));
#line 487
      if (tmp < 0L) {
#line 489
        j ++;
      }
    }
#line 492
    tmp___0 = (*comp_f)((gdsl_element_t const   )*(t + j), v);
#line 492
    if (tmp___0 <= 0L) {
#line 494
      break;
    }
#line 497
    *(t + k) = *(t + j);
#line 498
    k = j;
  }
#line 501
  *(t + k) = v;
#line 502
  return (k);
}
}
#line 505 "../gdsl_heap.c"
static gdsl_location_t get_location(gdsl_heap_t heap , int i ) 
{ 
  gdsl_location_t location ;

  {
#line 508
  location = (gdsl_location_t )0;
#line 510
  if (i == 1) {
#line 512
    location = (gdsl_location_t )((unsigned int )location | 1U);
  }
#line 515
  if ((ulong___0 )i == heap->card) {
#line 517
    location = (gdsl_location_t )((unsigned int )location | 2U);
  }
#line 520
  if ((ulong___0 )(i * 2) > heap->card) {
#line 522
    location = (gdsl_location_t )((unsigned int )location | 2U);
  }
#line 525
  return (location);
}
}
#line 1 "cil-XJpcsq2v.o"
#pragma merger("0","/tmp/cil-kU5FC_3z.i","")
#line 92 "../_gdsl_node.h"
extern _gdsl_node_t _gdsl_node_alloc(void) ;
#line 105
extern gdsl_element_t _gdsl_node_free(_gdsl_node_t n ) ;
#line 124
extern _gdsl_node_t _gdsl_node_get_succ(_gdsl_node_t const   n ) ;
#line 139
extern _gdsl_node_t _gdsl_node_get_pred(_gdsl_node_t const   n ) ;
#line 152
extern gdsl_element_t _gdsl_node_get_content(_gdsl_node_t const   n ) ;
#line 171
extern void _gdsl_node_set_succ(_gdsl_node_t n , _gdsl_node_t const   succ ) ;
#line 187
extern void _gdsl_node_set_pred(_gdsl_node_t n , _gdsl_node_t const   pred ) ;
#line 203
extern void _gdsl_node_set_content(_gdsl_node_t n , gdsl_element_t const   e ) ;
#line 220
extern void _gdsl_node_link(_gdsl_node_t node1 , _gdsl_node_t node2 ) ;
#line 189 "../_gdsl_list.h"
extern void _gdsl_list_remove(_gdsl_node_t node ) ;
#line 80 "../gdsl_queue.h"
extern gdsl_queue_t gdsl_queue_alloc(char const   *name , gdsl_element_t (*alloc_f)(void *USER_DATA ) ,
                                     void (*free_f)(gdsl_element_t E ) ) ;
#line 99
extern void gdsl_queue_free(gdsl_queue_t queue ) ;
#line 116
extern void gdsl_queue_flush(gdsl_queue_t queue ) ;
#line 133
extern char const   *gdsl_queue_get_name(gdsl_queue_t const   queue ) ;
#line 144
extern ulong___0 gdsl_queue_get_size(gdsl_queue_t const   queue ) ;
#line 156
extern bool gdsl_queue_is_empty(gdsl_queue_t const   queue ) ;
#line 170
extern gdsl_element_t gdsl_queue_get_head(gdsl_queue_t const   queue ) ;
#line 184
extern gdsl_element_t gdsl_queue_get_tail(gdsl_queue_t const   queue ) ;
#line 205
extern gdsl_queue_t gdsl_queue_set_name(gdsl_queue_t queue , char const   *name ) ;
#line 225
extern gdsl_element_t gdsl_queue_insert(gdsl_queue_t queue , void *v ) ;
#line 242
extern gdsl_element_t gdsl_queue_remove(gdsl_queue_t queue ) ;
#line 265
extern gdsl_element_t gdsl_queue_search(gdsl_queue_t const   queue , long (*f)(gdsl_element_t const   E ,
                                                                               void *VALUE ) ,
                                        void *value ) ;
#line 281
extern gdsl_element_t gdsl_queue_search_by_position(gdsl_queue_t const   queue , ulong___0 pos ) ;
#line 307
extern gdsl_element_t gdsl_queue_map_forward(gdsl_queue_t const   queue , int (*map_f)(gdsl_element_t const   E ,
                                                                                       gdsl_location_t LOCATION ,
                                                                                       void *USER_DATA ) ,
                                             void *user_data ) ;
#line 330
extern gdsl_element_t gdsl_queue_map_backward(gdsl_queue_t const   queue , int (*map_f)(gdsl_element_t const   E ,
                                                                                        gdsl_location_t LOCATION ,
                                                                                        void *USER_DATA ) ,
                                              void *user_data ) ;
#line 355
extern void gdsl_queue_write(gdsl_queue_t const   queue , void (*write_f)(gdsl_element_t const   E ,
                                                                          FILE *OUTPUT_FILE ,
                                                                          gdsl_location_t LOCATION ,
                                                                          void *USER_DATA ) ,
                             FILE *file , void *user_data ) ;
#line 378
extern void gdsl_queue_write_xml(gdsl_queue_t const   queue , void (*write_f)(gdsl_element_t const   E ,
                                                                              FILE *OUTPUT_FILE ,
                                                                              gdsl_location_t LOCATION ,
                                                                              void *USER_DATA ) ,
                                 FILE *file , void *user_data ) ;
#line 401
extern void gdsl_queue_dump(gdsl_queue_t const   queue , void (*write_f)(gdsl_element_t const   E ,
                                                                         FILE *OUTPUT_FILE ,
                                                                         gdsl_location_t LOCATION ,
                                                                         void *USER_DATA ) ,
                            FILE *file , void *user_data ) ;
#line 52 "../gdsl_queue.c"
static gdsl_element_t default_alloc___0(void *e ) ;
#line 55
static void default_free___0(gdsl_element_t e ) ;
#line 58
static _gdsl_node_t search_by_value(gdsl_queue_t queue , long (*f)(gdsl_element_t const   E ,
                                                                   void *VALUE ) ,
                                    void *value ) ;
#line 61
static _gdsl_node_t search_by_position(gdsl_queue_t queue , ulong___0 pos ) ;
#line 64
static gdsl_location_t get_location___0(gdsl_queue_t queue , _gdsl_node_t node ) ;
#line 71 "../gdsl_queue.c"
extern gdsl_queue_t gdsl_queue_alloc(char const   *name , gdsl_element_t (*alloc_f)(void *USER_DATA ) ,
                                     void (*free_f)(gdsl_element_t E ) ) 
{ 
  gdsl_queue_t queue ;
  void *tmp ;
  gdsl_queue_t tmp___0 ;

  {
#line 75
  queue = (gdsl_queue_t )((void *)0);
#line 77
  tmp = malloc(sizeof(struct _gdsl_queue ));
#line 77
  queue = (gdsl_queue_t )tmp;
#line 79
  if ((unsigned int )queue == (unsigned int )((void *)0)) {
#line 81
    return ((gdsl_queue_t )((void *)0));
  }
#line 84
  queue->d = _gdsl_node_alloc();
#line 86
  if ((unsigned int )queue->d == (unsigned int )((void *)0)) {
#line 88
    free((void *)queue);
#line 89
    return ((gdsl_queue_t )((void *)0));
  }
#line 92
  queue->z = _gdsl_node_alloc();
#line 94
  if ((unsigned int )queue->z == (unsigned int )((void *)0)) {
#line 96
    _gdsl_node_free(queue->d);
#line 97
    free((void *)queue);
#line 98
    return ((gdsl_queue_t )((void *)0));
  }
#line 101
  queue->name = (char *)((void *)0);
#line 103
  tmp___0 = gdsl_queue_set_name(queue, name);
#line 103
  if ((unsigned int )tmp___0 == (unsigned int )((void *)0)) {
#line 105
    _gdsl_node_free(queue->z);
#line 106
    _gdsl_node_free(queue->d);
#line 107
    free((void *)queue);
#line 108
    return ((gdsl_queue_t )((void *)0));
  }
#line 111
  queue->card = 0UL;
#line 113
  _gdsl_node_link(queue->d, queue->z);
#line 114
  _gdsl_node_set_succ(queue->z, (_gdsl_node_t const   )queue->z);
#line 115
  _gdsl_node_set_pred(queue->d, (_gdsl_node_t const   )queue->d);
#line 117
  if (alloc_f) {
#line 117
    queue->alloc_f = alloc_f;
  } else {
#line 117
    queue->alloc_f = & default_alloc___0;
  }
#line 118
  if (free_f) {
#line 118
    queue->free_f = free_f;
  } else {
#line 118
    queue->free_f = & default_free___0;
  }
#line 120
  return (queue);
}
}
#line 123 "../gdsl_queue.c"
extern void gdsl_queue_free(gdsl_queue_t queue ) 
{ 
  bool tmp ;

  {
#line 128
  tmp = gdsl_queue_is_empty((gdsl_queue_t const   )queue);
#line 128
  if ((unsigned int )tmp == 0U) {
#line 130
    gdsl_queue_flush(queue);
  }
#line 133
  _gdsl_node_free(queue->d);
#line 134
  _gdsl_node_free(queue->z);
#line 136
  if ((unsigned int )queue->name != (unsigned int )((void *)0)) {
#line 138
    free((void *)queue->name);
  }
#line 141
  free((void *)queue);
#line 142
  return;
}
}
#line 144 "../gdsl_queue.c"
extern void gdsl_queue_flush(gdsl_queue_t queue ) 
{ 
  _gdsl_node_t save ;
  _gdsl_node_t tmp ;
  gdsl_element_t tmp___0 ;

  {
#line 152
  tmp = _gdsl_node_get_succ((_gdsl_node_t const   )queue->d);
#line 154
  while ((unsigned int )tmp != (unsigned int )queue->z) {
#line 156
    save = _gdsl_node_get_succ((_gdsl_node_t const   )tmp);
#line 157
    tmp___0 = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 157
    (*(queue->free_f))(tmp___0);
#line 158
    _gdsl_node_free(tmp);
#line 159
    tmp = save;
  }
#line 162
  queue->card = 0UL;
#line 164
  _gdsl_node_link(queue->d, queue->z);
#line 165
  _gdsl_node_set_succ(queue->z, (_gdsl_node_t const   )queue->z);
#line 166
  _gdsl_node_set_pred(queue->d, (_gdsl_node_t const   )queue->d);
#line 167
  return;
}
}
#line 173 "../gdsl_queue.c"
extern char const   *gdsl_queue_get_name(gdsl_queue_t const   queue ) 
{ 


  {
#line 178
  return ((char const   *)queue->name);
}
}
#line 181 "../gdsl_queue.c"
extern ulong___0 gdsl_queue_get_size(gdsl_queue_t const   queue ) 
{ 


  {
#line 186
  return (queue->card);
}
}
#line 189 "../gdsl_queue.c"
extern bool gdsl_queue_is_empty(gdsl_queue_t const   queue ) 
{ 
  _gdsl_node_t tmp ;

  {
#line 194
  tmp = _gdsl_node_get_succ((_gdsl_node_t const   )queue->d);
#line 194
  return ((bool )((unsigned int )tmp == (unsigned int )queue->z));
}
}
#line 197 "../gdsl_queue.c"
extern gdsl_element_t gdsl_queue_get_head(gdsl_queue_t const   queue ) 
{ 
  _gdsl_node_t tmp ;
  gdsl_element_t tmp___0 ;

  {
#line 202
  tmp = _gdsl_node_get_pred((_gdsl_node_t const   )queue->z);
#line 202
  tmp___0 = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 202
  return (tmp___0);
}
}
#line 205 "../gdsl_queue.c"
extern gdsl_element_t gdsl_queue_get_tail(gdsl_queue_t const   queue ) 
{ 
  _gdsl_node_t tmp ;
  gdsl_element_t tmp___0 ;

  {
#line 210
  tmp = _gdsl_node_get_succ((_gdsl_node_t const   )queue->d);
#line 210
  tmp___0 = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 210
  return (tmp___0);
}
}
#line 217 "../gdsl_queue.c"
extern gdsl_queue_t gdsl_queue_set_name(gdsl_queue_t queue , char const   *name ) 
{ 
  size_t tmp ;
  void *tmp___0 ;

  {
#line 222
  if ((unsigned int )queue->name != (unsigned int )((void *)0)) {
#line 224
    free((void *)queue->name);
#line 225
    queue->name = (char *)((void *)0);
  }
#line 228
  if ((unsigned int )name != (unsigned int )((void *)0)) {
#line 230
    tmp = strlen(name);
#line 230
    tmp___0 = malloc((1U + tmp) * sizeof(char ));
#line 230
    queue->name = (char *)tmp___0;
#line 232
    if ((unsigned int )queue->name == (unsigned int )((void *)0)) {
#line 234
      return ((gdsl_queue_t )((void *)0));
    }
#line 237
    strcpy((char * __restrict  )queue->name, (char const   * __restrict  )name);
  }
#line 240
  return (queue);
}
}
#line 243 "../gdsl_queue.c"
extern gdsl_element_t gdsl_queue_insert(gdsl_queue_t queue , void *v ) 
{ 
  gdsl_element_t e ;
  _gdsl_node_t head ;
  _gdsl_node_t tmp ;
  _gdsl_node_t tmp___0 ;

  {
#line 247
  head = (_gdsl_node_t )((void *)0);
#line 251
  head = _gdsl_node_alloc();
#line 253
  if ((unsigned int )head == (unsigned int )((void *)0)) {
#line 255
    return ((void *)0);
  }
#line 258
  e = (*(queue->alloc_f))(v);
#line 260
  if ((unsigned int )e == (unsigned int )((void *)0)) {
#line 262
    _gdsl_node_free(head);
#line 263
    return ((void *)0);
  }
#line 266
  (queue->card) ++;
#line 267
  _gdsl_node_set_content(head, (gdsl_element_t const   )e);
#line 270
  tmp___0 = _gdsl_node_get_succ((_gdsl_node_t const   )queue->d);
#line 270
  tmp = tmp___0;
#line 271
  _gdsl_node_link(queue->d, head);
#line 272
  _gdsl_node_link(head, tmp);
#line 275
  return (e);
}
}
#line 278 "../gdsl_queue.c"
extern gdsl_element_t gdsl_queue_remove(gdsl_queue_t queue ) 
{ 
  _gdsl_node_t tail ;
  _gdsl_node_t tmp ;
  gdsl_element_t e ;
  gdsl_element_t tmp___0 ;
  bool tmp___1 ;

  {
#line 283
  tmp___1 = gdsl_queue_is_empty((gdsl_queue_t const   )queue);
#line 283
  if (! tmp___1) {
#line 285
    tmp = _gdsl_node_get_pred((_gdsl_node_t const   )queue->z);
#line 285
    tail = tmp;
#line 286
    tmp___0 = _gdsl_node_get_content((_gdsl_node_t const   )tail);
#line 286
    e = tmp___0;
#line 288
    _gdsl_list_remove(tail);
#line 289
    _gdsl_node_free(tail);
#line 291
    (queue->card) --;
#line 292
    return (e);
  }
#line 295
  return ((void *)0);
}
}
#line 302 "../gdsl_queue.c"
extern gdsl_element_t gdsl_queue_search(gdsl_queue_t const   queue , long (*f)(gdsl_element_t const   E ,
                                                                               void *VALUE ) ,
                                        void *value ) 
{ 
  _gdsl_node_t n ;
  gdsl_element_t tmp ;
  void *tmp___0 ;

  {
#line 310
  n = search_by_value((gdsl_queue_t )queue, f, value);
#line 312
  if ((unsigned int )n == (unsigned int )((void *)0)) {
#line 312
    tmp___0 = (void *)0;
  } else {
#line 312
    tmp = _gdsl_node_get_content((_gdsl_node_t const   )n);
#line 312
    tmp___0 = tmp;
  }
#line 312
  return (tmp___0);
}
}
#line 315 "../gdsl_queue.c"
extern gdsl_element_t gdsl_queue_search_by_position(gdsl_queue_t const   queue , ulong___0 pos ) 
{ 
  _gdsl_node_t n ;
  gdsl_element_t tmp ;
  gdsl_element_t tmp___0 ;

  {
#line 323
  n = search_by_position((gdsl_queue_t )queue, pos);
#line 325
  if (n) {
#line 325
    tmp = _gdsl_node_get_content((_gdsl_node_t const   )n);
#line 325
    tmp___0 = tmp;
  } else {
#line 325
    tmp___0 = (void *)0;
  }
#line 325
  return (tmp___0);
}
}
#line 332 "../gdsl_queue.c"
extern gdsl_element_t gdsl_queue_map_forward(gdsl_queue_t const   queue , int (*map_f)(gdsl_element_t const   E ,
                                                                                       gdsl_location_t LOCATION ,
                                                                                       void *USER_DATA ) ,
                                             void *user_data ) 
{ 
  gdsl_element_t e ;
  _gdsl_node_t tmp ;
  gdsl_location_t tmp___0 ;
  int tmp___1 ;

  {
#line 342
  tmp = _gdsl_node_get_succ((_gdsl_node_t const   )queue->d);
#line 344
  while ((unsigned int )tmp != (unsigned int )queue->z) {
#line 346
    e = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 348
    tmp___0 = get_location___0((gdsl_queue_t )queue, tmp);
#line 348
    tmp___1 = (*map_f)((gdsl_element_t const   )e, tmp___0, user_data);
#line 348
    if (tmp___1 == 0) {
#line 350
      return (e);
    }
#line 353
    tmp = _gdsl_node_get_succ((_gdsl_node_t const   )tmp);
  }
#line 356
  return ((void *)0);
}
}
#line 359 "../gdsl_queue.c"
extern gdsl_element_t gdsl_queue_map_backward(gdsl_queue_t const   queue , int (*map_f)(gdsl_element_t const   E ,
                                                                                        gdsl_location_t LOCATION ,
                                                                                        void *USER_DATA ) ,
                                              void *user_data ) 
{ 
  gdsl_element_t e ;
  _gdsl_node_t tmp ;
  gdsl_location_t tmp___0 ;
  int tmp___1 ;

  {
#line 369
  tmp = _gdsl_node_get_pred((_gdsl_node_t const   )queue->z);
#line 371
  while ((unsigned int )tmp != (unsigned int )queue->d) {
#line 373
    e = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 375
    tmp___0 = get_location___0((gdsl_queue_t )queue, tmp);
#line 375
    tmp___1 = (*map_f)((gdsl_element_t const   )e, tmp___0, user_data);
#line 375
    if (tmp___1 == 0) {
#line 377
      return (e);
    }
#line 380
    tmp = _gdsl_node_get_pred((_gdsl_node_t const   )tmp);
  }
#line 383
  return ((void *)0);
}
}
#line 390 "../gdsl_queue.c"
extern void gdsl_queue_write(gdsl_queue_t const   queue , void (*write_f)(gdsl_element_t const   E ,
                                                                          FILE *OUTPUT_FILE ,
                                                                          gdsl_location_t LOCATION ,
                                                                          void *USER_DATA ) ,
                             FILE *file , void *user_data ) 
{ 
  _gdsl_node_t tmp ;
  gdsl_location_t tmp___0 ;
  gdsl_element_t tmp___1 ;

  {
#line 400
  tmp = _gdsl_node_get_succ((_gdsl_node_t const   )queue->d);
#line 402
  while ((unsigned int )tmp != (unsigned int )queue->z) {
#line 404
    tmp___0 = get_location___0((gdsl_queue_t )queue, tmp);
#line 404
    tmp___1 = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 404
    (*write_f)((gdsl_element_t const   )tmp___1, file, tmp___0, user_data);
#line 406
    tmp = _gdsl_node_get_succ((_gdsl_node_t const   )tmp);
  }
#line 408
  return;
}
}
#line 410 "../gdsl_queue.c"
extern void gdsl_queue_write_xml(gdsl_queue_t const   queue , void (*write_f)(gdsl_element_t const   E ,
                                                                              FILE *OUTPUT_FILE ,
                                                                              gdsl_location_t LOCATION ,
                                                                              void *USER_DATA ) ,
                                 FILE *file , void *user_data ) 
{ 
  _gdsl_node_t tmp ;
  _gdsl_node_t tmp___0 ;
  _gdsl_node_t tmp___1 ;
  gdsl_element_t tmp___2 ;
  _gdsl_node_t tmp___3 ;
  gdsl_element_t tmp___4 ;
  _gdsl_node_t tmp___5 ;
  _gdsl_node_t tmp___6 ;
  gdsl_element_t tmp___7 ;
  _gdsl_node_t tmp___8 ;
  _gdsl_node_t tmp___9 ;
  gdsl_location_t tmp___10 ;
  gdsl_element_t tmp___11 ;
  gdsl_element_t tmp___12 ;

  {
#line 419
  tmp = _gdsl_node_get_succ((_gdsl_node_t const   )queue->d);
#line 421
  tmp___0 = _gdsl_node_get_pred((_gdsl_node_t const   )queue->z);
#line 421
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_QUEUE REF=\"%p\" NAME=\"%s\" CARD=\"%ld\" HEAD=\"%p\" TAIL=\"%p\">\n",
          (void *)queue, queue->name, queue->card, (void *)tmp, (void *)tmp___0);
#line 425
  while ((unsigned int )tmp != (unsigned int )queue->z) {
#line 427
    tmp___9 = _gdsl_node_get_succ((_gdsl_node_t const   )queue->d);
#line 427
    if ((unsigned int )tmp == (unsigned int )tmp___9) {
#line 429
      tmp___1 = _gdsl_node_get_succ((_gdsl_node_t const   )tmp);
#line 429
      tmp___2 = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 429
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_QUEUE_NODE REF=\"%p\" CONTENT=\"%p\" SUCC=\"%p\" PRED=\"\">",
              (void *)tmp, tmp___2, (void *)tmp___1);
    } else {
#line 433
      tmp___8 = _gdsl_node_get_pred((_gdsl_node_t const   )queue->z);
#line 433
      if ((unsigned int )tmp == (unsigned int )tmp___8) {
#line 435
        tmp___3 = _gdsl_node_get_pred((_gdsl_node_t const   )tmp);
#line 435
        tmp___4 = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 435
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_QUEUE_NODE REF=\"%p\" CONTENT=\"%p\" SUCC=\"\" PRED=\"%p\">",
                (void *)tmp, tmp___4, (void *)tmp___3);
      } else {
#line 441
        tmp___5 = _gdsl_node_get_pred((_gdsl_node_t const   )tmp);
#line 441
        tmp___6 = _gdsl_node_get_succ((_gdsl_node_t const   )tmp);
#line 441
        tmp___7 = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 441
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_QUEUE_NODE REF=\"%p\" CONTENT=\"%p\" SUCC=\"%p\" PRED=\"%p\">",
                (void *)tmp, tmp___7, (void *)tmp___6, (void *)tmp___5);
      }
    }
#line 447
    if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 447
      tmp___12 = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 447
      if ((unsigned int )tmp___12 != (unsigned int )((void *)0)) {
#line 449
        tmp___10 = get_location___0((gdsl_queue_t )queue, tmp);
#line 449
        tmp___11 = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 449
        (*write_f)((gdsl_element_t const   )tmp___11, file, tmp___10, user_data);
      }
    }
#line 452
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_QUEUE_NODE>\n");
#line 454
    tmp = _gdsl_node_get_succ((_gdsl_node_t const   )tmp);
  }
#line 457
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_QUEUE>\n");
#line 458
  return;
}
}
#line 460 "../gdsl_queue.c"
extern void gdsl_queue_dump(gdsl_queue_t const   queue , void (*write_f)(gdsl_element_t const   E ,
                                                                         FILE *OUTPUT_FILE ,
                                                                         gdsl_location_t LOCATION ,
                                                                         void *USER_DATA ) ,
                            FILE *file , void *user_data ) 
{ 
  _gdsl_node_t tmp ;
  _gdsl_node_t tmp___0 ;
  _gdsl_node_t tmp___1 ;
  _gdsl_node_t tmp___2 ;
  gdsl_element_t tmp___3 ;
  _gdsl_node_t tmp___4 ;
  _gdsl_node_t tmp___5 ;
  gdsl_element_t tmp___6 ;
  gdsl_location_t tmp___7 ;
  gdsl_element_t tmp___8 ;
  gdsl_element_t tmp___9 ;
  _gdsl_node_t tmp___10 ;

  {
#line 469
  tmp = _gdsl_node_get_succ((_gdsl_node_t const   )queue->d);
#line 471
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_QUEUE REF=\"%p\" NAME=\"%s\" CARD=\"%ld\" HEAD=\"%p\" TAIL=\"%p\">\n",
          (void *)queue, queue->name, queue->card, (void *)queue->d, (void *)queue->z);
#line 474
  tmp___0 = _gdsl_node_get_succ((_gdsl_node_t const   )queue->d);
#line 474
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_QUEUE_HEAD REF=\"%p\" SUCC=\"%p\">\n",
          (void *)queue->d, (void *)tmp___0);
#line 477
  while ((unsigned int )tmp != (unsigned int )queue->z) {
#line 479
    tmp___6 = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 479
    if ((unsigned int )tmp___6 != (unsigned int )((void *)0)) {
#line 481
      tmp___1 = _gdsl_node_get_pred((_gdsl_node_t const   )tmp);
#line 481
      tmp___2 = _gdsl_node_get_succ((_gdsl_node_t const   )tmp);
#line 481
      tmp___3 = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 481
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_QUEUE_NODE REF=\"%p\" CONTENT=\"%p\" SUCC=\"%p\" PRED=\"%p\">",
              (void *)tmp, tmp___3, (void *)tmp___2, (void *)tmp___1);
    } else {
#line 488
      tmp___4 = _gdsl_node_get_pred((_gdsl_node_t const   )tmp);
#line 488
      tmp___5 = _gdsl_node_get_succ((_gdsl_node_t const   )tmp);
#line 488
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_QUEUE_NODE REF=\"%p\" CONTENT=\"\" SUCC=\"%p\" PRED=\"%p\">",
              (void *)tmp, (void *)tmp___5, (void *)tmp___4);
    }
#line 493
    if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 493
      tmp___9 = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 493
      if ((unsigned int )tmp___9 != (unsigned int )((void *)0)) {
#line 495
        tmp___7 = get_location___0((gdsl_queue_t )queue, tmp);
#line 495
        tmp___8 = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 495
        (*write_f)((gdsl_element_t const   )tmp___8, file, tmp___7, user_data);
      }
    }
#line 498
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_QUEUE_NODE>\n");
#line 500
    tmp = _gdsl_node_get_succ((_gdsl_node_t const   )tmp);
  }
#line 503
  tmp___10 = _gdsl_node_get_pred((_gdsl_node_t const   )queue->z);
#line 503
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_QUEUE_TAIL REF=\"%p\" PRED=\"%p\">\n</GDSL_QUEUE>\n",
          (void *)queue->z, (void *)tmp___10);
#line 505
  return;
}
}
#line 511 "../gdsl_queue.c"
static gdsl_element_t default_alloc___0(void *e ) 
{ 


  {
#line 514
  return (e);
}
}
#line 517 "../gdsl_queue.c"
static void default_free___0(gdsl_element_t e ) 
{ 


  {
#line 521
  return;
}
}
#line 523 "../gdsl_queue.c"
static _gdsl_node_t search_by_value(gdsl_queue_t queue , long (*f)(gdsl_element_t const   E ,
                                                                   void *VALUE ) ,
                                    void *value ) 
{ 
  _gdsl_node_t left ;
  _gdsl_node_t right ;
  gdsl_element_t tmp ;
  long tmp___0 ;
  gdsl_element_t tmp___1 ;
  long tmp___2 ;
  _gdsl_node_t tmp___3 ;

  {
#line 529
  left = _gdsl_node_get_succ((_gdsl_node_t const   )queue->d);
#line 529
  right = _gdsl_node_get_pred((_gdsl_node_t const   )queue->z);
#line 529
  while (1) {
#line 529
    tmp___3 = _gdsl_node_get_succ((_gdsl_node_t const   )right);
#line 529
    if (! ((unsigned int )left != (unsigned int )tmp___3)) {
#line 529
      break;
    }
#line 533
    tmp = _gdsl_node_get_content((_gdsl_node_t const   )left);
#line 533
    tmp___0 = (*f)((gdsl_element_t const   )tmp, value);
#line 533
    if (tmp___0 == 0L) {
#line 535
      return (left);
    }
#line 538
    tmp___1 = _gdsl_node_get_content((_gdsl_node_t const   )right);
#line 538
    tmp___2 = (*f)((gdsl_element_t const   )tmp___1, value);
#line 538
    if (tmp___2 == 0L) {
#line 540
      return (right);
    }
#line 543
    if ((unsigned int )left == (unsigned int )right) {
#line 545
      return ((_gdsl_node_t )((void *)0));
    }
#line 529
    left = _gdsl_node_get_succ((_gdsl_node_t const   )left);
#line 529
    right = _gdsl_node_get_pred((_gdsl_node_t const   )right);
  }
#line 549
  return ((_gdsl_node_t )((void *)0));
}
}
#line 552 "../gdsl_queue.c"
static _gdsl_node_t search_by_position(gdsl_queue_t queue , ulong___0 pos ) 
{ 
  ulong___0 m ;
  _gdsl_node_t tmp ;

  {
#line 558
  if (pos <= 0UL) {
#line 560
    return ((_gdsl_node_t )((void *)0));
  } else
#line 558
  if (pos > queue->card) {
#line 560
    return ((_gdsl_node_t )((void *)0));
  }
#line 563
  m = queue->card / 2UL + 1UL;
#line 565
  if (pos < m) {
#line 567
    tmp = _gdsl_node_get_succ((_gdsl_node_t const   )queue->d);
#line 569
    while (pos > 1UL) {
#line 571
      tmp = _gdsl_node_get_succ((_gdsl_node_t const   )tmp);
#line 572
      pos --;
    }
  } else {
#line 577
    pos = queue->card - pos;
#line 578
    tmp = _gdsl_node_get_pred((_gdsl_node_t const   )queue->z);
#line 580
    while (pos > 0UL) {
#line 582
      tmp = _gdsl_node_get_pred((_gdsl_node_t const   )tmp);
#line 583
      pos --;
    }
  }
#line 587
  return (tmp);
}
}
#line 590 "../gdsl_queue.c"
static gdsl_location_t get_location___0(gdsl_queue_t queue , _gdsl_node_t node ) 
{ 
  gdsl_location_t location ;
  _gdsl_node_t tmp ;
  _gdsl_node_t tmp___0 ;

  {
#line 593
  location = (gdsl_location_t )0;
#line 595
  tmp = _gdsl_node_get_succ((_gdsl_node_t const   )queue->d);
#line 595
  if ((unsigned int )node == (unsigned int )tmp) {
#line 597
    location = (gdsl_location_t )((unsigned int )location | 1U);
  }
#line 600
  tmp___0 = _gdsl_node_get_pred((_gdsl_node_t const   )queue->z);
#line 600
  if ((unsigned int )node == (unsigned int )tmp___0) {
#line 602
    location = (gdsl_location_t )((unsigned int )location | 2U);
  }
#line 605
  return (location);
}
}
#line 1 "cil-3Iu2aK3_.o"
#pragma merger("0","/tmp/cil-0MZ_HFt4.i","")
#line 93 "../_gdsl_bstree.h"
extern _gdsl_bstree_t _gdsl_bstree_alloc(gdsl_element_t const   e ) ;
#line 110
extern void _gdsl_bstree_free(_gdsl_bstree_t t , void (* const  free_f)(gdsl_element_t E ) ) ;
#line 132
extern _gdsl_bstree_t _gdsl_bstree_copy(_gdsl_bstree_t const   t , gdsl_element_t (* const  copy_f)(gdsl_element_t const   E ) ) ;
#line 151
extern bool _gdsl_bstree_is_empty(_gdsl_bstree_t const   t ) ;
#line 165
extern bool _gdsl_bstree_is_leaf(_gdsl_bstree_t const   t ) ;
#line 176
extern gdsl_element_t _gdsl_bstree_get_content(_gdsl_bstree_t const   t ) ;
#line 190
extern bool _gdsl_bstree_is_root(_gdsl_bstree_t const   t ) ;
#line 204
extern _gdsl_bstree_t _gdsl_bstree_get_parent(_gdsl_bstree_t const   t ) ;
#line 218
extern _gdsl_bstree_t _gdsl_bstree_get_left(_gdsl_bstree_t const   t ) ;
#line 232
extern _gdsl_bstree_t _gdsl_bstree_get_right(_gdsl_bstree_t const   t ) ;
#line 244
extern ulong___0 _gdsl_bstree_get_size(_gdsl_bstree_t const   t ) ;
#line 259
extern ulong___0 _gdsl_bstree_get_height(_gdsl_bstree_t const   t ) ;
#line 290
extern _gdsl_bstree_t _gdsl_bstree_insert(_gdsl_bstree_t *t , long (* const  comp_f)(gdsl_element_t const   E ,
                                                                                     void *VALUE ) ,
                                          gdsl_element_t const   v , int *rc ) ;
#line 318
extern gdsl_element_t _gdsl_bstree_remove(_gdsl_bstree_t *t , long (* const  comp_f)(gdsl_element_t const   E ,
                                                                                     void *VALUE ) ,
                                          gdsl_element_t const   v ) ;
#line 345
extern _gdsl_bstree_t _gdsl_bstree_search(_gdsl_bstree_t const   t , long (* const  comp_f)(gdsl_element_t const   E ,
                                                                                            void *VALUE ) ,
                                          gdsl_element_t const   v ) ;
#line 367
extern _gdsl_bstree_t _gdsl_bstree_search_next(_gdsl_bstree_t const   t , long (* const  comp_f)(gdsl_element_t const   E ,
                                                                                                 void *VALUE ) ,
                                               gdsl_element_t const   v ) ;
#line 395
extern _gdsl_bstree_t _gdsl_bstree_map_prefix(_gdsl_bstree_t const   t , int (* const  map_f)(_gdsl_bstree_t TREE ,
                                                                                              void *USER_DATA ) ,
                                              void *user_data ) ;
#line 419
extern _gdsl_bstree_t _gdsl_bstree_map_infix(_gdsl_bstree_t const   t , int (* const  map_f)(_gdsl_bstree_t TREE ,
                                                                                             void *USER_DATA ) ,
                                             void *user_data ) ;
#line 443
extern _gdsl_bstree_t _gdsl_bstree_map_postfix(_gdsl_bstree_t const   t , int (* const  map_f)(_gdsl_bstree_t TREE ,
                                                                                               void *USER_DATA ) ,
                                               void *user_data ) ;
#line 470
extern void _gdsl_bstree_write(_gdsl_bstree_t const   t , void (* const  write_f)(_gdsl_bstree_t TREE ,
                                                                                  FILE *OUTPUT_FILE ,
                                                                                  void *USER_DATA ) ,
                               FILE *file , void *user_data ) ;
#line 496
extern void _gdsl_bstree_write_xml(_gdsl_bstree_t const   t , void (* const  write_f)(_gdsl_bstree_t TREE ,
                                                                                      FILE *OUTPUT_FILE ,
                                                                                      void *USER_DATA ) ,
                                   FILE *file , void *user_data ) ;
#line 521
extern void _gdsl_bstree_dump(_gdsl_bstree_t const   t , void (* const  write_f)(_gdsl_bstree_t TREE ,
                                                                                 FILE *OUTPUT_FILE ,
                                                                                 void *USER_DATA ) ,
                              FILE *file , void *user_data ) ;
#line 47 "../_gdsl_bstree.c"
static gdsl_element_t destroy_max(_gdsl_bstree_t *tree ) ;
#line 53
static void bstree_write(_gdsl_bstree_t const   t , void (* const  write_f)(_gdsl_bstree_t TREE ,
                                                                            FILE *OUTPUT_FILE ,
                                                                            void *USER_DATA ) ,
                         FILE *file , void *user_data , bool dump ) ;
#line 62 "../_gdsl_bstree.c"
extern _gdsl_bstree_t _gdsl_bstree_alloc(gdsl_element_t const   e ) 
{ 
  _gdsl_bintree_t tmp ;

  {
#line 65
  tmp = _gdsl_bintree_alloc(e, (_gdsl_bintree_t const   )((void *)0), (_gdsl_bintree_t const   )((void *)0));
#line 65
  return (tmp);
}
}
#line 68 "../_gdsl_bstree.c"
extern void _gdsl_bstree_free(_gdsl_bstree_t t , void (* const  free_f)(gdsl_element_t E ) ) 
{ 


  {
#line 71
  _gdsl_bintree_free(t, free_f);
#line 72
  return;
}
}
#line 74 "../_gdsl_bstree.c"
extern _gdsl_bstree_t _gdsl_bstree_copy(_gdsl_bstree_t const   t , gdsl_element_t (* const  copy_f)(gdsl_element_t const   E ) ) 
{ 
  _gdsl_bintree_t tmp ;

  {
#line 79
  tmp = _gdsl_bintree_copy((_gdsl_bintree_t const   )((_gdsl_bintree_t )t), copy_f);
#line 79
  return (tmp);
}
}
#line 86 "../_gdsl_bstree.c"
extern bool _gdsl_bstree_is_empty(_gdsl_bstree_t const   t ) 
{ 
  bool tmp ;

  {
#line 89
  tmp = _gdsl_bintree_is_empty((_gdsl_bintree_t const   )((_gdsl_bintree_t )t));
#line 89
  return (tmp);
}
}
#line 92 "../_gdsl_bstree.c"
extern bool _gdsl_bstree_is_leaf(_gdsl_bstree_t const   t ) 
{ 
  bool tmp ;

  {
#line 97
  tmp = _gdsl_bintree_is_leaf((_gdsl_bintree_t const   )((_gdsl_bintree_t )t));
#line 97
  return (tmp);
}
}
#line 100 "../_gdsl_bstree.c"
extern gdsl_element_t _gdsl_bstree_get_content(_gdsl_bstree_t const   t ) 
{ 
  gdsl_element_t tmp ;

  {
#line 105
  tmp = _gdsl_bintree_get_content((_gdsl_bintree_t const   )((_gdsl_bintree_t )t));
#line 105
  return (tmp);
}
}
#line 108 "../_gdsl_bstree.c"
extern bool _gdsl_bstree_is_root(_gdsl_bstree_t const   t ) 
{ 
  bool tmp ;

  {
#line 113
  tmp = _gdsl_bintree_is_root((_gdsl_bintree_t const   )((_gdsl_bintree_t )t));
#line 113
  return (tmp);
}
}
#line 116 "../_gdsl_bstree.c"
extern _gdsl_bstree_t _gdsl_bstree_get_parent(_gdsl_bstree_t const   t ) 
{ 
  _gdsl_bintree_t tmp ;

  {
#line 121
  tmp = _gdsl_bintree_get_parent((_gdsl_bintree_t const   )((_gdsl_bintree_t )t));
#line 121
  return (tmp);
}
}
#line 124 "../_gdsl_bstree.c"
extern _gdsl_bstree_t _gdsl_bstree_get_left(_gdsl_bstree_t const   t ) 
{ 
  _gdsl_bintree_t tmp ;

  {
#line 129
  tmp = _gdsl_bintree_get_left((_gdsl_bintree_t const   )((_gdsl_bintree_t )t));
#line 129
  return (tmp);
}
}
#line 132 "../_gdsl_bstree.c"
extern _gdsl_bstree_t _gdsl_bstree_get_right(_gdsl_bstree_t const   t ) 
{ 
  _gdsl_bintree_t tmp ;

  {
#line 137
  tmp = _gdsl_bintree_get_right((_gdsl_bintree_t const   )((_gdsl_bintree_t )t));
#line 137
  return (tmp);
}
}
#line 140 "../_gdsl_bstree.c"
extern ulong___0 _gdsl_bstree_get_size(_gdsl_bstree_t const   t ) 
{ 
  ulong___0 tmp ;

  {
#line 143
  tmp = _gdsl_bintree_get_size((_gdsl_bintree_t const   )((_gdsl_bintree_t )t));
#line 143
  return (tmp);
}
}
#line 146 "../_gdsl_bstree.c"
extern ulong___0 _gdsl_bstree_get_height(_gdsl_bstree_t const   t ) 
{ 
  ulong___0 tmp ;

  {
#line 149
  tmp = _gdsl_bintree_get_height((_gdsl_bintree_t const   )((_gdsl_bintree_t )t));
#line 149
  return (tmp);
}
}
#line 156 "../_gdsl_bstree.c"
extern _gdsl_bstree_t _gdsl_bstree_insert(_gdsl_bstree_t *t , long (* const  comp_f)(gdsl_element_t const   E ,
                                                                                     void *VALUE ) ,
                                          gdsl_element_t const   v , int *rc ) 
{ 
  int comp ;
  _gdsl_bintree_t parent ;
  _gdsl_bintree_t root ;
  _gdsl_bstree_t n ;
  gdsl_element_t tmp ;
  long tmp___0 ;
  _gdsl_bintree_t tmp___1 ;
  _gdsl_bintree_t tmp___2 ;
  bool tmp___3 ;
  _gdsl_bintree_t tmp___4 ;

  {
#line 160
  comp = 0;
#line 161
  parent = (_gdsl_bintree_t )((void *)0);
#line 162
  root = *t;
#line 163
  n = (_gdsl_bstree_t )((void *)0);
#line 168
  *rc = 2;
#line 170
  while (1) {
#line 170
    tmp___3 = _gdsl_bintree_is_empty((_gdsl_bintree_t const   )root);
#line 170
    if (tmp___3) {
#line 170
      break;
    }
#line 172
    tmp = _gdsl_bintree_get_content((_gdsl_bintree_t const   )root);
#line 172
    tmp___0 = (*comp_f)((gdsl_element_t const   )tmp, (void *)v);
#line 172
    comp = (int )tmp___0;
#line 175
    if (comp == 0) {
#line 177
      *rc = 3;
#line 178
      return (root);
    }
#line 181
    parent = root;
#line 182
    if (comp > 0) {
#line 182
      tmp___1 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )root);
#line 182
      root = tmp___1;
    } else {
#line 182
      tmp___2 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )root);
#line 182
      root = tmp___2;
    }
  }
#line 185
  tmp___4 = _gdsl_bintree_alloc(v, (_gdsl_bintree_t const   )((void *)0), (_gdsl_bintree_t const   )((void *)0));
#line 185
  n = tmp___4;
#line 187
  if ((unsigned int )n == (unsigned int )((void *)0)) {
#line 189
    *rc = -1;
#line 190
    return ((_gdsl_bstree_t )((void *)0));
  }
#line 193
  _gdsl_bintree_set_parent(n, (_gdsl_bintree_t const   )parent);
#line 195
  if ((unsigned int )parent == (unsigned int )((void *)0)) {
#line 197
    *t = n;
#line 198
    return (n);
  }
#line 201
  if (comp > 0) {
#line 203
    _gdsl_bintree_set_left(parent, (_gdsl_bintree_t const   )n);
  } else {
#line 207
    _gdsl_bintree_set_right(parent, (_gdsl_bintree_t const   )n);
  }
#line 210
  return (n);
}
}
#line 213 "../_gdsl_bstree.c"
extern gdsl_element_t _gdsl_bstree_remove(_gdsl_bstree_t *t , long (* const  comp_f)(gdsl_element_t const   E ,
                                                                                     void *VALUE ) ,
                                          gdsl_element_t const   v ) 
{ 
  gdsl_element_t e ;
  _gdsl_bstree_t l ;
  _gdsl_bstree_t r ;
  bool tmp ;
  int comp ;
  long tmp___0 ;
  _gdsl_bintree_t *tmp___1 ;
  gdsl_element_t tmp___2 ;
  _gdsl_bintree_t *tmp___3 ;
  gdsl_element_t tmp___4 ;
  _gdsl_bintree_t tmp___5 ;
  _gdsl_bintree_t tmp___6 ;
  bool tmp___7 ;
  bool tmp___8 ;
  bool tmp___9 ;
  bool tmp___10 ;
  _gdsl_bintree_t *tmp___11 ;
  gdsl_element_t tmp___12 ;

  {
#line 223
  tmp = _gdsl_bintree_is_empty((_gdsl_bintree_t const   )*t);
#line 223
  if (tmp) {
#line 225
    return ((void *)0);
  }
#line 228
  e = _gdsl_bintree_get_content((_gdsl_bintree_t const   )*t);
#line 231
  tmp___0 = (*comp_f)(v, e);
#line 231
  comp = (int )tmp___0;
#line 233
  if (comp < 0) {
#line 235
    tmp___1 = _gdsl_bintree_get_left_ref((_gdsl_bintree_t const   )*t);
#line 235
    tmp___2 = _gdsl_bstree_remove(tmp___1, comp_f, v);
#line 235
    return (tmp___2);
  }
#line 238
  if (comp > 0) {
#line 240
    tmp___3 = _gdsl_bintree_get_right_ref((_gdsl_bintree_t const   )*t);
#line 240
    tmp___4 = _gdsl_bstree_remove(tmp___3, comp_f, v);
#line 240
    return (tmp___4);
  }
#line 245
  tmp___5 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )*t);
#line 245
  l = tmp___5;
#line 246
  tmp___6 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )*t);
#line 246
  r = tmp___6;
#line 248
  tmp___8 = _gdsl_bintree_is_empty((_gdsl_bintree_t const   )l);
#line 248
  if (tmp___8) {
#line 250
    e = _gdsl_bintree_get_content((_gdsl_bintree_t const   )*t);
#line 251
    free((void *)*t);
#line 253
    tmp___7 = _gdsl_bintree_is_empty((_gdsl_bintree_t const   )r);
#line 253
    if (! tmp___7) {
#line 255
      _gdsl_bintree_set_parent(r, (_gdsl_bintree_t const   )r);
    }
#line 258
    *t = r;
#line 259
    return (e);
  }
#line 262
  tmp___10 = _gdsl_bintree_is_empty((_gdsl_bintree_t const   )r);
#line 262
  if (tmp___10) {
#line 264
    e = _gdsl_bintree_get_content((_gdsl_bintree_t const   )*t);
#line 265
    free((void *)*t);
#line 267
    tmp___9 = _gdsl_bintree_is_empty((_gdsl_bintree_t const   )l);
#line 267
    if (! tmp___9) {
#line 269
      _gdsl_bintree_set_parent(l, (_gdsl_bintree_t const   )l);
    }
#line 272
    *t = l;
#line 273
    return (e);
  }
#line 286
  tmp___11 = _gdsl_bintree_get_left_ref((_gdsl_bintree_t const   )*t);
#line 286
  tmp___12 = destroy_max(tmp___11);
#line 286
  _gdsl_bintree_set_content(*t, (gdsl_element_t const   )tmp___12);
#line 289
  return (e);
}
}
#line 296 "../_gdsl_bstree.c"
extern _gdsl_bstree_t _gdsl_bstree_search(_gdsl_bstree_t const   t , long (* const  comp_f)(gdsl_element_t const   E ,
                                                                                            void *VALUE ) ,
                                          gdsl_element_t const   v ) 
{ 
  _gdsl_bstree_t tmp ;
  int comp ;
  gdsl_element_t tmp___0 ;
  long tmp___1 ;
  _gdsl_bintree_t tmp___2 ;
  _gdsl_bintree_t tmp___3 ;
  bool tmp___4 ;

  {
#line 300
  tmp = (_gdsl_bstree_t )t;
#line 304
  while (1) {
#line 304
    tmp___4 = _gdsl_bintree_is_empty((_gdsl_bintree_t const   )tmp);
#line 304
    if (tmp___4) {
#line 304
      break;
    }
#line 306
    tmp___0 = _gdsl_bintree_get_content((_gdsl_bintree_t const   )tmp);
#line 306
    tmp___1 = (*comp_f)((gdsl_element_t const   )tmp___0, (void *)v);
#line 306
    comp = (int )tmp___1;
#line 308
    if (comp == 0) {
#line 310
      return (tmp);
    }
#line 313
    if (comp > 0) {
#line 315
      tmp___2 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )tmp);
#line 315
      tmp = tmp___2;
    } else {
#line 319
      tmp___3 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )tmp);
#line 319
      tmp = tmp___3;
    }
  }
#line 323
  return ((_gdsl_bstree_t )((void *)0));
}
}
#line 326 "../_gdsl_bstree.c"
extern _gdsl_bstree_t _gdsl_bstree_search_next(_gdsl_bstree_t const   t , long (* const  comp_f)(gdsl_element_t const   E ,
                                                                                                 void *VALUE ) ,
                                               gdsl_element_t const   v ) 
{ 
  _gdsl_bstree_t b ;
  _gdsl_bstree_t c ;
  bool tmp ;
  _gdsl_bintree_t tmp___0 ;
  _gdsl_bintree_t tmp___1 ;
  _gdsl_bintree_t tmp___2 ;
  bool tmp___3 ;
  bool tmp___4 ;
  _gdsl_bintree_t tmp___5 ;
  _gdsl_bintree_t tmp___6 ;
  _gdsl_bintree_t tmp___7 ;
  _gdsl_bintree_t tmp___8 ;

  {
#line 335
  b = _gdsl_bstree_search(t, comp_f, v);
#line 337
  tmp = _gdsl_bintree_is_empty((_gdsl_bintree_t const   )b);
#line 337
  if (tmp) {
#line 339
    return ((_gdsl_bstree_t )((void *)0));
  }
#line 342
  tmp___0 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )b);
#line 342
  c = tmp___0;
#line 344
  tmp___4 = _gdsl_bintree_is_empty((_gdsl_bintree_t const   )c);
#line 344
  if (! tmp___4) {
#line 346
    while (1) {
#line 346
      tmp___2 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )c);
#line 346
      tmp___3 = _gdsl_bintree_is_empty((_gdsl_bintree_t const   )tmp___2);
#line 346
      if (tmp___3) {
#line 346
        break;
      }
#line 348
      tmp___1 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )c);
#line 348
      c = tmp___1;
    }
#line 351
    return (c);
  }
#line 354
  tmp___5 = _gdsl_bintree_get_parent((_gdsl_bintree_t const   )b);
#line 354
  c = tmp___5;
#line 356
  while (1) {
#line 356
    if ((unsigned int )b != (unsigned int )t) {
#line 356
      tmp___7 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )c);
#line 356
      if (! ((unsigned int )tmp___7 == (unsigned int )b)) {
#line 356
        break;
      }
    } else {
#line 356
      break;
    }
#line 358
    b = c;
#line 359
    tmp___6 = _gdsl_bintree_get_parent((_gdsl_bintree_t const   )c);
#line 359
    c = tmp___6;
  }
#line 362
  tmp___8 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )c);
#line 362
  if ((unsigned int )tmp___8 == (unsigned int )b) {
#line 364
    return (c);
  }
#line 367
  return ((_gdsl_bstree_t )((void *)0));
}
}
#line 374 "../_gdsl_bstree.c"
extern _gdsl_bstree_t _gdsl_bstree_map_prefix(_gdsl_bstree_t const   t , int (* const  map_f)(_gdsl_bstree_t TREE ,
                                                                                              void *USER_DATA ) ,
                                              void *user_data ) 
{ 
  int tmp ;
  _gdsl_bintree_t tmp___0 ;
  _gdsl_bintree_t tmp___1 ;
  bool tmp___2 ;

  {
#line 380
  tmp___2 = _gdsl_bintree_is_empty((_gdsl_bintree_t const   )((_gdsl_bintree_t )t));
#line 380
  if (! tmp___2) {
#line 382
    tmp = (*map_f)((_gdsl_bstree_t )t, user_data);
#line 382
    if (tmp == 0) {
#line 384
      return ((_gdsl_bstree_t )t);
    }
#line 387
    tmp___0 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )((_gdsl_bintree_t )t));
#line 387
    _gdsl_bstree_map_prefix((_gdsl_bstree_t const   )tmp___0, map_f, user_data);
#line 388
    tmp___1 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )((_gdsl_bintree_t )t));
#line 388
    _gdsl_bstree_map_prefix((_gdsl_bstree_t const   )tmp___1, map_f, user_data);
  }
#line 391
  return ((_gdsl_bstree_t )((void *)0));
}
}
#line 394 "../_gdsl_bstree.c"
extern _gdsl_bstree_t _gdsl_bstree_map_infix(_gdsl_bstree_t const   t , int (* const  map_f)(_gdsl_bstree_t TREE ,
                                                                                             void *USER_DATA ) ,
                                             void *user_data ) 
{ 
  _gdsl_bintree_t tmp ;
  int tmp___0 ;
  _gdsl_bintree_t tmp___1 ;
  bool tmp___2 ;

  {
#line 400
  tmp___2 = _gdsl_bintree_is_empty((_gdsl_bintree_t const   )((_gdsl_bintree_t )t));
#line 400
  if (! tmp___2) {
#line 402
    tmp = _gdsl_bintree_get_left((_gdsl_bintree_t const   )((_gdsl_bintree_t )t));
#line 402
    _gdsl_bstree_map_infix((_gdsl_bstree_t const   )tmp, map_f, user_data);
#line 404
    tmp___0 = (*map_f)((_gdsl_bstree_t )t, user_data);
#line 404
    if (tmp___0 == 0) {
#line 406
      return ((_gdsl_bstree_t )t);
    }
#line 409
    tmp___1 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )((_gdsl_bintree_t )t));
#line 409
    _gdsl_bstree_map_infix((_gdsl_bstree_t const   )tmp___1, map_f, user_data);
  }
#line 412
  return ((_gdsl_bstree_t )((void *)0));
}
}
#line 415 "../_gdsl_bstree.c"
extern _gdsl_bstree_t _gdsl_bstree_map_postfix(_gdsl_bstree_t const   t , int (* const  map_f)(_gdsl_bstree_t TREE ,
                                                                                               void *USER_DATA ) ,
                                               void *user_data ) 
{ 
  _gdsl_bintree_t tmp ;
  _gdsl_bintree_t tmp___0 ;
  int tmp___1 ;
  bool tmp___2 ;

  {
#line 421
  tmp___2 = _gdsl_bintree_is_empty((_gdsl_bintree_t const   )((_gdsl_bintree_t )t));
#line 421
  if (! tmp___2) {
#line 423
    tmp = _gdsl_bintree_get_left((_gdsl_bintree_t const   )((_gdsl_bintree_t )t));
#line 423
    _gdsl_bstree_map_postfix((_gdsl_bstree_t const   )tmp, map_f, user_data);
#line 424
    tmp___0 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )((_gdsl_bintree_t )t));
#line 424
    _gdsl_bstree_map_postfix((_gdsl_bstree_t const   )tmp___0, map_f, user_data);
#line 426
    tmp___1 = (*map_f)((_gdsl_bstree_t )t, user_data);
#line 426
    if (tmp___1 == 0) {
#line 428
      return ((_gdsl_bstree_t )t);
    }
  }
#line 432
  return ((_gdsl_bstree_t )((void *)0));
}
}
#line 449 "../_gdsl_bstree.c"
extern void _gdsl_bstree_write(_gdsl_bstree_t const   t , void (* const  write_f)(_gdsl_bstree_t TREE ,
                                                                                  FILE *OUTPUT_FILE ,
                                                                                  void *USER_DATA ) ,
                               FILE *file , void *user_data ) 
{ 


  {
#line 457
  _gdsl_bintree_write((_gdsl_bintree_t const   )((_gdsl_bintree_t )t), (void (* const  )(_gdsl_bintree_t const   TREE ,
                                                                                         FILE *OUTPUT_FILE ,
                                                                                         void *USER_DATA ))write_f,
                      file, user_data);
#line 458
  return;
}
}
#line 460 "../_gdsl_bstree.c"
extern void _gdsl_bstree_write_xml(_gdsl_bstree_t const   t , void (* const  write_f)(_gdsl_bstree_t TREE ,
                                                                                      FILE *OUTPUT_FILE ,
                                                                                      void *USER_DATA ) ,
                                   FILE *file , void *user_data ) 
{ 


  {
#line 467
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<_GDSL_BSTREE>\n");
#line 468
  bstree_write(t, write_f, file, user_data, (bool )0);
#line 469
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</_GDSL_BSTREE>\n");
#line 470
  return;
}
}
#line 472 "../_gdsl_bstree.c"
extern void _gdsl_bstree_dump(_gdsl_bstree_t const   t , void (* const  write_f)(_gdsl_bstree_t TREE ,
                                                                                 FILE *OUTPUT_FILE ,
                                                                                 void *USER_DATA ) ,
                              FILE *file , void *user_data ) 
{ 


  {
#line 479
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<_GDSL_BSTREE REF=\"%p\">\n",
          (void *)t);
#line 480
  bstree_write(t, write_f, file, user_data, (bool )1);
#line 481
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</_GDSL_BSTREE>\n");
#line 482
  return;
}
}
#line 488 "../_gdsl_bstree.c"
static gdsl_element_t destroy_max(_gdsl_bstree_t *tree ) 
{ 
  gdsl_element_t max ;
  gdsl_element_t tmp ;
  _gdsl_bstree_t t ;
  _gdsl_bintree_t tmp___0 ;
  _gdsl_bintree_t tmp___1 ;
  bool tmp___2 ;
  _gdsl_bintree_t *tmp___3 ;
  gdsl_element_t tmp___4 ;

  {
#line 491
  tmp___1 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )*tree);
#line 491
  tmp___2 = _gdsl_bintree_is_empty((_gdsl_bintree_t const   )tmp___1);
#line 491
  if (tmp___2) {
#line 493
    tmp = _gdsl_bintree_get_content((_gdsl_bintree_t const   )*tree);
#line 493
    max = tmp;
#line 494
    tmp___0 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )*tree);
#line 494
    t = tmp___0;
#line 495
    free((void *)*tree);
#line 496
    *tree = t;
#line 497
    return (max);
  }
#line 500
  tmp___3 = _gdsl_bintree_get_right_ref((_gdsl_bintree_t const   )*tree);
#line 500
  tmp___4 = destroy_max(tmp___3);
#line 500
  return (tmp___4);
}
}
#line 518 "../_gdsl_bstree.c"
static void bstree_write(_gdsl_bstree_t const   t , void (* const  write_f)(_gdsl_bstree_t TREE ,
                                                                            FILE *OUTPUT_FILE ,
                                                                            void *USER_DATA ) ,
                         FILE *file , void *user_data , bool dump ) 
{ 
  _gdsl_bintree_t tmp ;
  bool tmp___0 ;
  gdsl_element_t tmp___1 ;
  gdsl_element_t tmp___2 ;
  _gdsl_bintree_t tmp___3 ;
  _gdsl_bintree_t tmp___4 ;
  _gdsl_bintree_t tmp___5 ;
  _gdsl_bintree_t tmp___6 ;
  bool tmp___7 ;
  _gdsl_bintree_t tmp___8 ;
  bool tmp___9 ;
  _gdsl_bintree_t tmp___10 ;
  bool tmp___11 ;

  {
#line 523
  tmp___11 = _gdsl_bintree_is_empty((_gdsl_bintree_t const   )((_gdsl_bintree_t )t));
#line 523
  if (! tmp___11) {
#line 525
    tmp = _gdsl_bintree_get_left((_gdsl_bintree_t const   )((_gdsl_bintree_t )t));
#line 525
    bstree_write((_gdsl_bstree_t const   )tmp, write_f, file, user_data, dump);
#line 527
    tmp___0 = _gdsl_bintree_is_leaf((_gdsl_bintree_t const   )((_gdsl_bintree_t )t));
#line 527
    if ((unsigned int )tmp___0 == 1U) {
#line 529
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<_GDSL_BSTREE_LEAF REF=\"%p\"",
              (void *)t);
    } else {
#line 533
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<_GDSL_BSTREE_NODE REF=\"%p\"",
              (void *)t);
    }
#line 536
    if ((unsigned int )dump == 1U) {
#line 538
      tmp___2 = _gdsl_bintree_get_content((_gdsl_bintree_t const   )((_gdsl_bintree_t )t));
#line 538
      if ((unsigned int )tmp___2 != (unsigned int )((void *)0)) {
#line 540
        tmp___1 = _gdsl_bintree_get_content((_gdsl_bintree_t const   )((_gdsl_bintree_t )t));
#line 540
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )" CONTENT=\"%p\"",
                tmp___1);
      } else {
#line 544
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )" CONTENT=\"\"");
      }
    }
#line 548
    tmp___7 = _gdsl_bintree_is_leaf((_gdsl_bintree_t const   )((_gdsl_bintree_t )t));
#line 548
    if ((unsigned int )tmp___7 == 0U) {
#line 550
      tmp___4 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )((_gdsl_bintree_t )t));
#line 550
      if ((unsigned int )tmp___4 != (unsigned int )((void *)0)) {
#line 552
        tmp___3 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )((_gdsl_bintree_t )t));
#line 552
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )" LEFT=\"%p\"",
                (void *)tmp___3);
      } else {
#line 556
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )" LEFT=\"\"");
      }
#line 559
      tmp___6 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )((_gdsl_bintree_t )t));
#line 559
      if ((unsigned int )tmp___6 != (unsigned int )((void *)0)) {
#line 561
        tmp___5 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )((_gdsl_bintree_t )t));
#line 561
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )" RIGHT=\"%p\"",
                (void *)tmp___5);
      } else {
#line 565
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )" RIGHT=\"\"");
      }
    }
#line 569
    tmp___8 = _gdsl_bintree_get_parent((_gdsl_bintree_t const   )((_gdsl_bintree_t )t));
#line 569
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )" PARENT=\"%p\">",
            (void *)tmp___8);
#line 571
    if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 573
      (*write_f)((_gdsl_bstree_t )t, file, user_data);
    }
#line 576
    tmp___9 = _gdsl_bintree_is_leaf((_gdsl_bintree_t const   )((_gdsl_bintree_t )t));
#line 576
    if ((unsigned int )tmp___9 == 1U) {
#line 578
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</_GDSL_BSTREE_LEAF>\n");
    } else {
#line 582
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</_GDSL_BSTREE_NODE>\n");
    }
#line 585
    tmp___10 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )((_gdsl_bintree_t )t));
#line 585
    bstree_write((_gdsl_bstree_t const   )tmp___10, write_f, file, user_data, dump);
  }
#line 587
  return;
}
}
#line 1 "cil-x3FD_tuZ.o"
#pragma merger("0","/tmp/cil-FCwq4GZT.i","")
#line 473 "/usr/include/stdlib.h"
extern  __attribute__((__nothrow__)) void *calloc(size_t __nmemb , size_t __size )  __attribute__((__malloc__)) ;
#line 83 "../gdsl_2darray.h"
extern gdsl_2darray_t gdsl_2darray_alloc(char const   *name , ulong___0 const   l ,
                                         ulong___0 const   c , gdsl_element_t (* const  alloc_f)(void *USER_DATA ) ,
                                         void (* const  free_f)(gdsl_element_t E ) ) ;
#line 106
extern void gdsl_2darray_free(gdsl_2darray_t m ) ;
#line 123
extern char const   *gdsl_2darray_get_name(gdsl_2darray_t const   m ) ;
#line 136
extern ulong___0 gdsl_2darray_get_rows_number(gdsl_2darray_t const   a ) ;
#line 149
extern ulong___0 gdsl_2darray_get_columns_number(gdsl_2darray_t const   a ) ;
#line 162
extern ulong___0 gdsl_2darray_get_size(gdsl_2darray_t const   a ) ;
#line 178
extern gdsl_element_t gdsl_2darray_get_content(gdsl_2darray_t const   a , ulong___0 const   l ,
                                               ulong___0 const   c ) ;
#line 201
extern gdsl_2darray_t gdsl_2darray_set_name(gdsl_2darray_t m , char const   *name ) ;
#line 227
extern gdsl_element_t gdsl_2darray_set_content(gdsl_2darray_t a , ulong___0 const   l ,
                                               ulong___0 const   c , void *value ) ;
#line 254
extern void gdsl_2darray_write(gdsl_2darray_t const   a , void (* const  write_f)(gdsl_element_t const   E ,
                                                                                  FILE *OUTPUT_FILE ,
                                                                                  gdsl_location_t LOCATION ,
                                                                                  void *USER_DATA ) ,
                               FILE *file , void *user_data ) ;
#line 278
extern void gdsl_2darray_write_xml(gdsl_2darray_t const   a , void (* const  write_f)(gdsl_element_t const   E ,
                                                                                      FILE *OUTPUT_FILE ,
                                                                                      gdsl_location_t LOCATION ,
                                                                                      void *USER_DATA ) ,
                                   FILE *file , void *user_data ) ;
#line 302
extern void gdsl_2darray_dump(gdsl_2darray_t const   a , void (* const  write_f)(gdsl_element_t const   E ,
                                                                                 FILE *OUTPUT_FILE ,
                                                                                 gdsl_location_t LOCATION ,
                                                                                 void *USER_DATA ) ,
                              FILE *file , void *user_data ) ;
#line 50 "../gdsl_2darray.c"
static gdsl_element_t default_alloc___1(void *e ) ;
#line 53
static void default_free___1(gdsl_element_t e ) ;
#line 60 "../gdsl_2darray.c"
extern gdsl_2darray_t gdsl_2darray_alloc(char const   *name , ulong___0 const   l ,
                                         ulong___0 const   c , gdsl_element_t (* const  alloc_f)(void *USER_DATA ) ,
                                         void (* const  free_f)(gdsl_element_t E ) ) 
{ 
  register ulong___0 i ;
  gdsl_2darray_t m ;
  void *tmp ;
  gdsl_2darray_t tmp___0 ;
  void *tmp___1 ;
  void *tmp___2 ;

  {
#line 68
  tmp = malloc(sizeof(struct gdsl_2darray ));
#line 68
  m = (gdsl_2darray_t )tmp;
#line 70
  if ((unsigned int )m == (unsigned int )((void *)0)) {
#line 72
    return ((gdsl_2darray_t )((void *)0));
  }
#line 75
  m->name = (char *)((void *)0);
#line 77
  tmp___0 = gdsl_2darray_set_name(m, name);
#line 77
  if ((unsigned int )tmp___0 == (unsigned int )((void *)0)) {
#line 79
    free((void *)m);
#line 80
    return ((gdsl_2darray_t )((void *)0));
  }
#line 83
  m->rows = (ulong___0 )l;
#line 84
  m->cols = (ulong___0 )c;
#line 86
  tmp___1 = calloc((size_t )l, sizeof(gdsl_element_t *));
#line 86
  m->elements = (gdsl_element_t **)tmp___1;
#line 88
  if ((unsigned int )m->elements == (unsigned int )((void *)0)) {
#line 90
    free((void *)m->name);
#line 91
    free((void *)m);
#line 92
    return ((gdsl_2darray_t )((void *)0));
  }
#line 95
  tmp___2 = calloc((size_t )(l * c), sizeof(gdsl_element_t ));
#line 95
  *(m->elements + 0) = (gdsl_element_t *)tmp___2;
#line 97
  if ((unsigned int )*(m->elements + 0) == (unsigned int )((void *)0)) {
#line 99
    free((void *)m->name);
#line 100
    free((void *)m->elements);
#line 101
    free((void *)m);
#line 102
    return ((gdsl_2darray_t )((void *)0));
  }
#line 105
  i = (ulong___0 )1;
#line 105
  while (i < (ulong___0 )l) {
#line 107
    *(m->elements + i) = *(m->elements + (i - 1UL)) + c;
#line 105
    i ++;
  }
#line 110
  if (alloc_f) {
#line 110
    m->alloc_f = (gdsl_element_t (*)(void *USER_DATA ))alloc_f;
  } else {
#line 110
    m->alloc_f = & default_alloc___1;
  }
#line 111
  if (free_f) {
#line 111
    m->free_f = (void (*)(gdsl_element_t E ))free_f;
  } else {
#line 111
    m->free_f = & default_free___1;
  }
#line 113
  return (m);
}
}
#line 116 "../gdsl_2darray.c"
extern void gdsl_2darray_free(gdsl_2darray_t m ) 
{ 
  register ulong___0 i ;

  {
#line 123
  i = (ulong___0 )0;
#line 123
  while (i < m->rows * m->cols) {
#line 125
    (*(m->free_f))(*(*(m->elements + 0) + i));
#line 123
    i ++;
  }
#line 128
  free((void *)*(m->elements + 0));
#line 129
  free((void *)m->elements);
#line 130
  free((void *)m->name);
#line 131
  free((void *)m);
#line 132
  return;
}
}
#line 138 "../gdsl_2darray.c"
extern char const   *gdsl_2darray_get_name(gdsl_2darray_t const   m ) 
{ 


  {
#line 143
  return ((char const   *)m->name);
}
}
#line 146 "../gdsl_2darray.c"
extern ulong___0 gdsl_2darray_get_rows_number(gdsl_2darray_t const   a ) 
{ 


  {
#line 151
  return (a->rows);
}
}
#line 154 "../gdsl_2darray.c"
extern ulong___0 gdsl_2darray_get_columns_number(gdsl_2darray_t const   a ) 
{ 


  {
#line 159
  return (a->cols);
}
}
#line 162 "../gdsl_2darray.c"
extern ulong___0 gdsl_2darray_get_size(gdsl_2darray_t const   a ) 
{ 


  {
#line 167
  return (a->rows * a->cols);
}
}
#line 170 "../gdsl_2darray.c"
extern gdsl_element_t gdsl_2darray_get_content(gdsl_2darray_t const   a , ulong___0 const   l ,
                                               ulong___0 const   c ) 
{ 


  {
#line 177
  return (*(*(a->elements + l) + c));
}
}
#line 184 "../gdsl_2darray.c"
extern gdsl_2darray_t gdsl_2darray_set_name(gdsl_2darray_t m , char const   *name ) 
{ 
  size_t tmp ;
  void *tmp___0 ;

  {
#line 189
  if ((unsigned int )m->name != (unsigned int )((void *)0)) {
#line 191
    free((void *)m->name);
#line 192
    m->name = (char *)((void *)0);
  }
#line 195
  if ((unsigned int )name != (unsigned int )((void *)0)) {
#line 197
    tmp = strlen(name);
#line 197
    tmp___0 = malloc((1U + tmp) * sizeof(char ));
#line 197
    m->name = (char *)tmp___0;
#line 199
    if ((unsigned int )m->name == (unsigned int )((void *)0)) {
#line 201
      return ((gdsl_2darray_t )((void *)0));
    }
#line 204
    strcpy((char * __restrict  )m->name, (char const   * __restrict  )name);
  }
#line 207
  return (m);
}
}
#line 210 "../gdsl_2darray.c"
extern gdsl_element_t gdsl_2darray_set_content(gdsl_2darray_t a , ulong___0 const   l ,
                                               ulong___0 const   c , void *value ) 
{ 


  {
#line 218
  *(*(a->elements + l) + c) = (*(a->alloc_f))(value);
#line 220
  return (*(*(a->elements + l) + c));
}
}
#line 227 "../gdsl_2darray.c"
extern void gdsl_2darray_write(gdsl_2darray_t const   a , void (* const  write_f)(gdsl_element_t const   E ,
                                                                                  FILE *OUTPUT_FILE ,
                                                                                  gdsl_location_t LOCATION ,
                                                                                  void *USER_DATA ) ,
                               FILE *file , void *user_data ) 
{ 
  ulong___0 i ;
  ulong___0 j ;
  gdsl_location_t pos ;

  {
#line 243
  pos = (gdsl_location_t )5;
#line 244
  (*write_f)((gdsl_element_t const   )*(*(a->elements + 0) + 0), file, pos, user_data);
#line 247
  pos = (gdsl_location_t )((unsigned int )pos & 4294967294U);
#line 248
  j = (ulong___0 )1;
#line 248
  while (j < a->cols - 1UL) {
#line 250
    (*write_f)((gdsl_element_t const   )*(*(a->elements + 0) + j), file, pos, user_data);
#line 248
    j ++;
  }
#line 254
  pos = (gdsl_location_t )((unsigned int )pos | 2U);
#line 255
  (*write_f)((gdsl_element_t const   )*(*(a->elements + 0) + j), file, pos, user_data);
#line 256
  pos = (gdsl_location_t )((unsigned int )pos & 4294967293U);
#line 259
  pos = (gdsl_location_t )((unsigned int )pos & 4294967291U);
#line 260
  i = (ulong___0 )1;
#line 260
  while (i < a->rows - 1UL) {
#line 263
    pos = (gdsl_location_t )((unsigned int )pos | 1U);
#line 264
    (*write_f)((gdsl_element_t const   )*(*(a->elements + i) + 0), file, pos, user_data);
#line 267
    pos = (gdsl_location_t )((unsigned int )pos & 4294967294U);
#line 268
    j = (ulong___0 )1;
#line 268
    while (j < a->cols - 1UL) {
#line 270
      (*write_f)((gdsl_element_t const   )*(*(a->elements + i) + j), file, pos, user_data);
#line 268
      j ++;
    }
#line 274
    pos = (gdsl_location_t )((unsigned int )pos | 2U);
#line 275
    (*write_f)((gdsl_element_t const   )*(*(a->elements + i) + j), file, pos, user_data);
#line 276
    pos = (gdsl_location_t )((unsigned int )pos & 4294967293U);
#line 260
    i ++;
  }
#line 282
  pos = (gdsl_location_t )9;
#line 283
  (*write_f)((gdsl_element_t const   )*(*(a->elements + i) + 0), file, pos, user_data);
#line 286
  pos = (gdsl_location_t )((unsigned int )pos & 4294967294U);
#line 287
  j = (ulong___0 )1;
#line 287
  while (j < a->cols - 1UL) {
#line 289
    (*write_f)((gdsl_element_t const   )*(*(a->elements + i) + j), file, pos, user_data);
#line 287
    j ++;
  }
#line 293
  pos = (gdsl_location_t )((unsigned int )pos | 2U);
#line 294
  (*write_f)((gdsl_element_t const   )*(*(a->elements + i) + j), file, pos, user_data);
#line 295
  return;
}
}
#line 297 "../gdsl_2darray.c"
extern void gdsl_2darray_write_xml(gdsl_2darray_t const   a , void (* const  write_f)(gdsl_element_t const   E ,
                                                                                      FILE *OUTPUT_FILE ,
                                                                                      gdsl_location_t LOCATION ,
                                                                                      void *USER_DATA ) ,
                                   FILE *file , void *user_data ) 
{ 
  ulong___0 i ;
  ulong___0 j ;
  gdsl_location_t pos ;

  {
#line 309
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_2DARRAY REF=\"%p\" NAME=",
          (void *)a);
#line 311
  if ((unsigned int )a->name == (unsigned int )((void *)0)) {
#line 313
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"\"\"");
  } else {
#line 317
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"\"%s\"", a->name);
  }
#line 320
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )" ROWS=\"%ld\" COLS=\"%ld\">\n",
          a->rows, a->cols);
#line 325
  pos = (gdsl_location_t )5;
#line 326
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_2DARRAY_ROW VALUE=\"0\">\n");
#line 327
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_2DARRAY_COL VALUE=\"0\">");
#line 328
  if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 330
    (*write_f)((gdsl_element_t const   )*(*(a->elements + 0) + 0), file, pos, user_data);
  }
#line 332
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_2DARRAY_COL>\n");
#line 335
  pos = (gdsl_location_t )((unsigned int )pos & 4294967294U);
#line 336
  j = (ulong___0 )1;
#line 336
  while (j < a->cols - 1UL) {
#line 338
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_2DARRAY_COL VALUE=\"%ld\">",
            j);
#line 339
    if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 341
      (*write_f)((gdsl_element_t const   )*(*(a->elements + 0) + j), file, pos, user_data);
    }
#line 343
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_2DARRAY_COL>\n");
#line 336
    j ++;
  }
#line 347
  pos = (gdsl_location_t )((unsigned int )pos | 2U);
#line 348
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_2DARRAY_COL VALUE=\"%ld\">",
          j);
#line 349
  if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 351
    (*write_f)((gdsl_element_t const   )*(*(a->elements + 0) + j), file, pos, user_data);
  }
#line 353
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_2DARRAY_COL>\n");
#line 354
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_2DARRAY_ROW>\n");
#line 355
  pos = (gdsl_location_t )((unsigned int )pos & 4294967293U);
#line 358
  pos = (gdsl_location_t )((unsigned int )pos & 4294967291U);
#line 359
  i = (ulong___0 )1;
#line 359
  while (i < a->rows - 1UL) {
#line 362
    pos = (gdsl_location_t )((unsigned int )pos | 1U);
#line 363
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_2DARRAY_ROW VALUE=\"%ld\">\n",
            i);
#line 364
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_2DARRAY_COL VALUE=\"0\">");
#line 365
    if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 367
      (*write_f)((gdsl_element_t const   )*(*(a->elements + i) + 0), file, pos, user_data);
    }
#line 369
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_2DARRAY_COL>\n");
#line 372
    pos = (gdsl_location_t )((unsigned int )pos & 4294967294U);
#line 373
    j = (ulong___0 )1;
#line 373
    while (j < a->cols - 1UL) {
#line 375
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_2DARRAY_COL VALUE=\"%ld\">",
              j);
#line 376
      if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 378
        (*write_f)((gdsl_element_t const   )*(*(a->elements + i) + j), file, pos,
                   user_data);
      }
#line 380
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_2DARRAY_COL>\n");
#line 373
      j ++;
    }
#line 384
    pos = (gdsl_location_t )((unsigned int )pos | 2U);
#line 385
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_2DARRAY_COL VALUE=\"%ld\">",
            j);
#line 386
    if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 388
      (*write_f)((gdsl_element_t const   )*(*(a->elements + i) + j), file, pos, user_data);
    }
#line 390
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_2DARRAY_COL>\n");
#line 391
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_2DARRAY_ROW>\n");
#line 392
    pos = (gdsl_location_t )((unsigned int )pos & 4294967293U);
#line 359
    i ++;
  }
#line 398
  pos = (gdsl_location_t )9;
#line 399
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_2DARRAY_ROW VALUE=\"%ld\">\n",
          i);
#line 400
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_2DARRAY_COL VALUE=\"0\">");
#line 401
  if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 403
    (*write_f)((gdsl_element_t const   )*(*(a->elements + i) + 0), file, pos, user_data);
  }
#line 405
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_2DARRAY_COL>\n");
#line 408
  pos = (gdsl_location_t )((unsigned int )pos & 4294967294U);
#line 409
  j = (ulong___0 )1;
#line 409
  while (j < a->cols - 1UL) {
#line 411
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_2DARRAY_COL VALUE=\"%ld\">",
            j);
#line 412
    if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 414
      (*write_f)((gdsl_element_t const   )*(*(a->elements + i) + j), file, pos, user_data);
    }
#line 416
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_2DARRAY_COL>\n");
#line 409
    j ++;
  }
#line 421
  pos = (gdsl_location_t )((unsigned int )pos | 2U);
#line 422
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_2DARRAY_COL VALUE=\"%ld\">",
          j);
#line 423
  if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 425
    (*write_f)((gdsl_element_t const   )*(*(a->elements + i) + j), file, pos, user_data);
  }
#line 427
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_2DARRAY_COL>\n");
#line 428
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_2DARRAY_ROW>\n");
#line 430
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_2DARRAY>\n");
#line 431
  return;
}
}
#line 433 "../gdsl_2darray.c"
extern void gdsl_2darray_dump(gdsl_2darray_t const   a , void (* const  write_f)(gdsl_element_t const   E ,
                                                                                 FILE *OUTPUT_FILE ,
                                                                                 gdsl_location_t LOCATION ,
                                                                                 void *USER_DATA ) ,
                              FILE *file , void *user_data ) 
{ 
  ulong___0 i ;
  ulong___0 j ;
  gdsl_location_t pos ;

  {
#line 444
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_2DARRAY REF=\"%p\" NAME=",
          (void *)a);
#line 446
  if ((unsigned int )a->name == (unsigned int )((void *)0)) {
#line 448
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"\"\"");
  } else {
#line 452
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"\"%s\"", a->name);
  }
#line 455
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )" ROWS=\"%ld\" COLS=\"%ld\">\n",
          a->rows, a->cols);
#line 460
  pos = (gdsl_location_t )5;
#line 461
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_2DARRAY_ROW VALUE=\"0\">\n");
#line 462
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_2DARRAY_COL VALUE=\"0\" CONTENT=\"%p\">",
          *(*(a->elements + 0) + 0));
#line 463
  if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 465
    (*write_f)((gdsl_element_t const   )*(*(a->elements + 0) + 0), file, pos, user_data);
  }
#line 467
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_2DARRAY_COL>\n");
#line 470
  pos = (gdsl_location_t )((unsigned int )pos & 4294967294U);
#line 471
  j = (ulong___0 )1;
#line 471
  while (j < a->cols - 1UL) {
#line 473
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_2DARRAY_COL VALUE=\"%ld\" CONTENT=\"%p\">",
            j, *(*(a->elements + 0) + j));
#line 474
    if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 476
      (*write_f)((gdsl_element_t const   )*(*(a->elements + 0) + j), file, pos, user_data);
    }
#line 478
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_2DARRAY_COL>\n");
#line 471
    j ++;
  }
#line 482
  pos = (gdsl_location_t )((unsigned int )pos | 2U);
#line 483
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_2DARRAY_COL VALUE=\"%ld\" CONTENT=\"%p\">",
          j, *(*(a->elements + 0) + j));
#line 484
  if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 486
    (*write_f)((gdsl_element_t const   )*(*(a->elements + 0) + j), file, pos, user_data);
  }
#line 488
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_2DARRAY_COL>\n");
#line 489
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_2DARRAY_ROW>\n");
#line 490
  pos = (gdsl_location_t )((unsigned int )pos & 4294967293U);
#line 493
  pos = (gdsl_location_t )((unsigned int )pos & 4294967291U);
#line 494
  i = (ulong___0 )1;
#line 494
  while (i < a->rows - 1UL) {
#line 497
    pos = (gdsl_location_t )((unsigned int )pos | 1U);
#line 498
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_2DARRAY_ROW VALUE=\"%ld\">\n",
            i);
#line 499
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_2DARRAY_COL VALUE=\"0\" CONTENT=\"%p\">",
            *(*(a->elements + i) + 0));
#line 500
    if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 502
      (*write_f)((gdsl_element_t const   )*(*(a->elements + i) + 0), file, pos, user_data);
    }
#line 504
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_2DARRAY_COL>\n");
#line 507
    pos = (gdsl_location_t )((unsigned int )pos & 4294967294U);
#line 508
    j = (ulong___0 )1;
#line 508
    while (j < a->cols - 1UL) {
#line 510
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_2DARRAY_COL VALUE=\"%ld\" CONTENT=\"%p\">",
              j, *(*(a->elements + i) + j));
#line 511
      if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 513
        (*write_f)((gdsl_element_t const   )*(*(a->elements + i) + j), file, pos,
                   user_data);
      }
#line 515
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_2DARRAY_COL>\n");
#line 508
      j ++;
    }
#line 519
    pos = (gdsl_location_t )((unsigned int )pos | 2U);
#line 520
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_2DARRAY_COL VALUE=\"%ld\" CONTENT=\"%p\">",
            j, *(*(a->elements + i) + j));
#line 521
    if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 523
      (*write_f)((gdsl_element_t const   )*(*(a->elements + i) + j), file, pos, user_data);
    }
#line 525
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_2DARRAY_COL>\n");
#line 526
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_2DARRAY_ROW>\n");
#line 527
    pos = (gdsl_location_t )((unsigned int )pos & 4294967293U);
#line 494
    i ++;
  }
#line 533
  pos = (gdsl_location_t )9;
#line 534
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_2DARRAY_ROW VALUE=\"%ld\">\n",
          i);
#line 535
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_2DARRAY_COL VALUE=\"0\" CONTENT=\"%p\">",
          *(*(a->elements + i) + 0));
#line 536
  if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 538
    (*write_f)((gdsl_element_t const   )*(*(a->elements + i) + 0), file, pos, user_data);
  }
#line 540
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_2DARRAY_COL>\n");
#line 543
  pos = (gdsl_location_t )((unsigned int )pos & 4294967294U);
#line 544
  j = (ulong___0 )1;
#line 544
  while (j < a->cols - 1UL) {
#line 546
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_2DARRAY_COL VALUE=\"%ld\" CONTENT=\"%p\">",
            j, *(*(a->elements + i) + j));
#line 547
    if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 549
      (*write_f)((gdsl_element_t const   )*(*(a->elements + i) + j), file, pos, user_data);
    }
#line 551
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_2DARRAY_COL>\n");
#line 544
    j ++;
  }
#line 556
  pos = (gdsl_location_t )((unsigned int )pos | 2U);
#line 557
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_2DARRAY_COL VALUE=\"%ld\" CONTENT=\"%p\">",
          j, *(*(a->elements + i) + j));
#line 558
  if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 560
    (*write_f)((gdsl_element_t const   )*(*(a->elements + i) + j), file, pos, user_data);
  }
#line 562
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_2DARRAY_COL>\n");
#line 563
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_2DARRAY_ROW>\n");
#line 565
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_2DARRAY>\n");
#line 566
  return;
}
}
#line 572 "../gdsl_2darray.c"
static gdsl_element_t default_alloc___1(void *e ) 
{ 


  {
#line 575
  return (e);
}
}
#line 578 "../gdsl_2darray.c"
static void default_free___1(gdsl_element_t e ) 
{ 


  {
#line 582
  return;
}
}
#line 1 "cil-4v06moU2.o"
#pragma merger("0","/tmp/cil-urIZ3Si4.i","")
#line 339 "/usr/include/stdio.h"
extern int printf(char const   * __restrict  __format  , ...) ;
#line 543 "/usr/include/stdlib.h"
extern  __attribute__((__nothrow__, __noreturn__)) void exit(int __status ) ;
#line 81 "../gdsl_interval_heap.h"
extern gdsl_interval_heap_t gdsl_interval_heap_alloc(char const   *name , gdsl_element_t (*alloc_f)(void *USER_DATA ) ,
                                                     void (*free_f)(gdsl_element_t E ) ,
                                                     long (*comp_f)(gdsl_element_t const   E ,
                                                                    void *VALUE ) ) ;
#line 101
extern void gdsl_interval_heap_free(gdsl_interval_heap_t heap ) ;
#line 118
extern void gdsl_interval_heap_flush(gdsl_interval_heap_t heap ) ;
#line 135
extern char const   *gdsl_interval_heap_get_name(gdsl_interval_heap_t const   heap ) ;
#line 146
extern ulong___0 gdsl_interval_heap_get_size(gdsl_interval_heap_t const   heap ) ;
#line 158
extern void gdsl_interval_heap_set_max_size(gdsl_interval_heap_t const   H , ulong___0 size ) ;
#line 171
extern bool gdsl_interval_heap_is_empty(gdsl_interval_heap_t const   heap ) ;
#line 192
extern gdsl_interval_heap_t gdsl_interval_heap_set_name(gdsl_interval_heap_t heap ,
                                                        char const   *name ) ;
#line 216
extern gdsl_element_t gdsl_interval_heap_insert(gdsl_interval_heap_t heap , void *value ) ;
#line 235
extern gdsl_element_t gdsl_interval_heap_remove_max(gdsl_interval_heap_t heap ) ;
#line 253
extern gdsl_element_t gdsl_interval_heap_remove_min(gdsl_interval_heap_t heap ) ;
#line 264
extern gdsl_element_t gdsl_interval_heap_get_min(gdsl_interval_heap_t const   heap ) ;
#line 275
extern gdsl_element_t gdsl_interval_heap_get_max(gdsl_interval_heap_t const   heap ) ;
#line 294
extern gdsl_interval_heap_t gdsl_interval_heap_delete_min(gdsl_interval_heap_t heap ) ;
#line 313
extern gdsl_interval_heap_t gdsl_interval_heap_delete_max(gdsl_interval_heap_t heap ) ;
#line 335
extern gdsl_element_t gdsl_interval_heap_map_forward(gdsl_interval_heap_t const   heap ,
                                                     int (*map_f)(gdsl_element_t const   E ,
                                                                  gdsl_location_t LOCATION ,
                                                                  void *USER_DATA ) ,
                                                     void *user_data ) ;
#line 360
extern void gdsl_interval_heap_write(gdsl_interval_heap_t const   heap , void (*write_f)(gdsl_element_t const   E ,
                                                                                         FILE *OUTPUT_FILE ,
                                                                                         gdsl_location_t LOCATION ,
                                                                                         void *USER_DATA ) ,
                                     FILE *file , void *user_data ) ;
#line 383
extern void gdsl_interval_heap_write_xml(gdsl_interval_heap_t const   heap , void (*write_f)(gdsl_element_t const   E ,
                                                                                             FILE *OUTPUT_FILE ,
                                                                                             gdsl_location_t LOCATION ,
                                                                                             void *USER_DATA ) ,
                                         FILE *file , void *user_data ) ;
#line 406
extern void gdsl_interval_heap_dump(gdsl_interval_heap_t const   heap , void (*write_f)(gdsl_element_t const   E ,
                                                                                        FILE *OUTPUT_FILE ,
                                                                                        gdsl_location_t LOCATION ,
                                                                                        void *USER_DATA ) ,
                                    FILE *file , void *user_data ) ;
#line 71 "../gdsl_interval_heap.c"
static gdsl_element_t default_alloc___2(void *e ) ;
#line 74
static void default_free___2(gdsl_element_t e ) ;
#line 77
static long default_comp___0(gdsl_element_t e , void *key ) ;
#line 80
static gdsl_location_t get_location___1(gdsl_interval_heap_t heap , int i ) ;
#line 83
static void fix(gdsl_element_t *t , ulong___0 k , long (*comp_f)(gdsl_element_t const   E ,
                                                                 void *VALUE ) ) ;
#line 89
static void taslacmite_max(gdsl_element_t *t , ulong___0 k , long (*comp_f)(gdsl_element_t const   E ,
                                                                            void *VALUE ) ) ;
#line 92
static void taslacmite_min(gdsl_element_t *t , ulong___0 k , long (*comp_f)(gdsl_element_t const   E ,
                                                                            void *VALUE ) ) ;
#line 95
static ulong___0 taslactite_max(gdsl_element_t *t , ulong___0 n , ulong___0 k , long (*comp_f)(gdsl_element_t const   E ,
                                                                                               void *VALUE ) ) ;
#line 98
static ulong___0 taslactite_min(gdsl_element_t *t , ulong___0 n , ulong___0 k , long (*comp_f)(gdsl_element_t const   E ,
                                                                                               void *VALUE ) ) ;
#line 101 "../gdsl_interval_heap.c"
extern int vti(gdsl_element_t *e ) 
{ 


  {
#line 102
  return (*((int *)((void *)e + 28)));
}
}
#line 105 "../gdsl_interval_heap.c"
extern void gdsl_raw_heap_dump(gdsl_interval_heap_t const   heap ) 
{ 
  ulong___0 i ;
  ulong___0 length ;
  ulong___0 current ;
  ulong___0 curr1 ;
  int tmp ;

  {
#line 109
  length = (ulong___0 )2;
#line 110
  current = (ulong___0 )1;
#line 113
  while (current <= heap->card) {
#line 114
    curr1 = current;
#line 115
    i = (ulong___0 )0;
#line 115
    while (1) {
#line 115
      if (i < length) {
#line 115
        if (! (curr1 <= heap->card)) {
#line 115
          break;
        }
      } else {
#line 115
        break;
      }
#line 117
      fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%4d ", curr1 + 1UL);
#line 118
      if (curr1 % 2UL == 0UL) {
#line 119
        fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"| ");
      }
#line 120
      curr1 ++;
#line 115
      i ++;
    }
#line 122
    curr1 = current;
#line 123
    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\n");
#line 124
    i = (ulong___0 )0;
#line 124
    while (1) {
#line 124
      if (i < length) {
#line 124
        if (! (curr1 <= heap->card)) {
#line 124
          break;
        }
      } else {
#line 124
        break;
      }
#line 126
      tmp = vti((gdsl_element_t *)*(heap->nodes + (curr1 + 1UL)));
#line 126
      fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"%4d ", tmp);
#line 127
      if (curr1 % 2UL == 0UL) {
#line 128
        printf((char const   * __restrict  )"| ");
      }
#line 129
      curr1 ++;
#line 124
      i ++;
    }
#line 132
    current = curr1;
#line 133
    length = 2UL * length;
#line 135
    fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"\n-------\n");
  }
#line 137
  return;
}
}
#line 139 "../gdsl_interval_heap.c"
extern void gdsl_check_interval_heap_integrity(gdsl_interval_heap_t const   heap ) 
{ 
  int i ;
  int j ;
  int comp ;
  long tmp ;
  int comp1 ;
  long tmp___0 ;
  int comp2 ;
  long tmp___1 ;
  int li ;
  int pi ;
  int tmp___2 ;
  int tmp___3 ;
  int li___0 ;
  int pi___0 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 144
  i = 1;
#line 144
  while ((ulong___0 )i <= heap->card) {
#line 145
    if (i % 2 == 0) {
#line 146
      tmp = (*(heap->comp_f))((gdsl_element_t const   )*(heap->nodes + ((i - 1) + 1)),
                              *(heap->nodes + (i + 1)));
#line 146
      comp = (int )tmp;
    }
#line 151
    if (i + 1 > 3) {
#line 152
      tmp___0 = (*(heap->comp_f))((gdsl_element_t const   )*(heap->nodes + (i + 1)),
                                  *(heap->nodes + ((i + 1) / 4) * 2));
#line 152
      comp1 = (int )tmp___0;
#line 153
      tmp___1 = (*(heap->comp_f))((gdsl_element_t const   )*(heap->nodes + (i + 1)),
                                  *(heap->nodes + (((i + 1) / 4) * 2 + 1)));
#line 153
      comp2 = (int )tmp___1;
#line 159
      if (comp1 < 0) {
#line 160
        li = i + 1;
#line 161
        pi = (li / 4) * 2;
#line 163
        tmp___2 = vti((gdsl_element_t *)*(heap->nodes + pi));
#line 163
        tmp___3 = vti((gdsl_element_t *)*(heap->nodes + li));
#line 163
        fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"min child t[%lu]: %d parent t[%lu]: %d\n",
                li, tmp___3, pi, tmp___2);
#line 164
        gdsl_raw_heap_dump(heap);
      }
#line 167
      if (comp2 > 0) {
#line 168
        li___0 = i + 1;
#line 169
        pi___0 = (li___0 / 4) * 2 + 1;
#line 171
        tmp___4 = vti((gdsl_element_t *)*(heap->nodes + pi___0));
#line 171
        tmp___5 = vti((gdsl_element_t *)*(heap->nodes + li___0));
#line 171
        fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"max child t[%lu]: %d parent t[%lu]: %d\n",
                li___0, tmp___5, pi___0, tmp___4);
#line 172
        gdsl_raw_heap_dump(heap);
      }
    }
#line 179
    j = i + 1;
#line 179
    while ((ulong___0 )j <= heap->card) {
#line 180
      if ((unsigned int )*(heap->nodes + (i + 1)) == (unsigned int )*(heap->nodes + (j + 1))) {
#line 181
        fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"IDENTICAL VALUES: %d %d\n",
                i, j);
#line 182
        exit(1);
      }
#line 179
      j ++;
    }
#line 144
    i ++;
  }
#line 190
  return;
}
}
#line 196 "../gdsl_interval_heap.c"
extern gdsl_interval_heap_t gdsl_interval_heap_alloc(char const   *name , gdsl_element_t (*alloc_f)(void *USER_DATA ) ,
                                                     void (*free_f)(gdsl_element_t E ) ,
                                                     long (*comp_f)(gdsl_element_t const   E ,
                                                                    void *VALUE ) ) 
{ 
  gdsl_interval_heap_t heap ;
  void *tmp ;
  gdsl_interval_heap_t tmp___0 ;
  void *tmp___1 ;

  {
#line 203
  tmp = malloc(sizeof(struct heap___0 ));
#line 203
  heap = (gdsl_interval_heap_t )tmp;
#line 205
  if ((unsigned int )heap == (unsigned int )((void *)0)) {
#line 207
    return ((gdsl_interval_heap_t )((void *)0));
  }
#line 210
  heap->name = (char *)((void *)0);
#line 212
  tmp___0 = gdsl_interval_heap_set_name(heap, name);
#line 212
  if ((unsigned int )tmp___0 == (unsigned int )((void *)0)) {
#line 214
    free((void *)heap);
#line 215
    return ((gdsl_interval_heap_t )((void *)0));
  }
#line 218
  tmp___1 = malloc(sizeof(gdsl_element_t ));
#line 218
  heap->nodes = (gdsl_element_t *)tmp___1;
#line 219
  if ((unsigned int )heap->nodes == (unsigned int )((void *)0)) {
#line 221
    if ((unsigned int )heap->name != (unsigned int )((void *)0)) {
#line 223
      free((void *)heap->name);
    }
#line 225
    free((void *)heap);
#line 226
    return ((gdsl_interval_heap_t )((void *)0));
  }
#line 229
  *(heap->nodes + 0) = (void *)0;
#line 230
  heap->card = (ulong___0 )0;
#line 231
  heap->size = (ulong___0 )2147483647;
#line 232
  heap->allocated = (ulong___0 )0;
#line 234
  if (alloc_f) {
#line 234
    heap->alloc_f = alloc_f;
  } else {
#line 234
    heap->alloc_f = & default_alloc___2;
  }
#line 235
  if (free_f) {
#line 235
    heap->free_f = free_f;
  } else {
#line 235
    heap->free_f = & default_free___2;
  }
#line 236
  if (comp_f) {
#line 236
    heap->comp_f = comp_f;
  } else {
#line 236
    heap->comp_f = (long (*)(gdsl_element_t const   E , void *VALUE ))(& default_comp___0);
  }
#line 238
  return (heap);
}
}
#line 241 "../gdsl_interval_heap.c"
extern void gdsl_interval_heap_free(gdsl_interval_heap_t heap ) 
{ 
  ulong___0 i ;

  {
#line 248
  if ((unsigned int )heap->name != (unsigned int )((void *)0)) {
#line 250
    free((void *)heap->name);
  }
#line 253
  i = (ulong___0 )1;
#line 253
  while (i < heap->card) {
#line 255
    (*(heap->free_f))(*(heap->nodes + (i + 1UL)));
#line 253
    i ++;
  }
#line 258
  free((void *)heap);
#line 259
  return;
}
}
#line 261 "../gdsl_interval_heap.c"
extern void gdsl_interval_heap_flush(gdsl_interval_heap_t heap ) 
{ 
  ulong___0 i ;

  {
#line 268
  i = (ulong___0 )1;
#line 268
  while (i < heap->card) {
#line 270
    (*(heap->free_f))(*(heap->nodes + (i + 1UL)));
#line 268
    i ++;
  }
#line 273
  heap->card = (ulong___0 )0;
#line 274
  return;
}
}
#line 280 "../gdsl_interval_heap.c"
extern char const   *gdsl_interval_heap_get_name(gdsl_interval_heap_t const   heap ) 
{ 


  {
#line 285
  return ((char const   *)heap->name);
}
}
#line 288 "../gdsl_interval_heap.c"
extern ulong___0 gdsl_interval_heap_get_size(gdsl_interval_heap_t const   heap ) 
{ 


  {
#line 293
  return (heap->card);
}
}
#line 296 "../gdsl_interval_heap.c"
extern void gdsl_interval_heap_set_max_size(gdsl_interval_heap_t const   H , ulong___0 size ) 
{ 


  {
#line 302
  H->size = size;
#line 303
  return;
}
}
#line 305 "../gdsl_interval_heap.c"
extern bool gdsl_interval_heap_is_empty(gdsl_interval_heap_t const   heap ) 
{ 


  {
#line 310
  return ((bool )(heap->card == 0UL));
}
}
#line 317 "../gdsl_interval_heap.c"
extern gdsl_interval_heap_t gdsl_interval_heap_set_name(gdsl_interval_heap_t heap ,
                                                        char const   *name ) 
{ 
  size_t tmp ;
  void *tmp___0 ;

  {
#line 320
  if ((unsigned int )heap->name != (unsigned int )((void *)0)) {
#line 322
    free((void *)heap->name);
#line 323
    heap->name = (char *)((void *)0);
  }
#line 326
  if ((unsigned int )name != (unsigned int )((void *)0)) {
#line 328
    tmp = strlen(name);
#line 328
    tmp___0 = malloc((1U + tmp) * sizeof(char ));
#line 328
    heap->name = (char *)tmp___0;
#line 330
    if ((unsigned int )heap->name == (unsigned int )((void *)0)) {
#line 332
      return ((gdsl_interval_heap_t )((void *)0));
    }
#line 335
    strcpy((char * __restrict  )heap->name, (char const   * __restrict  )name);
  }
#line 338
  return (heap);
}
}
#line 369 "../gdsl_interval_heap.c"
extern gdsl_element_t gdsl_interval_heap_insert(gdsl_interval_heap_t heap , void *value ) 
{ 
  gdsl_element_t e ;
  gdsl_element_t e1 ;
  long tmp ;
  long tmp___0 ;
  void *tmp___1 ;

  {
#line 376
  e = (*(heap->alloc_f))(value);
#line 378
  if ((unsigned int )e == (unsigned int )((void *)0)) {
#line 380
    return ((void *)0);
  }
#line 383
  if (heap->card == heap->size) {
#line 386
    e1 = *(heap->nodes + 2);
#line 390
    tmp = (*(heap->comp_f))((gdsl_element_t const   )e, e1);
#line 390
    if (tmp <= 0L) {
#line 391
      return (e);
    }
#line 395
    tmp___0 = (*(heap->comp_f))((gdsl_element_t const   )e, *(heap->nodes + 3));
#line 395
    if (tmp___0 > 0L) {
#line 396
      *(heap->nodes + 2) = *(heap->nodes + 3);
#line 397
      *(heap->nodes + 3) = e;
    } else {
#line 399
      *(heap->nodes + 2) = e;
    }
#line 401
    taslactite_min(heap->nodes, heap->card + 1UL, (ulong___0 )2, heap->comp_f);
#line 403
    return (e1);
  }
#line 406
  if (3UL + heap->card > heap->allocated) {
#line 407
    tmp___1 = realloc((void *)heap->nodes, (size_t )((4UL + 2UL * heap->card) * (ulong___0 )sizeof(gdsl_element_t )));
#line 407
    heap->nodes = (gdsl_element_t *)tmp___1;
#line 408
    heap->allocated = 4UL + 2UL * heap->card;
  }
#line 411
  if ((unsigned int )heap->nodes == (unsigned int )((void *)0)) {
#line 413
    (*(heap->free_f))(e);
#line 414
    return ((void *)0);
  }
#line 417
  (heap->card) ++;
#line 421
  *(heap->nodes + (heap->card + 1UL)) = e;
#line 422
  *(heap->nodes + (((heap->card + 1UL) / 2UL) * 2UL + 1UL)) = e;
#line 425
  fix(heap->nodes, ((heap->card + 1UL) / 2UL) * 2UL, heap->comp_f);
#line 427
  taslacmite_min(heap->nodes, ((heap->card + 1UL) / 2UL) * 2UL, heap->comp_f);
#line 428
  taslacmite_max(heap->nodes, heap->card + 1UL, heap->comp_f);
#line 430
  return ((void *)0);
}
}
#line 469 "../gdsl_interval_heap.c"
extern gdsl_element_t gdsl_interval_heap_remove_max(gdsl_interval_heap_t heap ) 
{ 
  gdsl_element_t e ;

  {
#line 472
  e = (void *)0;
#line 476
  if (heap->card == 0UL) {
#line 478
    return ((void *)0);
  }
#line 483
  if (heap->card == 1UL) {
#line 485
    e = *(heap->nodes + 2);
#line 486
    (heap->card) --;
#line 487
    return (e);
  }
#line 490
  e = *(heap->nodes + 3);
#line 491
  *(heap->nodes + 3) = *(heap->nodes + (heap->card + 1UL));
#line 493
  (heap->card) --;
#line 494
  taslactite_max(heap->nodes, heap->card + 1UL, (ulong___0 )2, heap->comp_f);
#line 498
  return (e);
}
}
#line 502 "../gdsl_interval_heap.c"
extern gdsl_element_t gdsl_interval_heap_get_min(gdsl_interval_heap_t const   heap ) 
{ 
  gdsl_element_t e ;

  {
#line 505
  e = (void *)0;
#line 509
  if (heap->card == 0UL) {
#line 511
    return ((void *)0);
  }
#line 514
  e = *(heap->nodes + 2);
#line 515
  return (e);
}
}
#line 519 "../gdsl_interval_heap.c"
extern gdsl_element_t gdsl_interval_heap_get_max(gdsl_interval_heap_t const   heap ) 
{ 
  gdsl_element_t e ;

  {
#line 522
  e = (void *)0;
#line 526
  if (heap->card == 0UL) {
#line 528
    return ((void *)0);
  }
#line 531
  if (heap->card == 1UL) {
#line 532
    e = *(heap->nodes + 2);
  } else {
#line 534
    e = *(heap->nodes + 3);
  }
#line 536
  return (e);
}
}
#line 540 "../gdsl_interval_heap.c"
extern gdsl_element_t gdsl_interval_heap_remove_min(gdsl_interval_heap_t heap ) 
{ 
  gdsl_element_t e ;

  {
#line 543
  e = (void *)0;
#line 547
  if (heap->card == 0UL) {
#line 549
    return ((void *)0);
  }
#line 552
  e = *(heap->nodes + 2);
#line 554
  if (heap->card + 1UL == ((heap->card + 1UL) / 2UL) * 2UL + 1UL) {
#line 557
    *(heap->nodes + 2) = *(heap->nodes + ((heap->card + 1UL) / 2UL) * 2UL);
#line 560
    *(heap->nodes + ((heap->card + 1UL) / 2UL) * 2UL) = *(heap->nodes + (((heap->card + 1UL) / 2UL) * 2UL + 1UL));
  } else {
#line 564
    *(heap->nodes + 2) = *(heap->nodes + (heap->card + 1UL));
  }
#line 566
  (heap->card) --;
#line 567
  taslactite_min(heap->nodes, heap->card + 1UL, (ulong___0 )2, heap->comp_f);
#line 571
  return (e);
}
}
#line 575 "../gdsl_interval_heap.c"
extern gdsl_interval_heap_t gdsl_interval_heap_delete_min(gdsl_interval_heap_t heap ) 
{ 
  gdsl_element_t e ;
  gdsl_element_t tmp ;

  {
#line 578
  tmp = gdsl_interval_heap_remove_min(heap);
#line 578
  e = tmp;
#line 580
  if ((unsigned int )e == (unsigned int )((void *)0)) {
#line 582
    return ((gdsl_interval_heap_t )((void *)0));
  }
#line 585
  (*(heap->free_f))(e);
#line 586
  return (heap);
}
}
#line 589 "../gdsl_interval_heap.c"
extern gdsl_interval_heap_t gdsl_interval_heap_delete_max(gdsl_interval_heap_t heap ) 
{ 
  gdsl_element_t e ;
  gdsl_element_t tmp ;

  {
#line 592
  tmp = gdsl_interval_heap_remove_max(heap);
#line 592
  e = tmp;
#line 594
  if ((unsigned int )e == (unsigned int )((void *)0)) {
#line 596
    return ((gdsl_interval_heap_t )((void *)0));
  }
#line 599
  (*(heap->free_f))(e);
#line 600
  return (heap);
}
}
#line 607 "../gdsl_interval_heap.c"
extern gdsl_element_t gdsl_interval_heap_map_forward(gdsl_interval_heap_t const   heap ,
                                                     int (*map_f)(gdsl_element_t const   E ,
                                                                  gdsl_location_t LOCATION ,
                                                                  void *USER_DATA ) ,
                                                     void *user_data ) 
{ 
  ulong___0 i ;
  gdsl_element_t e ;
  gdsl_location_t tmp ;
  int tmp___0 ;

  {
#line 615
  i = (ulong___0 )1;
#line 615
  while (i <= heap->card) {
#line 617
    e = *(heap->nodes + (i + 1UL));
#line 619
    tmp = get_location___1((gdsl_interval_heap_t )heap, (int )i);
#line 619
    tmp___0 = (*map_f)((gdsl_element_t const   )e, tmp, user_data);
#line 619
    if (tmp___0 == 0) {
#line 621
      return (e);
    }
#line 615
    i ++;
  }
#line 625
  return ((void *)0);
}
}
#line 632 "../gdsl_interval_heap.c"
extern void gdsl_interval_heap_write(gdsl_interval_heap_t const   heap , void (*write_f)(gdsl_element_t const   E ,
                                                                                         FILE *OUTPUT_FILE ,
                                                                                         gdsl_location_t LOCATION ,
                                                                                         void *USER_DATA ) ,
                                     FILE *file , void *user_data ) 
{ 
  ulong___0 i ;
  gdsl_location_t tmp ;

  {
#line 638
  i = (ulong___0 )1;
#line 638
  while (i <= heap->card) {
#line 640
    if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 642
      tmp = get_location___1((gdsl_interval_heap_t )heap, (int )i);
#line 642
      (*write_f)((gdsl_element_t const   )*(heap->nodes + (i + 1UL)), file, tmp, user_data);
    }
#line 638
    i ++;
  }
#line 646
  return;
}
}
#line 648 "../gdsl_interval_heap.c"
extern void gdsl_interval_heap_write_xml(gdsl_interval_heap_t const   heap , void (*write_f)(gdsl_element_t const   E ,
                                                                                             FILE *OUTPUT_FILE ,
                                                                                             gdsl_location_t LOCATION ,
                                                                                             void *USER_DATA ) ,
                                         FILE *file , void *user_data ) 
{ 
  ulong___0 i ;
  char const   *tmp ;
  gdsl_location_t tmp___0 ;

  {
#line 654
  if ((unsigned int )heap->name == (unsigned int )((void *)0)) {
#line 654
    tmp = "";
  } else {
#line 654
    tmp = (char const   *)heap->name;
  }
#line 654
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_INTERVAL_HEAP REF=\"%p\" NAME=\"%s\" SIZE=\"%ld\">\n",
          (void *)heap, tmp, heap->card);
#line 657
  i = (ulong___0 )1;
#line 657
  while (i <= heap->card) {
#line 659
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_INTERVAL_HEAP_ENTRY VALUE=\"%ld\">\n",
            i);
#line 660
    if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 662
      tmp___0 = get_location___1((gdsl_interval_heap_t )heap, (int )i);
#line 662
      (*write_f)((gdsl_element_t const   )*(heap->nodes + (i + 1UL)), file, tmp___0,
                 user_data);
    }
#line 665
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_INTERVAL_HEAP_ENTRY>\n");
#line 657
    i ++;
  }
#line 668
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_INTERVAL_HEAP>\n");
#line 669
  return;
}
}
#line 671 "../gdsl_interval_heap.c"
extern void gdsl_interval_heap_dump(gdsl_interval_heap_t const   heap , void (*write_f)(gdsl_element_t const   E ,
                                                                                        FILE *OUTPUT_FILE ,
                                                                                        gdsl_location_t LOCATION ,
                                                                                        void *USER_DATA ) ,
                                    FILE *file , void *user_data ) 
{ 
  ulong___0 i ;
  char const   *tmp ;
  gdsl_location_t tmp___0 ;

  {
#line 677
  if ((unsigned int )heap->name == (unsigned int )((void *)0)) {
#line 677
    tmp = "";
  } else {
#line 677
    tmp = (char const   *)heap->name;
  }
#line 677
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_INTERVAL_HEAP REF=\"%p\" NAME=\"%s\" SIZE=\"%ld\">\n",
          (void *)heap, tmp, heap->card);
#line 680
  i = (ulong___0 )1;
#line 680
  while (i <= heap->card) {
#line 682
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_INTERVAL_HEAP_ENTRY VALUE=\"%ld\">\n",
            i);
#line 683
    if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 685
      tmp___0 = get_location___1((gdsl_interval_heap_t )heap, (int )i);
#line 685
      (*write_f)((gdsl_element_t const   )*(heap->nodes + (i + 1UL)), file, tmp___0,
                 user_data);
    }
#line 688
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_INTERVAL_HEAP_ENTRY>\n");
#line 680
    i ++;
  }
#line 691
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_INTERVAL_HEAP>\n");
#line 692
  return;
}
}
#line 697 "../gdsl_interval_heap.c"
static gdsl_element_t default_alloc___2(void *e ) 
{ 


  {
#line 700
  return (e);
}
}
#line 703 "../gdsl_interval_heap.c"
static void default_free___2(gdsl_element_t e ) 
{ 


  {
#line 707
  return;
}
}
#line 709 "../gdsl_interval_heap.c"
static long default_comp___0(gdsl_element_t e , void *key ) 
{ 


  {
#line 712
  return (0L);
}
}
#line 715 "../gdsl_interval_heap.c"
static void fix(gdsl_element_t *t , ulong___0 k , long (*comp_f)(gdsl_element_t const   E ,
                                                                 void *VALUE ) ) 
{ 
  gdsl_element_t temp ;
  long tmp ;

  {
#line 720
  tmp = (*comp_f)((gdsl_element_t const   )*(t + k), *(t + (k + 1UL)));
#line 720
  if (tmp > 0L) {
#line 723
    temp = *(t + k);
#line 724
    *(t + k) = *(t + (k + 1UL));
#line 725
    *(t + (k + 1UL)) = temp;
  }
#line 727
  return;
}
}
#line 729 "../gdsl_interval_heap.c"
static void taslacmite_min(gdsl_element_t *t , ulong___0 k , long (*comp_f)(gdsl_element_t const   E ,
                                                                            void *VALUE ) ) 
{ 
  gdsl_element_t v ;
  long tmp ;

  {
#line 735
  v = *(t + k);
#line 737
  while (1) {
#line 737
    if (k > 3UL) {
#line 737
      tmp = (*comp_f)((gdsl_element_t const   )*(t + (k / 4UL) * 2UL), v);
#line 737
      if (! (tmp > 0L)) {
#line 737
        break;
      }
    } else {
#line 737
      break;
    }
#line 738
    *(t + k) = *(t + (k / 4UL) * 2UL);
#line 739
    k = (k / 4UL) * 2UL;
  }
#line 742
  *(t + k) = v;
#line 743
  return;
}
}
#line 745 "../gdsl_interval_heap.c"
static void taslacmite_max(gdsl_element_t *t , ulong___0 k , long (*comp_f)(gdsl_element_t const   E ,
                                                                            void *VALUE ) ) 
{ 
  gdsl_element_t v ;
  long tmp ;

  {
#line 751
  v = *(t + k);
#line 753
  while (1) {
#line 753
    if (k > 3UL) {
#line 753
      tmp = (*comp_f)((gdsl_element_t const   )*(t + ((k / 4UL) * 2UL + 1UL)), v);
#line 753
      if (! (tmp < 0L)) {
#line 753
        break;
      }
    } else {
#line 753
      break;
    }
#line 754
    *(t + k) = *(t + ((k / 4UL) * 2UL + 1UL));
#line 755
    k = (k / 4UL) * 2UL + 1UL;
  }
#line 758
  *(t + k) = v;
#line 759
  return;
}
}
#line 770 "../gdsl_interval_heap.c"
static ulong___0 taslactite_max(gdsl_element_t *t , ulong___0 n , ulong___0 k , long (*comp_f)(gdsl_element_t const   E ,
                                                                                               void *VALUE ) ) 
{ 
  ulong___0 j ;
  gdsl_element_t v ;
  gdsl_element_t *temp ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 775
  k = (k / 2UL) * 2UL + 1UL;
#line 777
  v = *(t + k);
#line 779
  while (k <= (((n / 2UL) * 2UL + 1UL) / 4UL) * 2UL + 1UL) {
#line 782
    tmp = (*comp_f)((gdsl_element_t const   )*(t + (k / 2UL) * 2UL), v);
#line 782
    if (tmp > 0L) {
#line 783
      temp = (gdsl_element_t *)v;
#line 784
      v = *(t + (k / 2UL) * 2UL);
#line 785
      *(t + (k / 2UL) * 2UL) = (gdsl_element_t )temp;
    }
#line 788
    j = (k / 2UL) * 4UL + 1UL;
#line 790
    if (j < (n / 2UL) * 2UL + 1UL) {
#line 790
      tmp___0 = (*comp_f)((gdsl_element_t const   )*(t + j), *(t + ((k / 2UL) * 4UL + 3UL)));
#line 790
      if (tmp___0 < 0L) {
#line 792
        j = (k / 2UL) * 4UL + 3UL;
      }
    }
#line 795
    tmp___1 = (*comp_f)((gdsl_element_t const   )*(t + j), v);
#line 795
    if (tmp___1 <= 0L) {
#line 797
      break;
    }
#line 800
    *(t + k) = *(t + j);
#line 802
    k = j;
  }
#line 805
  *(t + k) = v;
#line 806
  fix(t, k - 1UL, comp_f);
#line 808
  return (k);
}
}
#line 812 "../gdsl_interval_heap.c"
static ulong___0 taslactite_min(gdsl_element_t *t , ulong___0 n , ulong___0 k , long (*comp_f)(gdsl_element_t const   E ,
                                                                                               void *VALUE ) ) 
{ 
  ulong___0 j ;
  gdsl_element_t v ;
  int comp ;
  long tmp ;
  gdsl_element_t *temp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 817
  k = (k / 2UL) * 2UL;
#line 819
  v = *(t + k);
#line 821
  while (k <= (((n / 2UL) * 2UL) / 4UL) * 2UL) {
#line 825
    tmp = (*comp_f)((gdsl_element_t const   )v, *(t + ((k / 2UL) * 2UL + 1UL)));
#line 825
    comp = (int )tmp;
#line 827
    if (comp > 0) {
#line 828
      temp = (gdsl_element_t *)v;
#line 829
      v = *(t + ((k / 2UL) * 2UL + 1UL));
#line 830
      *(t + ((k / 2UL) * 2UL + 1UL)) = (gdsl_element_t )temp;
    }
#line 833
    j = (k / 2UL) * 4UL;
#line 835
    if (j < (n / 2UL) * 2UL) {
#line 835
      tmp___0 = (*comp_f)((gdsl_element_t const   )*(t + j), *(t + ((k / 2UL) * 4UL + 2UL)));
#line 835
      if (tmp___0 > 0L) {
#line 837
        j = (k / 2UL) * 4UL + 2UL;
      }
    }
#line 840
    tmp___1 = (*comp_f)((gdsl_element_t const   )*(t + j), v);
#line 840
    if (tmp___1 >= 0L) {
#line 842
      break;
    }
#line 845
    *(t + k) = *(t + j);
#line 847
    k = j;
  }
#line 850
  *(t + k) = v;
#line 852
  if (k != n) {
#line 853
    fix(t, k, comp_f);
  }
#line 855
  return (k);
}
}
#line 858 "../gdsl_interval_heap.c"
static gdsl_location_t get_location___1(gdsl_interval_heap_t heap , int i ) 
{ 
  gdsl_location_t location ;

  {
#line 861
  location = (gdsl_location_t )0;
#line 863
  if (i == 1) {
#line 865
    location = (gdsl_location_t )((unsigned int )location | 1U);
  }
#line 868
  if ((ulong___0 )i == heap->card) {
#line 870
    location = (gdsl_location_t )((unsigned int )location | 2U);
  }
#line 873
  if ((ulong___0 )(i * 2) > heap->card) {
#line 875
    location = (gdsl_location_t )((unsigned int )location | 2U);
  }
#line 878
  return (location);
}
}
#line 1 "cil-3JdVf24K.o"
#pragma merger("0","/tmp/cil-um_FxtGo.i","")
#line 81 "../gdsl_rbtree.h"
extern gdsl_rbtree_t gdsl_rbtree_alloc(char const   *name , gdsl_element_t (*alloc_f)(void *USER_DATA ) ,
                                       void (*free_f)(gdsl_element_t E ) , long (*comp_f)(gdsl_element_t const   E ,
                                                                                          void *VALUE ) ) ;
#line 101
extern void gdsl_rbtree_free(gdsl_rbtree_t t ) ;
#line 117
extern void gdsl_rbtree_flush(gdsl_rbtree_t t ) ;
#line 134
extern char *gdsl_rbtree_get_name(gdsl_rbtree_t const   t ) ;
#line 146
extern bool gdsl_rbtree_is_empty(gdsl_rbtree_t const   t ) ;
#line 157
extern gdsl_element_t gdsl_rbtree_get_root(gdsl_rbtree_t const   t ) ;
#line 169
extern ulong___0 gdsl_rbtree_get_size(gdsl_rbtree_t const   t ) ;
#line 181
extern ulong___0 gdsl_rbtree_height(gdsl_rbtree_t const   t ) ;
#line 202
extern gdsl_rbtree_t gdsl_rbtree_set_name(gdsl_rbtree_t t , char const   *name ) ;
#line 229
extern gdsl_element_t gdsl_rbtree_insert(gdsl_rbtree_t t , void *v , int *rc ) ;
#line 251
extern gdsl_element_t gdsl_rbtree_remove(gdsl_rbtree_t t , void *v ) ;
#line 273
extern gdsl_rbtree_t gdsl_rbtree_delete(gdsl_rbtree_t t , void *v ) ;
#line 301
extern gdsl_element_t gdsl_rbtree_search(gdsl_rbtree_t const   t , long (*comp_f)(gdsl_element_t const   E ,
                                                                                  void *VALUE ) ,
                                         void *v ) ;
#line 329
extern gdsl_element_t gdsl_rbtree_map_prefix(gdsl_rbtree_t const   t , int (*map_f)(gdsl_element_t const   E ,
                                                                                    gdsl_location_t LOCATION ,
                                                                                    void *USER_DATA ) ,
                                             void *d ) ;
#line 353
extern gdsl_element_t gdsl_rbtree_map_infix(gdsl_rbtree_t const   t , int (*map_f)(gdsl_element_t const   E ,
                                                                                   gdsl_location_t LOCATION ,
                                                                                   void *USER_DATA ) ,
                                            void *d ) ;
#line 377
extern gdsl_element_t gdsl_rbtree_map_postfix(gdsl_rbtree_t const   t , int (*map_f)(gdsl_element_t const   E ,
                                                                                     gdsl_location_t LOCATION ,
                                                                                     void *USER_DATA ) ,
                                              void *d ) ;
#line 403
extern void gdsl_rbtree_write(gdsl_rbtree_t const   t , void (*write_f)(gdsl_element_t const   E ,
                                                                        FILE *OUTPUT_FILE ,
                                                                        gdsl_location_t LOCATION ,
                                                                        void *USER_DATA ) ,
                              FILE *file , void *d ) ;
#line 428
extern void gdsl_rbtree_write_xml(gdsl_rbtree_t const   t , void (*write_f)(gdsl_element_t const   E ,
                                                                            FILE *OUTPUT_FILE ,
                                                                            gdsl_location_t LOCATION ,
                                                                            void *USER_DATA ) ,
                                  FILE *file , void *d ) ;
#line 452
extern void gdsl_rbtree_dump(gdsl_rbtree_t const   t , void (*write_f)(gdsl_element_t const   E ,
                                                                       FILE *OUTPUT_FILE ,
                                                                       gdsl_location_t LOCATION ,
                                                                       void *USER_DATA ) ,
                             FILE *file , void *d ) ;
#line 72 "../gdsl_rbtree.c"
static gdsl_element_t default_alloc___3(void *v ) ;
#line 75
static void default_free___3(gdsl_element_t e ) ;
#line 78
static long default_compare(gdsl_element_t e , void *v ) ;
#line 81
static gdsl_rbtree_node_t rbtree_node_alloc(gdsl_rbtree_t t , gdsl_element_t e ) ;
#line 84
static void rbtree_node_free(gdsl_rbtree_node_t n ) ;
#line 87
static void rbtree_destroy(gdsl_rbtree_node_t n , gdsl_rbtree_node_t sent , void (*free_f)(gdsl_element_t E ) ) ;
#line 94
static ulong___0 rbtree_height(gdsl_rbtree_node_t n , gdsl_rbtree_node_t sent ) ;
#line 97
static gdsl_rbtree_node_t rbtree_left_rot(gdsl_rbtree_node_t n ) ;
#line 100
static gdsl_rbtree_node_t rbtree_right_rot(gdsl_rbtree_node_t n ) ;
#line 103
static gdsl_rbtree_node_t rbtree_search(gdsl_rbtree_node_t root , gdsl_rbtree_node_t sent ,
                                        long (*f)(gdsl_element_t const   E , void *VALUE ) ,
                                        void *v ) ;
#line 107
static gdsl_rbtree_node_t rbtree_next(gdsl_rbtree_t t , gdsl_rbtree_node_t n ) ;
#line 110
static gdsl_element_t rbtree_prefix_parse(gdsl_rbtree_node_t root , gdsl_rbtree_node_t sent ,
                                          int (*map_f)(gdsl_element_t const   E ,
                                                       gdsl_location_t LOCATION ,
                                                       void *USER_DATA ) , void *d ) ;
#line 114
static gdsl_element_t rbtree_infix_parse(gdsl_rbtree_node_t root , gdsl_rbtree_node_t sent ,
                                         int (*map_f)(gdsl_element_t const   E , gdsl_location_t LOCATION ,
                                                      void *USER_DATA ) , void *d ) ;
#line 118
static gdsl_element_t rbtree_postfix_parse(gdsl_rbtree_node_t root , gdsl_rbtree_node_t sent ,
                                           int (*map_f)(gdsl_element_t const   E ,
                                                        gdsl_location_t LOCATION ,
                                                        void *USER_DATA ) , void *d ) ;
#line 122
static void rbtree_write(gdsl_rbtree_node_t n , gdsl_rbtree_node_t sent , void (*write_f)(gdsl_element_t const   E ,
                                                                                          FILE *OUTPUT_FILE ,
                                                                                          gdsl_location_t LOCATION ,
                                                                                          void *USER_DATA ) ,
                         FILE *file , void *d ) ;
#line 126
static void rbtree_write_xml(gdsl_rbtree_node_t n , gdsl_rbtree_node_t sent , void (*write_f)(gdsl_element_t const   E ,
                                                                                              FILE *OUTPUT_FILE ,
                                                                                              gdsl_location_t LOCATION ,
                                                                                              void *USER_DATA ) ,
                             FILE *file , void *d ) ;
#line 130
static void rbtree_dump(gdsl_rbtree_node_t n , gdsl_rbtree_node_t sent , void (*write_f)(gdsl_element_t const   E ,
                                                                                         FILE *OUTPUT_FILE ,
                                                                                         gdsl_location_t LOCATION ,
                                                                                         void *USER_DATA ) ,
                        FILE *file , void *d ) ;
#line 134
static gdsl_location_t get_location___2(gdsl_rbtree_node_t n , gdsl_rbtree_node_t s ) ;
#line 141 "../gdsl_rbtree.c"
extern gdsl_rbtree_t gdsl_rbtree_alloc(char const   *name , gdsl_element_t (*alloc_f)(void *USER_DATA ) ,
                                       void (*free_f)(gdsl_element_t E ) , long (*comp_f)(gdsl_element_t const   E ,
                                                                                          void *VALUE ) ) 
{ 
  gdsl_rbtree_t t ;
  void *tmp ;
  gdsl_rbtree_t tmp___0 ;

  {
#line 147
  tmp = malloc(sizeof(struct gdsl_rbtree ));
#line 147
  t = (gdsl_rbtree_t )tmp;
#line 149
  if ((unsigned int )t == (unsigned int )((void *)0)) {
#line 151
    return ((gdsl_rbtree_t )((void *)0));
  }
#line 154
  t->name = (char *)((void *)0);
#line 156
  tmp___0 = gdsl_rbtree_set_name(t, name);
#line 156
  if ((unsigned int )tmp___0 == (unsigned int )((void *)0)) {
#line 158
    free((void *)t);
#line 159
    return ((gdsl_rbtree_t )((void *)0));
  }
#line 162
  if ((unsigned int )alloc_f == (unsigned int )((void *)0)) {
#line 162
    t->alloc_f = & default_alloc___3;
  } else {
#line 162
    t->alloc_f = alloc_f;
  }
#line 163
  if ((unsigned int )free_f == (unsigned int )((void *)0)) {
#line 163
    t->free_f = & default_free___3;
  } else {
#line 163
    t->free_f = free_f;
  }
#line 164
  if ((unsigned int )comp_f == (unsigned int )((void *)0)) {
#line 164
    t->comp_f = (long (*)(gdsl_element_t const   E , void *VALUE ))(& default_compare);
  } else {
#line 164
    t->comp_f = comp_f;
  }
#line 166
  t->card = 0UL;
#line 168
  t->sent.left = & t->sent;
#line 169
  t->sent.right = & t->sent;
#line 170
  t->sent.parent = & t->sent;
#line 171
  t->sent.color = (gdsl_rbtree_node_color_t )1;
#line 173
  return (t);
}
}
#line 176 "../gdsl_rbtree.c"
extern void gdsl_rbtree_free(gdsl_rbtree_t t ) 
{ 


  {
#line 181
  rbtree_destroy(t->sent.right, & t->sent, t->free_f);
#line 183
  if ((unsigned int )t->name != (unsigned int )((void *)0)) {
#line 185
    free((void *)t->name);
  }
#line 188
  free((void *)t);
#line 189
  return;
}
}
#line 191 "../gdsl_rbtree.c"
extern void gdsl_rbtree_flush(gdsl_rbtree_t t ) 
{ 


  {
#line 196
  rbtree_destroy(t->sent.right, & t->sent, t->free_f);
#line 198
  t->card = 0UL;
#line 200
  t->sent.left = & t->sent;
#line 201
  t->sent.right = & t->sent;
#line 202
  t->sent.parent = & t->sent;
#line 203
  t->sent.color = (gdsl_rbtree_node_color_t )1;
#line 204
  return;
}
}
#line 219 "../gdsl_rbtree.c"
extern char *gdsl_rbtree_get_name(gdsl_rbtree_t const   t ) 
{ 


  {
#line 224
  return (t->name);
}
}
#line 227 "../gdsl_rbtree.c"
extern bool gdsl_rbtree_is_empty(gdsl_rbtree_t const   t ) 
{ 


  {
#line 232
  return ((bool )(t->card == 0UL));
}
}
#line 235 "../gdsl_rbtree.c"
extern gdsl_element_t gdsl_rbtree_get_root(gdsl_rbtree_t const   t ) 
{ 


  {
#line 240
  return ((t->sent.right)->content);
}
}
#line 243 "../gdsl_rbtree.c"
extern ulong___0 gdsl_rbtree_get_size(gdsl_rbtree_t const   t ) 
{ 


  {
#line 248
  return (t->card);
}
}
#line 251 "../gdsl_rbtree.c"
extern ulong___0 gdsl_rbtree_height(gdsl_rbtree_t const   t ) 
{ 
  ulong___0 tmp ;

  {
#line 256
  tmp = rbtree_height(t->sent.right, & t->sent);
#line 256
  return (tmp);
}
}
#line 263 "../gdsl_rbtree.c"
extern gdsl_rbtree_t gdsl_rbtree_set_name(gdsl_rbtree_t t , char const   *name ) 
{ 
  size_t tmp ;
  void *tmp___0 ;

  {
#line 268
  if ((unsigned int )t->name != (unsigned int )((void *)0)) {
#line 270
    free((void *)t->name);
#line 271
    t->name = (char *)((void *)0);
  }
#line 274
  if ((unsigned int )name != (unsigned int )((void *)0)) {
#line 276
    tmp = strlen(name);
#line 276
    tmp___0 = malloc((1U + tmp) * sizeof(char ));
#line 276
    t->name = (char *)tmp___0;
#line 278
    if ((unsigned int )t->name == (unsigned int )((void *)0)) {
#line 280
      return ((gdsl_rbtree_t )((void *)0));
    }
#line 283
    strcpy((char * __restrict  )t->name, (char const   * __restrict  )name);
  }
#line 286
  return (t);
}
}
#line 289 "../gdsl_rbtree.c"
extern gdsl_element_t gdsl_rbtree_insert(gdsl_rbtree_t t , void *v , int *rc ) 
{ 
  int comp ;
  gdsl_element_t e ;
  gdsl_rbtree_node_t root ;
  gdsl_rbtree_node_t parent ;
  gdsl_rbtree_node_t n ;
  long tmp ;
  gdsl_rbtree_node_t uncle ;
  gdsl_rbtree_node_t gparent ;

  {
#line 292
  comp = 0;
#line 301
  *rc = 2;
#line 304
  root = t->sent.right;
#line 305
  parent = & t->sent;
#line 306
  while ((unsigned int )root != (unsigned int )(& t->sent)) {
#line 308
    parent = root;
#line 309
    tmp = (*(t->comp_f))((gdsl_element_t const   )root->content, v);
#line 309
    comp = (int )tmp;
#line 312
    if (comp == 0) {
#line 314
      *rc = 3;
#line 315
      return (root->content);
    }
#line 318
    if (comp > 0) {
#line 318
      root = root->left;
    } else {
#line 318
      root = root->right;
    }
  }
#line 322
  e = (*(t->alloc_f))(v);
#line 324
  if ((unsigned int )e == (unsigned int )((void *)0)) {
#line 326
    *rc = -1;
#line 327
    return ((void *)0);
  }
#line 330
  n = rbtree_node_alloc(t, e);
#line 332
  if ((unsigned int )n == (unsigned int )((void *)0)) {
#line 334
    (*(t->free_f))(e);
#line 335
    *rc = -1;
#line 336
    return ((void *)0);
  }
#line 340
  n->parent = parent;
#line 342
  if (comp > 0) {
#line 344
    parent->left = n;
  } else {
#line 348
    parent->right = n;
  }
#line 351
  (t->card) ++;
#line 355
  uncle = (gdsl_rbtree_node_t )((void *)0);
#line 356
  gparent = (gdsl_rbtree_node_t )((void *)0);
#line 358
  while ((unsigned int )parent->color == 0U) {
#line 360
    gparent = parent->parent;
#line 361
    if ((unsigned int )parent == (unsigned int )gparent->left) {
#line 363
      uncle = gparent->right;
#line 364
      if ((unsigned int )uncle->color == 0U) {
#line 366
        parent->color = (gdsl_rbtree_node_color_t )1;
#line 367
        uncle->color = (gdsl_rbtree_node_color_t )1;
#line 368
        gparent->color = (gdsl_rbtree_node_color_t )0;
#line 369
        n = gparent;
#line 370
        parent = gparent->parent;
      } else {
#line 374
        if ((unsigned int )n == (unsigned int )parent->right) {
#line 376
          rbtree_left_rot(parent);
#line 377
          parent = n;
        }
#line 379
        parent->color = (gdsl_rbtree_node_color_t )1;
#line 380
        gparent->color = (gdsl_rbtree_node_color_t )0;
#line 381
        rbtree_right_rot(gparent);
#line 382
        break;
      }
    } else {
#line 387
      uncle = gparent->left;
#line 388
      if ((unsigned int )uncle->color == 0U) {
#line 390
        parent->color = (gdsl_rbtree_node_color_t )1;
#line 391
        uncle->color = (gdsl_rbtree_node_color_t )1;
#line 392
        gparent->color = (gdsl_rbtree_node_color_t )0;
#line 393
        n = gparent;
#line 394
        parent = gparent->parent;
      } else {
#line 398
        if ((unsigned int )n == (unsigned int )parent->left) {
#line 400
          rbtree_right_rot(parent);
#line 401
          parent = n;
        }
#line 403
        parent->color = (gdsl_rbtree_node_color_t )1;
#line 404
        gparent->color = (gdsl_rbtree_node_color_t )0;
#line 405
        rbtree_left_rot(gparent);
      }
    }
  }
#line 411
  (t->sent.right)->color = (gdsl_rbtree_node_color_t )1;
#line 413
  return (e);
}
}
#line 416 "../gdsl_rbtree.c"
extern gdsl_element_t gdsl_rbtree_remove(gdsl_rbtree_t t , void *v ) 
{ 
  gdsl_element_t e ;
  gdsl_rbtree_node_t n ;
  gdsl_rbtree_node_t child ;
  gdsl_rbtree_node_t next ;
  gdsl_rbtree_node_t tmp ;
  gdsl_rbtree_node_t nextparent ;
  gdsl_rbtree_node_color_t nextcolor ;
  gdsl_rbtree_node_t parent ;
  gdsl_rbtree_node_t sister ;

  {
#line 426
  n = rbtree_search(t->sent.right, & t->sent, t->comp_f, v);
#line 428
  if ((unsigned int )n == (unsigned int )((void *)0)) {
#line 430
    return ((void *)0);
  }
#line 434
  if ((unsigned int )n->left != (unsigned int )(& t->sent)) {
#line 434
    if ((unsigned int )n->right != (unsigned int )(& t->sent)) {
#line 436
      tmp = rbtree_next(t, n);
#line 436
      next = tmp;
#line 437
      nextparent = next->parent;
#line 438
      nextcolor = next->color;
#line 440
      child = next->right;
#line 441
      child->parent = nextparent;
#line 443
      if ((unsigned int )nextparent->left == (unsigned int )next) {
#line 445
        nextparent->left = child;
      } else {
#line 449
        nextparent->right = child;
      }
#line 452
      next->parent = n->parent;
#line 453
      next->left = n->left;
#line 454
      next->right = n->right;
#line 455
      (next->left)->parent = next;
#line 456
      (next->right)->parent = next;
#line 457
      next->color = n->color;
#line 458
      n->color = nextcolor;
#line 460
      if ((unsigned int )(n->parent)->left == (unsigned int )n) {
#line 462
        (n->parent)->left = next;
      } else {
#line 466
        (n->parent)->right = next;
      }
    } else {
#line 434
      goto _L;
    }
  } else {
    _L: /* CIL Label */ 
#line 471
    if ((unsigned int )n->left != (unsigned int )(& t->sent)) {
#line 471
      child = n->left;
    } else {
#line 471
      child = n->right;
    }
#line 473
    child->parent = n->parent;
#line 475
    if ((unsigned int )n == (unsigned int )(n->parent)->left) {
#line 477
      (n->parent)->left = child;
    } else {
#line 481
      (n->parent)->right = child;
    }
  }
#line 485
  (t->card) --;
#line 488
  if ((unsigned int )n->color == 1U) {
#line 492
    (t->sent.right)->color = (gdsl_rbtree_node_color_t )0;
#line 494
    while ((unsigned int )child->color == 1U) {
#line 496
      parent = child->parent;
#line 497
      if ((unsigned int )child == (unsigned int )parent->left) {
#line 499
        sister = parent->right;
#line 500
        if ((unsigned int )sister->color == 0U) {
#line 502
          sister->color = (gdsl_rbtree_node_color_t )1;
#line 503
          parent->color = (gdsl_rbtree_node_color_t )0;
#line 504
          rbtree_left_rot(parent);
#line 505
          sister = parent->right;
        }
#line 507
        if ((unsigned int )(sister->left)->color == 1U) {
#line 507
          if ((unsigned int )(sister->right)->color == 1U) {
#line 509
            sister->color = (gdsl_rbtree_node_color_t )0;
#line 510
            child = parent;
          } else {
#line 507
            goto _L___0;
          }
        } else {
          _L___0: /* CIL Label */ 
#line 514
          if ((unsigned int )(sister->right)->color == 1U) {
#line 516
            (sister->left)->color = (gdsl_rbtree_node_color_t )1;
#line 517
            sister->color = (gdsl_rbtree_node_color_t )0;
#line 518
            rbtree_right_rot(sister);
#line 519
            sister = parent->right;
          }
#line 521
          sister->color = parent->color;
#line 522
          (sister->right)->color = (gdsl_rbtree_node_color_t )1;
#line 523
          parent->color = (gdsl_rbtree_node_color_t )1;
#line 524
          rbtree_left_rot(parent);
#line 525
          break;
        }
      } else {
#line 530
        sister = parent->left;
#line 531
        if ((unsigned int )sister->color == 0U) {
#line 533
          sister->color = (gdsl_rbtree_node_color_t )1;
#line 534
          parent->color = (gdsl_rbtree_node_color_t )0;
#line 535
          rbtree_right_rot(parent);
#line 536
          sister = parent->left;
        }
#line 538
        if ((unsigned int )(sister->right)->color == 1U) {
#line 538
          if ((unsigned int )(sister->left)->color == 1U) {
#line 540
            sister->color = (gdsl_rbtree_node_color_t )0;
#line 541
            child = parent;
          } else {
#line 538
            goto _L___1;
          }
        } else {
          _L___1: /* CIL Label */ 
#line 545
          if ((unsigned int )(sister->left)->color == 1U) {
#line 547
            (sister->right)->color = (gdsl_rbtree_node_color_t )1;
#line 548
            sister->color = (gdsl_rbtree_node_color_t )0;
#line 549
            rbtree_left_rot(sister);
#line 550
            sister = parent->left;
          }
#line 552
          sister->color = parent->color;
#line 553
          (sister->left)->color = (gdsl_rbtree_node_color_t )1;
#line 554
          parent->color = (gdsl_rbtree_node_color_t )1;
#line 555
          rbtree_right_rot(parent);
#line 556
          break;
        }
      }
    }
#line 561
    child->color = (gdsl_rbtree_node_color_t )1;
#line 562
    (t->sent.right)->color = (gdsl_rbtree_node_color_t )1;
  }
#line 565
  e = n->content;
#line 566
  rbtree_node_free(n);
#line 568
  return (e);
}
}
#line 571 "../gdsl_rbtree.c"
extern gdsl_rbtree_t gdsl_rbtree_delete(gdsl_rbtree_t t , void *v ) 
{ 
  gdsl_element_t e ;

  {
#line 578
  e = gdsl_rbtree_remove(t, v);
#line 580
  if ((unsigned int )e == (unsigned int )((void *)0)) {
#line 582
    return ((gdsl_rbtree_t )((void *)0));
  }
#line 585
  (*(t->free_f))(e);
#line 587
  return (t);
}
}
#line 594 "../gdsl_rbtree.c"
extern gdsl_element_t gdsl_rbtree_search(gdsl_rbtree_t const   t , long (*comp_f)(gdsl_element_t const   E ,
                                                                                  void *VALUE ) ,
                                         void *v ) 
{ 
  gdsl_rbtree_node_t n ;
  long (*tmp)(gdsl_element_t const   E , void *VALUE ) ;
  void *tmp___0 ;

  {
#line 601
  if (comp_f) {
#line 601
    tmp = comp_f;
  } else {
#line 601
    tmp = t->comp_f;
  }
#line 601
  n = rbtree_search(t->sent.right, & t->sent, tmp, v);
#line 603
  if ((unsigned int )n == (unsigned int )((void *)0)) {
#line 603
    tmp___0 = (void *)0;
  } else {
#line 603
    tmp___0 = n->content;
  }
#line 603
  return (tmp___0);
}
}
#line 610 "../gdsl_rbtree.c"
extern gdsl_element_t gdsl_rbtree_map_prefix(gdsl_rbtree_t const   t , int (*map_f)(gdsl_element_t const   E ,
                                                                                    gdsl_location_t LOCATION ,
                                                                                    void *USER_DATA ) ,
                                             void *d ) 
{ 
  gdsl_element_t tmp ;

  {
#line 616
  tmp = rbtree_prefix_parse(t->sent.right, & t->sent, map_f, d);
#line 616
  return (tmp);
}
}
#line 619 "../gdsl_rbtree.c"
extern gdsl_element_t gdsl_rbtree_map_infix(gdsl_rbtree_t const   t , int (*map_f)(gdsl_element_t const   E ,
                                                                                   gdsl_location_t LOCATION ,
                                                                                   void *USER_DATA ) ,
                                            void *d ) 
{ 
  gdsl_element_t tmp ;

  {
#line 625
  tmp = rbtree_infix_parse(t->sent.right, & t->sent, map_f, d);
#line 625
  return (tmp);
}
}
#line 628 "../gdsl_rbtree.c"
extern gdsl_element_t gdsl_rbtree_map_postfix(gdsl_rbtree_t const   t , int (*map_f)(gdsl_element_t const   E ,
                                                                                     gdsl_location_t LOCATION ,
                                                                                     void *USER_DATA ) ,
                                              void *d ) 
{ 
  gdsl_element_t tmp ;

  {
#line 634
  tmp = rbtree_postfix_parse(t->sent.right, & t->sent, map_f, d);
#line 634
  return (tmp);
}
}
#line 641 "../gdsl_rbtree.c"
extern void gdsl_rbtree_write(gdsl_rbtree_t const   t , void (*write_f)(gdsl_element_t const   E ,
                                                                        FILE *OUTPUT_FILE ,
                                                                        gdsl_location_t LOCATION ,
                                                                        void *USER_DATA ) ,
                              FILE *file , void *d ) 
{ 


  {
#line 649
  rbtree_write(t->sent.right, & t->sent, write_f, file, d);
#line 650
  return;
}
}
#line 652 "../gdsl_rbtree.c"
extern void gdsl_rbtree_write_xml(gdsl_rbtree_t const   t , void (*write_f)(gdsl_element_t const   E ,
                                                                            FILE *OUTPUT_FILE ,
                                                                            gdsl_location_t LOCATION ,
                                                                            void *USER_DATA ) ,
                                  FILE *file , void *d ) 
{ 


  {
#line 659
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_RBTREE NAME=\"%s\" CARD=\"%ld\">\n",
          t->name, t->card);
#line 662
  rbtree_write_xml(t->sent.right, & t->sent, write_f, file, d);
#line 664
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_RBTREE>\n");
#line 665
  return;
}
}
#line 667 "../gdsl_rbtree.c"
extern void gdsl_rbtree_dump(gdsl_rbtree_t const   t , void (*write_f)(gdsl_element_t const   E ,
                                                                       FILE *OUTPUT_FILE ,
                                                                       gdsl_location_t LOCATION ,
                                                                       void *USER_DATA ) ,
                             FILE *file , void *d ) 
{ 
  char const   *tmp ;

  {
#line 674
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_RBTREE REF=\"%p\" NAME=\"%s\" CARD=\"%ld\">\n",
          (void *)t, t->name, t->card);
#line 676
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_RBTREE_SENT REF=\"%p\" LEFT=\"%p\" RIGHT=\"%p\" PARENT=\"%p\"",
          (void *)(& t->sent), (void *)t->sent.left, (void *)t->sent.right, (void *)t->sent.parent);
#line 679
  if ((unsigned int )t->sent.color == 0U) {
#line 679
    tmp = "RED";
  } else {
#line 679
    tmp = "BLACK";
  }
#line 679
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )" COLOR=\"%s\"/>\n",
          tmp);
#line 681
  rbtree_dump(t->sent.right, & t->sent, write_f, file, d);
#line 683
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_RBTREE>\n");
#line 684
  return;
}
}
#line 690 "../gdsl_rbtree.c"
static gdsl_element_t default_alloc___3(void *v ) 
{ 


  {
#line 693
  return (v);
}
}
#line 696 "../gdsl_rbtree.c"
static void default_free___3(gdsl_element_t e ) 
{ 


  {
#line 700
  return;
}
}
#line 702 "../gdsl_rbtree.c"
static long default_compare(gdsl_element_t e , void *v ) 
{ 


  {
#line 705
  return (0L);
}
}
#line 708 "../gdsl_rbtree.c"
static gdsl_rbtree_node_t rbtree_node_alloc(gdsl_rbtree_t t , gdsl_element_t e ) 
{ 
  gdsl_rbtree_node_t n ;
  void *tmp ;

  {
#line 713
  tmp = malloc(sizeof(struct gdsl_rbtree_node ));
#line 713
  n = (gdsl_rbtree_node_t )tmp;
#line 715
  if ((unsigned int )n == (unsigned int )((void *)0)) {
#line 717
    return ((gdsl_rbtree_node_t )((void *)0));
  }
#line 720
  n->left = & t->sent;
#line 721
  n->right = & t->sent;
#line 722
  n->parent = & t->sent;
#line 723
  n->content = e;
#line 724
  n->color = (gdsl_rbtree_node_color_t )0;
#line 726
  return (n);
}
}
#line 729 "../gdsl_rbtree.c"
static void rbtree_node_free(gdsl_rbtree_node_t n ) 
{ 


  {
#line 732
  free((void *)n);
#line 733
  return;
}
}
#line 735 "../gdsl_rbtree.c"
static void rbtree_destroy(gdsl_rbtree_node_t n , gdsl_rbtree_node_t sent , void (*free_f)(gdsl_element_t E ) ) 
{ 


  {
#line 738
  if ((unsigned int )n != (unsigned int )sent) {
#line 740
    rbtree_destroy(n->left, sent, free_f);
#line 741
    rbtree_destroy(n->right, sent, free_f);
#line 742
    (*free_f)(n->content);
#line 743
    free((void *)n);
  }
#line 745
  return;
}
}
#line 760 "../gdsl_rbtree.c"
static ulong___0 rbtree_height(gdsl_rbtree_node_t n , gdsl_rbtree_node_t sent ) 
{ 
  ulong___0 tmp___1 ;
  ulong___0 tmp___2 ;
  ulong___0 tmp___3 ;
  ulong___0 tmp___4 ;
  ulong___0 tmp___5 ;

  {
#line 763
  if ((unsigned int )n == (unsigned int )sent) {
#line 765
    return (0UL);
  }
#line 768
  if ((unsigned int )n->left == (unsigned int )sent) {
#line 768
    if ((unsigned int )n->right == (unsigned int )sent) {
#line 770
      return (0UL);
    }
  }
#line 773
  tmp___4 = rbtree_height(n->left, sent);
#line 773
  tmp___5 = rbtree_height(n->right, sent);
#line 773
  if (tmp___4 > tmp___5) {
#line 773
    tmp___1 = rbtree_height(n->left, sent);
#line 773
    tmp___3 = tmp___1;
  } else {
#line 773
    tmp___2 = rbtree_height(n->right, sent);
#line 773
    tmp___3 = tmp___2;
  }
#line 773
  return (1UL + tmp___3);
}
}
#line 778 "../gdsl_rbtree.c"
static gdsl_rbtree_node_t rbtree_left_rot(gdsl_rbtree_node_t n ) 
{ 
  gdsl_rbtree_node_t rn ;

  {
#line 783
  rn = n->right;
#line 784
  n->right = rn->left;
#line 787
  (rn->left)->parent = n;
#line 789
  rn->parent = n->parent;
#line 791
  if ((unsigned int )n == (unsigned int )(n->parent)->left) {
#line 793
    (n->parent)->left = rn;
  } else {
#line 797
    (n->parent)->right = rn;
  }
#line 800
  rn->left = n;
#line 801
  n->parent = rn;
#line 803
  return (rn);
}
}
#line 806 "../gdsl_rbtree.c"
static gdsl_rbtree_node_t rbtree_right_rot(gdsl_rbtree_node_t n ) 
{ 
  gdsl_rbtree_node_t ln ;

  {
#line 811
  ln = n->left;
#line 812
  n->left = ln->right;
#line 815
  (ln->right)->parent = n;
#line 817
  ln->parent = n->parent;
#line 819
  if ((unsigned int )n == (unsigned int )(n->parent)->right) {
#line 821
    (n->parent)->right = ln;
  } else {
#line 825
    (n->parent)->left = ln;
  }
#line 828
  ln->right = n;
#line 829
  n->parent = ln;
#line 831
  return (ln);
}
}
#line 834 "../gdsl_rbtree.c"
static gdsl_rbtree_node_t rbtree_search(gdsl_rbtree_node_t root , gdsl_rbtree_node_t sent ,
                                        long (*f)(gdsl_element_t const   E , void *VALUE ) ,
                                        void *v ) 
{ 
  int comp ;
  long tmp ;

  {
#line 840
  while ((unsigned int )root != (unsigned int )sent) {
#line 842
    tmp = (*f)((gdsl_element_t const   )root->content, v);
#line 842
    comp = (int )tmp;
#line 844
    if (comp == 0) {
#line 846
      return (root);
    }
#line 849
    if (comp > 0) {
#line 849
      root = root->left;
    } else {
#line 849
      root = root->right;
    }
  }
#line 852
  return ((gdsl_rbtree_node_t )((void *)0));
}
}
#line 855 "../gdsl_rbtree.c"
static gdsl_rbtree_node_t rbtree_next(gdsl_rbtree_t t , gdsl_rbtree_node_t n ) 
{ 


  {
#line 858
  n = n->right;
#line 860
  while ((unsigned int )n->left != (unsigned int )(& t->sent)) {
#line 862
    n = n->left;
  }
#line 865
  return (n);
}
}
#line 868 "../gdsl_rbtree.c"
static gdsl_element_t rbtree_prefix_parse(gdsl_rbtree_node_t root , gdsl_rbtree_node_t sent ,
                                          int (*map_f)(gdsl_element_t const   E ,
                                                       gdsl_location_t LOCATION ,
                                                       void *USER_DATA ) , void *d ) 
{ 
  gdsl_element_t e ;
  gdsl_location_t tmp ;
  int tmp___0 ;

  {
#line 872
  if ((unsigned int )root != (unsigned int )sent) {
#line 874
    e = root->content;
#line 876
    tmp = get_location___2(root, sent);
#line 876
    tmp___0 = (*map_f)((gdsl_element_t const   )e, tmp, d);
#line 876
    if (tmp___0 == 0) {
#line 878
      return (e);
    }
#line 881
    rbtree_prefix_parse(root->left, sent, map_f, d);
#line 882
    rbtree_prefix_parse(root->right, sent, map_f, d);
  }
#line 885
  return ((void *)0);
}
}
#line 888 "../gdsl_rbtree.c"
static gdsl_element_t rbtree_infix_parse(gdsl_rbtree_node_t root , gdsl_rbtree_node_t sent ,
                                         int (*map_f)(gdsl_element_t const   E , gdsl_location_t LOCATION ,
                                                      void *USER_DATA ) , void *d ) 
{ 
  gdsl_element_t e ;
  gdsl_location_t tmp ;
  int tmp___0 ;

  {
#line 892
  if ((unsigned int )root != (unsigned int )sent) {
#line 896
    rbtree_infix_parse(root->left, sent, map_f, d);
#line 898
    e = root->content;
#line 900
    tmp = get_location___2(root, sent);
#line 900
    tmp___0 = (*map_f)((gdsl_element_t const   )e, tmp, d);
#line 900
    if (tmp___0 == 0) {
#line 902
      return (e);
    }
#line 905
    rbtree_infix_parse(root->right, sent, map_f, d);
  }
#line 908
  return ((void *)0);
}
}
#line 911 "../gdsl_rbtree.c"
static gdsl_element_t rbtree_postfix_parse(gdsl_rbtree_node_t root , gdsl_rbtree_node_t sent ,
                                           int (*map_f)(gdsl_element_t const   E ,
                                                        gdsl_location_t LOCATION ,
                                                        void *USER_DATA ) , void *d ) 
{ 
  gdsl_element_t e ;
  gdsl_location_t tmp ;
  int tmp___0 ;

  {
#line 915
  if ((unsigned int )root != (unsigned int )sent) {
#line 919
    rbtree_postfix_parse(root->left, sent, map_f, d);
#line 920
    rbtree_postfix_parse(root->right, sent, map_f, d);
#line 922
    e = root->content;
#line 924
    tmp = get_location___2(root, sent);
#line 924
    tmp___0 = (*map_f)((gdsl_element_t const   )e, tmp, d);
#line 924
    if (tmp___0 == 0) {
#line 926
      return (e);
    }
  }
#line 930
  return ((void *)0);
}
}
#line 933 "../gdsl_rbtree.c"
static void rbtree_write(gdsl_rbtree_node_t n , gdsl_rbtree_node_t sent , void (*write_f)(gdsl_element_t const   E ,
                                                                                          FILE *OUTPUT_FILE ,
                                                                                          gdsl_location_t LOCATION ,
                                                                                          void *USER_DATA ) ,
                         FILE *file , void *d ) 
{ 
  gdsl_location_t tmp ;

  {
#line 937
  if ((unsigned int )n != (unsigned int )sent) {
#line 939
    rbtree_write(n->left, sent, write_f, file, d);
#line 940
    tmp = get_location___2(n, sent);
#line 940
    (*write_f)((gdsl_element_t const   )n->content, file, tmp, d);
#line 941
    rbtree_write(n->right, sent, write_f, file, d);
  }
#line 943
  return;
}
}
#line 945 "../gdsl_rbtree.c"
static void rbtree_write_xml(gdsl_rbtree_node_t n , gdsl_rbtree_node_t sent , void (*write_f)(gdsl_element_t const   E ,
                                                                                              FILE *OUTPUT_FILE ,
                                                                                              gdsl_location_t LOCATION ,
                                                                                              void *USER_DATA ) ,
                             FILE *file , void *d ) 
{ 
  char const   *tmp ;
  gdsl_location_t tmp___0 ;

  {
#line 949
  if ((unsigned int )n != (unsigned int )sent) {
#line 951
    rbtree_write_xml(n->left, sent, write_f, file, d);
#line 953
    if ((unsigned int )n->left == (unsigned int )sent) {
#line 953
      if ((unsigned int )n->right == (unsigned int )sent) {
#line 955
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_RBTREE_LEAF REF=\"%p\"",
                (void *)n);
      } else {
#line 959
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_RBTREE_NODE REF=\"%p\"",
                (void *)n);
      }
    } else {
#line 959
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_RBTREE_NODE REF=\"%p\"",
              (void *)n);
    }
#line 962
    if ((unsigned int )n->left != (unsigned int )sent) {
#line 962
      goto _L;
    } else
#line 962
    if ((unsigned int )n->right != (unsigned int )sent) {
      _L: /* CIL Label */ 
#line 964
      if ((unsigned int )n->left != (unsigned int )sent) {
#line 966
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )" LEFT=\"%p\"",
                (void *)n->left);
      } else {
#line 970
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )" LEFT=\"\"");
      }
#line 973
      if ((unsigned int )n->right != (unsigned int )sent) {
#line 975
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )" RIGHT=\"%p\"",
                (void *)n->right);
      } else {
#line 979
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )" RIGHT=\"\"");
      }
    }
#line 983
    if ((unsigned int )n->parent != (unsigned int )sent) {
#line 985
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )" PARENT=\"%p\"",
              (void *)n->parent);
    } else {
#line 989
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )" PARENT=\"\"");
    }
#line 992
    if ((unsigned int )n->color == 0U) {
#line 992
      tmp = "RED";
    } else {
#line 992
      tmp = "BLACK";
    }
#line 992
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )" COLOR=\"%s\">",
            tmp);
#line 994
    if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 994
      if ((unsigned int )n->content != (unsigned int )((void *)0)) {
#line 996
        tmp___0 = get_location___2(n, sent);
#line 996
        (*write_f)((gdsl_element_t const   )n->content, file, tmp___0, d);
      }
    }
#line 999
    if ((unsigned int )n->left == (unsigned int )sent) {
#line 999
      if ((unsigned int )n->right == (unsigned int )sent) {
#line 1001
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_RBTREE_LEAF>\n");
      } else {
#line 1005
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_RBTREE_NODE>\n");
      }
    } else {
#line 1005
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_RBTREE_NODE>\n");
    }
#line 1008
    rbtree_write_xml(n->right, sent, write_f, file, d);
  }
#line 1010
  return;
}
}
#line 1012 "../gdsl_rbtree.c"
static void rbtree_dump(gdsl_rbtree_node_t n , gdsl_rbtree_node_t sent , void (*write_f)(gdsl_element_t const   E ,
                                                                                         FILE *OUTPUT_FILE ,
                                                                                         gdsl_location_t LOCATION ,
                                                                                         void *USER_DATA ) ,
                        FILE *file , void *d ) 
{ 
  char const   *tmp ;
  gdsl_location_t tmp___0 ;

  {
#line 1016
  if ((unsigned int )n != (unsigned int )sent) {
#line 1018
    rbtree_dump(n->left, sent, write_f, file, d);
#line 1020
    if ((unsigned int )n->left == (unsigned int )sent) {
#line 1020
      if ((unsigned int )n->right == (unsigned int )sent) {
#line 1022
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_RBTREE_LEAF REF=\"%p\"",
                (void *)n);
      } else {
#line 1026
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_RBTREE_NODE REF=\"%p\"",
                (void *)n);
      }
    } else {
#line 1026
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_RBTREE_NODE REF=\"%p\"",
              (void *)n);
    }
#line 1029
    if (n->content) {
#line 1031
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )" CONTENT=\"%p\"",
              n->content);
    } else {
#line 1035
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )" CONTENT=\"\"");
    }
#line 1038
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )" LEFT=\"%p\" RIGHT=\"%p\"",
            (void *)n->left, (void *)n->right);
#line 1041
    if (n->parent) {
#line 1043
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )" PARENT=\"%p\"",
              (void *)n->parent);
    } else {
#line 1047
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )" PARENT=\"\"");
    }
#line 1050
    if ((unsigned int )n->color == 0U) {
#line 1050
      tmp = "RED";
    } else {
#line 1050
      tmp = "BLACK";
    }
#line 1050
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )" COLOR=\"%s\">",
            tmp);
#line 1052
    if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 1052
      if ((unsigned int )n->content != (unsigned int )((void *)0)) {
#line 1054
        tmp___0 = get_location___2(n, sent);
#line 1054
        (*write_f)((gdsl_element_t const   )n->content, file, tmp___0, d);
      }
    }
#line 1057
    if ((unsigned int )n->left == (unsigned int )sent) {
#line 1057
      if ((unsigned int )n->right == (unsigned int )sent) {
#line 1059
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_RBTREE_LEAF>\n");
      } else {
#line 1063
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_RBTREE_NODE>\n");
      }
    } else {
#line 1063
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_RBTREE_NODE>\n");
    }
#line 1066
    rbtree_dump(n->right, sent, write_f, file, d);
  }
#line 1068
  return;
}
}
#line 1070 "../gdsl_rbtree.c"
static gdsl_location_t get_location___2(gdsl_rbtree_node_t n , gdsl_rbtree_node_t s ) 
{ 
  gdsl_location_t location ;

  {
#line 1073
  location = (gdsl_location_t )0;
#line 1075
  if ((unsigned int )n->left == (unsigned int )s) {
#line 1075
    if ((unsigned int )n->right == (unsigned int )s) {
#line 1077
      location = (gdsl_location_t )((unsigned int )location | 2U);
    }
  }
#line 1080
  if ((unsigned int )n->parent == (unsigned int )s) {
#line 1082
    location = (gdsl_location_t )((unsigned int )location | 1U);
  }
#line 1085
  return (location);
}
}
#line 1 "cil-dSreWWSp.o"
#pragma merger("0","/tmp/cil-az8G29Qw.i","")
#line 261 "../_gdsl_node.h"
extern void _gdsl_node_write(_gdsl_node_t const   n , void (* const  write_f)(_gdsl_node_t const   NODE ,
                                                                              FILE *OUTPUT_FILE ,
                                                                              void *USER_DATA ) ,
                             FILE *file , void *user_data ) ;
#line 284
extern void _gdsl_node_write_xml(_gdsl_node_t const   n , void (* const  write_f)(_gdsl_node_t const   NODE ,
                                                                                  FILE *OUTPUT_FILE ,
                                                                                  void *USER_DATA ) ,
                                 FILE *file , void *user_data ) ;
#line 307
extern void _gdsl_node_dump(_gdsl_node_t const   n , void (* const  write_f)(_gdsl_node_t const   NODE ,
                                                                             FILE *OUTPUT_FILE ,
                                                                             void *USER_DATA ) ,
                            FILE *file , void *user_data ) ;
#line 73 "../_gdsl_list.h"
extern _gdsl_list_t _gdsl_list_alloc(gdsl_element_t const   e ) ;
#line 90
extern void _gdsl_list_free(_gdsl_list_t list , void (* const  free_f)(gdsl_element_t E ) ) ;
#line 108
extern bool _gdsl_list_is_empty(_gdsl_list_t const   list ) ;
#line 119
extern ulong___0 _gdsl_list_get_size(_gdsl_list_t const   list ) ;
#line 138
extern void _gdsl_list_link(_gdsl_list_t list_1 , _gdsl_list_t list_2 ) ;
#line 155
extern void _gdsl_list_insert_after(_gdsl_list_t list , _gdsl_list_t prev ) ;
#line 172
extern void _gdsl_list_insert_before(_gdsl_list_t list , _gdsl_list_t succ ) ;
#line 212
extern _gdsl_list_t _gdsl_list_search(_gdsl_list_t const   list , long (* const  comp_f)(gdsl_element_t const   E ,
                                                                                         void *VALUE ) ,
                                      void *user_data ) ;
#line 239
extern _gdsl_list_t _gdsl_list_map_forward(_gdsl_list_t const   list , int (* const  map_f)(_gdsl_node_t const   NODE ,
                                                                                            void *USER_DATA ) ,
                                           void *user_data ) ;
#line 262
extern _gdsl_list_t _gdsl_list_map_backward(_gdsl_list_t const   list , int (* const  map_f)(_gdsl_node_t const   NODE ,
                                                                                             void *USER_DATA ) ,
                                            void *user_data ) ;
#line 288
extern void _gdsl_list_write(_gdsl_list_t const   list , void (* const  write_f)(_gdsl_node_t const   NODE ,
                                                                                 FILE *OUTPUT_FILE ,
                                                                                 void *USER_DATA ) ,
                             FILE *file , void *user_data ) ;
#line 313
extern void _gdsl_list_write_xml(_gdsl_list_t const   list , void (* const  write_f)(_gdsl_node_t const   NODE ,
                                                                                     FILE *OUTPUT_FILE ,
                                                                                     void *USER_DATA ) ,
                                 FILE *file , void *user_data ) ;
#line 337
extern void _gdsl_list_dump(_gdsl_list_t const   list , void (* const  write_f)(_gdsl_node_t const   NODE ,
                                                                                FILE *OUTPUT_FILE ,
                                                                                void *USER_DATA ) ,
                            FILE *file , void *user_data ) ;
#line 44 "../_gdsl_list.c"
extern _gdsl_list_t _gdsl_list_alloc(gdsl_element_t const   e ) 
{ 
  _gdsl_list_t list ;

  {
#line 49
  list = _gdsl_node_alloc();
#line 51
  if ((unsigned int )list == (unsigned int )((void *)0)) {
#line 53
    return ((_gdsl_list_t )((void *)0));
  }
#line 56
  _gdsl_node_set_content(list, e);
#line 58
  return (list);
}
}
#line 61 "../_gdsl_list.c"
extern void _gdsl_list_free(_gdsl_list_t list , void (* const  free_f)(gdsl_element_t E ) ) 
{ 
  _gdsl_node_t save ;
  gdsl_element_t tmp ;

  {
#line 66
  if ((unsigned int )free_f != (unsigned int )((void *)0)) {
#line 68
    while ((unsigned int )list != (unsigned int )((void *)0)) {
#line 70
      save = _gdsl_node_get_succ((_gdsl_node_t const   )list);
#line 71
      tmp = _gdsl_node_get_content((_gdsl_node_t const   )list);
#line 71
      (*free_f)(tmp);
#line 72
      _gdsl_node_free(list);
#line 73
      list = save;
    }
#line 76
    return;
  }
#line 79
  while ((unsigned int )list != (unsigned int )((void *)0)) {
#line 81
    save = _gdsl_node_get_succ((_gdsl_node_t const   )list);
#line 82
    _gdsl_node_free(list);
#line 83
    list = save;
  }
#line 85
  return;
}
}
#line 91 "../_gdsl_list.c"
extern bool _gdsl_list_is_empty(_gdsl_list_t const   list ) 
{ 


  {
#line 94
  return ((bool )((unsigned int )list == (unsigned int )((void *)0)));
}
}
#line 97 "../_gdsl_list.c"
extern ulong___0 _gdsl_list_get_size(_gdsl_list_t const   list ) 
{ 
  ulong___0 card ;
  _gdsl_node_t save ;

  {
#line 103
  card = (ulong___0 )0;
#line 105
  save = (_gdsl_node_t )list;
#line 105
  while ((unsigned int )save != (unsigned int )((void *)0)) {
#line 107
    card ++;
#line 105
    save = _gdsl_node_get_succ((_gdsl_node_t const   )save);
  }
#line 110
  return (card);
}
}
#line 117 "../_gdsl_list.c"
extern void _gdsl_list_link(_gdsl_list_t list_1 , _gdsl_list_t list_2 ) 
{ 
  _gdsl_node_t tmp ;
  _gdsl_node_t tmp___0 ;

  {
#line 125
  tmp = list_1;
#line 127
  while (1) {
#line 127
    tmp___0 = _gdsl_node_get_succ((_gdsl_node_t const   )tmp);
#line 127
    if (! ((unsigned int )tmp___0 != (unsigned int )((void *)0))) {
#line 127
      break;
    }
#line 129
    tmp = _gdsl_node_get_succ((_gdsl_node_t const   )tmp);
  }
#line 132
  _gdsl_node_link(tmp, list_2);
#line 133
  return;
}
}
#line 135 "../_gdsl_list.c"
extern void _gdsl_list_insert_after(_gdsl_list_t list , _gdsl_list_t prev ) 
{ 
  _gdsl_node_t prev_succ ;

  {
#line 143
  prev_succ = _gdsl_node_get_succ((_gdsl_node_t const   )prev);
#line 144
  _gdsl_node_link(prev, list);
#line 146
  if ((unsigned int )prev_succ != (unsigned int )((void *)0)) {
#line 148
    _gdsl_list_link(list, prev_succ);
  }
#line 150
  return;
}
}
#line 152 "../_gdsl_list.c"
extern void _gdsl_list_insert_before(_gdsl_list_t list , _gdsl_list_t succ ) 
{ 
  _gdsl_node_t prev_succ ;

  {
#line 160
  prev_succ = _gdsl_node_get_pred((_gdsl_node_t const   )succ);
#line 161
  if ((unsigned int )prev_succ != (unsigned int )((void *)0)) {
#line 163
    _gdsl_node_link(prev_succ, list);
  }
#line 166
  _gdsl_list_link(list, succ);
#line 167
  return;
}
}
#line 169 "../_gdsl_list.c"
extern void _gdsl_list_remove(_gdsl_node_t node ) 
{ 
  _gdsl_node_t succ ;
  _gdsl_node_t pred ;

  {
#line 177
  succ = _gdsl_node_get_succ((_gdsl_node_t const   )node);
#line 178
  pred = _gdsl_node_get_pred((_gdsl_node_t const   )node);
#line 180
  if ((unsigned int )succ != (unsigned int )((void *)0)) {
#line 182
    _gdsl_node_set_pred(succ, (_gdsl_node_t const   )pred);
  }
#line 185
  if ((unsigned int )pred != (unsigned int )((void *)0)) {
#line 187
    _gdsl_node_set_succ(pred, (_gdsl_node_t const   )succ);
  }
#line 190
  _gdsl_node_set_pred(node, (_gdsl_node_t const   )((void *)0));
#line 191
  _gdsl_node_set_succ(node, (_gdsl_node_t const   )((void *)0));
#line 192
  return;
}
}
#line 198 "../_gdsl_list.c"
extern _gdsl_list_t _gdsl_list_search(_gdsl_list_t const   list , long (* const  comp_f)(gdsl_element_t const   E ,
                                                                                         void *VALUE ) ,
                                      void *user_data ) 
{ 
  _gdsl_node_t tmp ;
  gdsl_element_t tmp___0 ;
  long tmp___1 ;

  {
#line 206
  tmp = (_gdsl_node_t )list;
#line 206
  while ((unsigned int )tmp != (unsigned int )((void *)0)) {
#line 208
    tmp___0 = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 208
    tmp___1 = (*comp_f)((gdsl_element_t const   )tmp___0, user_data);
#line 208
    if (tmp___1 == 0L) {
#line 210
      return (tmp);
    }
#line 206
    tmp = _gdsl_node_get_succ((_gdsl_node_t const   )tmp);
  }
#line 214
  return ((_gdsl_list_t )((void *)0));
}
}
#line 221 "../_gdsl_list.c"
extern _gdsl_list_t _gdsl_list_map_forward(_gdsl_list_t const   list , int (* const  map_f)(_gdsl_node_t const   NODE ,
                                                                                            void *USER_DATA ) ,
                                           void *user_data ) 
{ 
  _gdsl_node_t tmp ;
  int tmp___0 ;

  {
#line 229
  tmp = (_gdsl_node_t )list;
#line 229
  while ((unsigned int )tmp != (unsigned int )((void *)0)) {
#line 231
    tmp___0 = (*map_f)((_gdsl_node_t const   )tmp, user_data);
#line 231
    if (tmp___0 == 0) {
#line 233
      return (tmp);
    }
#line 229
    tmp = _gdsl_node_get_succ((_gdsl_node_t const   )tmp);
  }
#line 237
  return ((_gdsl_list_t )((void *)0));
}
}
#line 240 "../_gdsl_list.c"
extern _gdsl_list_t _gdsl_list_map_backward(_gdsl_list_t const   list , int (* const  map_f)(_gdsl_node_t const   NODE ,
                                                                                             void *USER_DATA ) ,
                                            void *user_data ) 
{ 
  _gdsl_node_t tmp ;
  _gdsl_node_t tmp___0 ;
  int tmp___1 ;

  {
#line 250
  tmp = (_gdsl_node_t )list;
#line 251
  while (1) {
#line 251
    tmp___0 = _gdsl_node_get_succ((_gdsl_node_t const   )tmp);
#line 251
    if (! ((unsigned int )tmp___0 != (unsigned int )((void *)0))) {
#line 251
      break;
    }
#line 253
    tmp = _gdsl_node_get_succ((_gdsl_node_t const   )tmp);
  }
#line 256
  while ((unsigned int )tmp != (unsigned int )((void *)0)) {
#line 258
    tmp___1 = (*map_f)((_gdsl_node_t const   )tmp, user_data);
#line 258
    if (tmp___1 == 0) {
#line 260
      return (tmp);
    }
#line 263
    tmp = _gdsl_node_get_pred((_gdsl_node_t const   )tmp);
  }
#line 266
  return ((_gdsl_list_t )((void *)0));
}
}
#line 273 "../_gdsl_list.c"
extern void _gdsl_list_write(_gdsl_list_t const   list , void (* const  write_f)(_gdsl_node_t const   NODE ,
                                                                                 FILE *OUTPUT_FILE ,
                                                                                 void *USER_DATA ) ,
                             FILE *file , void *user_data ) 
{ 
  _gdsl_node_t tmp ;

  {
#line 283
  tmp = (_gdsl_node_t )list;
#line 283
  while ((unsigned int )tmp != (unsigned int )((void *)0)) {
#line 285
    _gdsl_node_write((_gdsl_node_t const   )tmp, write_f, file, user_data);
#line 283
    tmp = _gdsl_node_get_succ((_gdsl_node_t const   )tmp);
  }
#line 287
  return;
}
}
#line 289 "../_gdsl_list.c"
extern void _gdsl_list_write_xml(_gdsl_list_t const   list , void (* const  write_f)(_gdsl_node_t const   NODE ,
                                                                                     FILE *OUTPUT_FILE ,
                                                                                     void *USER_DATA ) ,
                                 FILE *file , void *user_data ) 
{ 
  _gdsl_node_t tmp ;

  {
#line 298
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<_GDSL_LIST>\n");
#line 300
  tmp = (_gdsl_node_t )list;
#line 300
  while ((unsigned int )tmp != (unsigned int )((void *)0)) {
#line 302
    _gdsl_node_write_xml((_gdsl_node_t const   )tmp, write_f, file, user_data);
#line 300
    tmp = _gdsl_node_get_succ((_gdsl_node_t const   )tmp);
  }
#line 305
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</_GDSL_LIST>\n");
#line 306
  return;
}
}
#line 308 "../_gdsl_list.c"
extern void _gdsl_list_dump(_gdsl_list_t const   list , void (* const  write_f)(_gdsl_node_t const   NODE ,
                                                                                FILE *OUTPUT_FILE ,
                                                                                void *USER_DATA ) ,
                            FILE *file , void *user_data ) 
{ 
  _gdsl_node_t tmp ;

  {
#line 317
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<_GDSL_LIST REF=\"%p\">\n",
          (void *)list);
#line 319
  tmp = (_gdsl_node_t )list;
#line 319
  while ((unsigned int )tmp != (unsigned int )((void *)0)) {
#line 321
    _gdsl_node_dump((_gdsl_node_t const   )tmp, write_f, file, user_data);
#line 319
    tmp = _gdsl_node_get_succ((_gdsl_node_t const   )tmp);
  }
#line 324
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</_GDSL_LIST>\n");
#line 325
  return;
}
}
#line 1 "cil-rhJYSnom.o"
#pragma merger("0","/tmp/cil-YuIHsSM_.i","")
#line 85 "../gdsl_bstree.h"
extern gdsl_bstree_t gdsl_bstree_alloc(char const   *name , gdsl_element_t (* const  alloc_f)(void *USER_DATA ) ,
                                       void (*free_f)(gdsl_element_t E ) , long (*comp_f)(gdsl_element_t const   E ,
                                                                                          void *VALUE ) ) ;
#line 105
extern void gdsl_bstree_free(gdsl_bstree_t t ) ;
#line 123
extern void gdsl_bstree_flush(gdsl_bstree_t t ) ;
#line 140
extern char const   *gdsl_bstree_get_name(gdsl_bstree_t const   t ) ;
#line 152
extern bool gdsl_bstree_is_empty(gdsl_bstree_t const   t ) ;
#line 163
extern gdsl_element_t gdsl_bstree_get_root(gdsl_bstree_t const   t ) ;
#line 175
extern ulong___0 gdsl_bstree_get_size(gdsl_bstree_t const   t ) ;
#line 187
extern ulong___0 gdsl_bstree_get_height(gdsl_bstree_t const   t ) ;
#line 208
extern gdsl_bstree_t gdsl_bstree_set_name(gdsl_bstree_t t , char const   *name ) ;
#line 235
extern gdsl_element_t gdsl_bstree_insert(gdsl_bstree_t t , void *v , int *rc ) ;
#line 259
extern gdsl_element_t gdsl_bstree_remove(gdsl_bstree_t t , void *v ) ;
#line 283
extern gdsl_bstree_t gdsl_bstree_delete(gdsl_bstree_t t , void *v ) ;
#line 311
extern gdsl_element_t gdsl_bstree_search(gdsl_bstree_t const   t , long (*f)(gdsl_element_t const   E ,
                                                                             void *VALUE ) ,
                                         void *v ) ;
#line 339
extern gdsl_element_t gdsl_bstree_map_prefix(gdsl_bstree_t const   t , int (*map_f)(gdsl_element_t const   E ,
                                                                                    gdsl_location_t LOCATION ,
                                                                                    void *USER_DATA ) ,
                                             void *d ) ;
#line 363
extern gdsl_element_t gdsl_bstree_map_infix(gdsl_bstree_t const   t , int (*map_f)(gdsl_element_t const   E ,
                                                                                   gdsl_location_t LOCATION ,
                                                                                   void *USER_DATA ) ,
                                            void *d ) ;
#line 387
extern gdsl_element_t gdsl_bstree_map_postfix(gdsl_bstree_t const   t , int (*map_f)(gdsl_element_t const   E ,
                                                                                     gdsl_location_t LOCATION ,
                                                                                     void *USER_DATA ) ,
                                              void *d ) ;
#line 413
extern void gdsl_bstree_write(gdsl_bstree_t const   t , void (*write_f)(gdsl_element_t const   E ,
                                                                        FILE *OUTPUT_FILE ,
                                                                        gdsl_location_t LOCATION ,
                                                                        void *USER_DATA ) ,
                              FILE *file , void *d ) ;
#line 438
extern void gdsl_bstree_write_xml(gdsl_bstree_t const   t , void (*write_f)(gdsl_element_t const   E ,
                                                                            FILE *OUTPUT_FILE ,
                                                                            gdsl_location_t LOCATION ,
                                                                            void *USER_DATA ) ,
                                  FILE *file , void *d ) ;
#line 462
extern void gdsl_bstree_dump(gdsl_bstree_t const   t , void (*write_f)(gdsl_element_t const   E ,
                                                                       FILE *OUTPUT_FILE ,
                                                                       gdsl_location_t LOCATION ,
                                                                       void *USER_DATA ) ,
                             FILE *file , void *d ) ;
#line 58 "../gdsl_bstree.c"
static gdsl_element_t default_alloc___4(void *e ) ;
#line 61
static void default_free___4(gdsl_element_t e ) ;
#line 64
static long default_comp___1(gdsl_element_t e , void *key ) ;
#line 67
static void bstree_free(_gdsl_bintree_t n , _gdsl_bintree_t sent , void (*f)(gdsl_element_t E ) ) ;
#line 70
static ulong___0 bstree_height(_gdsl_bintree_t n , _gdsl_bintree_t sent ) ;
#line 73
static _gdsl_bintree_t bstree_search(_gdsl_bintree_t root , _gdsl_bintree_t sent ,
                                     long (*f)(gdsl_element_t const   E , void *VALUE ) ,
                                     void *v ) ;
#line 77
static _gdsl_bintree_t bstree_next(gdsl_bstree_t t , _gdsl_bintree_t n ) ;
#line 80
static gdsl_element_t bstree_prefix_parse(_gdsl_bintree_t root , _gdsl_bintree_t sent ,
                                          int (*map_f)(gdsl_element_t const   E ,
                                                       gdsl_location_t LOCATION ,
                                                       void *USER_DATA ) , void *user_data ) ;
#line 84
static gdsl_element_t bstree_infix_parse(_gdsl_bintree_t root , _gdsl_bintree_t sent ,
                                         int (*map_f)(gdsl_element_t const   E , gdsl_location_t LOCATION ,
                                                      void *USER_DATA ) , void *user_data ) ;
#line 88
static gdsl_element_t bstree_postfix_parse(_gdsl_bintree_t root , _gdsl_bintree_t sent ,
                                           int (*map_f)(gdsl_element_t const   E ,
                                                        gdsl_location_t LOCATION ,
                                                        void *USER_DATA ) , void *user_data ) ;
#line 92
static void bstree_write___0(_gdsl_bintree_t n , _gdsl_bintree_t sent , void (*write_f)(gdsl_element_t const   E ,
                                                                                        FILE *OUTPUT_FILE ,
                                                                                        gdsl_location_t LOCATION ,
                                                                                        void *USER_DATA ) ,
                             FILE *file , void *d ) ;
#line 96
static void bstree_write_xml(_gdsl_bintree_t n , _gdsl_bintree_t sent , void (*write_f)(gdsl_element_t const   E ,
                                                                                        FILE *OUTPUT_FILE ,
                                                                                        gdsl_location_t LOCATION ,
                                                                                        void *USER_DATA ) ,
                             FILE *file , void *d ) ;
#line 99
static void bstree_dump(_gdsl_bintree_t n , _gdsl_bintree_t sent , void (*write_f)(gdsl_element_t const   E ,
                                                                                   FILE *OUTPUT_FILE ,
                                                                                   gdsl_location_t LOCATION ,
                                                                                   void *USER_DATA ) ,
                        FILE *file , void *d ) ;
#line 103
static gdsl_location_t get_location___3(_gdsl_bintree_t n , _gdsl_bintree_t s ) ;
#line 110 "../gdsl_bstree.c"
extern gdsl_bstree_t gdsl_bstree_alloc(char const   *name , gdsl_element_t (* const  alloc_f)(void *USER_DATA ) ,
                                       void (*free_f)(gdsl_element_t E ) , long (*comp_f)(gdsl_element_t const   E ,
                                                                                          void *VALUE ) ) 
{ 
  gdsl_bstree_t t ;
  void *tmp ;
  gdsl_bstree_t tmp___0 ;

  {
#line 116
  tmp = malloc(sizeof(struct gdsl_bstree ));
#line 116
  t = (gdsl_bstree_t )tmp;
#line 118
  if ((unsigned int )t == (unsigned int )((void *)0)) {
#line 120
    return ((gdsl_bstree_t )((void *)0));
  }
#line 123
  t->sent = _gdsl_bintree_alloc((gdsl_element_t const   )((void *)0), (_gdsl_bintree_t const   )((void *)0),
                                (_gdsl_bintree_t const   )((void *)0));
#line 125
  if ((unsigned int )t->sent == (unsigned int )((void *)0)) {
#line 127
    free((void *)t);
#line 128
    return ((gdsl_bstree_t )((void *)0));
  }
#line 131
  _gdsl_bintree_set_parent(t->sent, (_gdsl_bintree_t const   )t->sent);
#line 132
  _gdsl_bintree_set_left(t->sent, (_gdsl_bintree_t const   )t->sent);
#line 133
  _gdsl_bintree_set_right(t->sent, (_gdsl_bintree_t const   )t->sent);
#line 135
  t->name = (char *)((void *)0);
#line 137
  tmp___0 = gdsl_bstree_set_name(t, name);
#line 137
  if ((unsigned int )tmp___0 == (unsigned int )((void *)0)) {
#line 139
    free((void *)t);
#line 140
    return ((gdsl_bstree_t )((void *)0));
  }
#line 143
  if (comp_f) {
#line 143
    t->comp_f = comp_f;
  } else {
#line 143
    t->comp_f = (long (*)(gdsl_element_t const   E , void *VALUE ))(& default_comp___1);
  }
#line 144
  if (alloc_f) {
#line 144
    t->alloc_f = (gdsl_element_t (*)(void *USER_DATA ))alloc_f;
  } else {
#line 144
    t->alloc_f = & default_alloc___4;
  }
#line 145
  if (free_f) {
#line 145
    t->free_f = free_f;
  } else {
#line 145
    t->free_f = & default_free___4;
  }
#line 147
  t->card = 0UL;
#line 149
  return (t);
}
}
#line 152 "../gdsl_bstree.c"
extern void gdsl_bstree_free(gdsl_bstree_t t ) 
{ 
  _gdsl_bintree_t tmp ;

  {
#line 157
  tmp = _gdsl_bintree_get_right((_gdsl_bintree_t const   )t->sent);
#line 157
  bstree_free(tmp, t->sent, t->free_f);
#line 164
  _gdsl_bintree_set_left(t->sent, (_gdsl_bintree_t const   )((void *)0));
#line 165
  _gdsl_bintree_set_right(t->sent, (_gdsl_bintree_t const   )((void *)0));
#line 166
  _gdsl_bintree_free(t->sent, (void (* const  )(gdsl_element_t E ))((void *)0));
#line 168
  if ((unsigned int )t->name != (unsigned int )((void *)0)) {
#line 170
    free((void *)t->name);
  }
#line 173
  free((void *)t);
#line 174
  return;
}
}
#line 176 "../gdsl_bstree.c"
extern void gdsl_bstree_flush(gdsl_bstree_t t ) 
{ 
  _gdsl_bintree_t tmp ;

  {
#line 181
  tmp = _gdsl_bintree_get_right((_gdsl_bintree_t const   )t->sent);
#line 181
  bstree_free(tmp, t->sent, t->free_f);
#line 182
  _gdsl_bintree_set_left(t->sent, (_gdsl_bintree_t const   )t->sent);
#line 183
  _gdsl_bintree_set_right(t->sent, (_gdsl_bintree_t const   )t->sent);
#line 184
  t->card = 0UL;
#line 185
  return;
}
}
#line 200 "../gdsl_bstree.c"
extern char const   *gdsl_bstree_get_name(gdsl_bstree_t const   t ) 
{ 


  {
#line 205
  return ((char const   *)t->name);
}
}
#line 208 "../gdsl_bstree.c"
extern bool gdsl_bstree_is_empty(gdsl_bstree_t const   t ) 
{ 


  {
#line 213
  return ((bool )(t->card == 0UL));
}
}
#line 216 "../gdsl_bstree.c"
extern gdsl_element_t gdsl_bstree_get_root(gdsl_bstree_t const   t ) 
{ 
  _gdsl_bintree_t tmp ;
  gdsl_element_t tmp___0 ;

  {
#line 221
  tmp = _gdsl_bintree_get_right((_gdsl_bintree_t const   )t->sent);
#line 221
  tmp___0 = _gdsl_bintree_get_content((_gdsl_bintree_t const   )tmp);
#line 221
  return (tmp___0);
}
}
#line 224 "../gdsl_bstree.c"
extern ulong___0 gdsl_bstree_get_size(gdsl_bstree_t const   t ) 
{ 


  {
#line 229
  return (t->card);
}
}
#line 232 "../gdsl_bstree.c"
extern ulong___0 gdsl_bstree_get_height(gdsl_bstree_t const   t ) 
{ 
  _gdsl_bintree_t tmp ;
  ulong___0 tmp___0 ;

  {
#line 237
  tmp = _gdsl_bintree_get_right((_gdsl_bintree_t const   )t->sent);
#line 237
  tmp___0 = bstree_height(tmp, t->sent);
#line 237
  return (tmp___0);
}
}
#line 244 "../gdsl_bstree.c"
extern gdsl_bstree_t gdsl_bstree_set_name(gdsl_bstree_t t , char const   *name ) 
{ 
  size_t tmp ;
  void *tmp___0 ;

  {
#line 249
  if ((unsigned int )t->name != (unsigned int )((void *)0)) {
#line 251
    free((void *)t->name);
#line 252
    t->name = (char *)((void *)0);
  }
#line 255
  if ((unsigned int )name != (unsigned int )((void *)0)) {
#line 257
    tmp = strlen(name);
#line 257
    tmp___0 = malloc((1U + tmp) * sizeof(char ));
#line 257
    t->name = (char *)tmp___0;
#line 259
    if ((unsigned int )t->name == (unsigned int )((void *)0)) {
#line 261
      return ((gdsl_bstree_t )((void *)0));
    }
#line 264
    strcpy((char * __restrict  )t->name, (char const   * __restrict  )name);
  }
#line 267
  return (t);
}
}
#line 270 "../gdsl_bstree.c"
extern gdsl_element_t gdsl_bstree_insert(gdsl_bstree_t t , void *v , int *rc ) 
{ 
  int comp ;
  gdsl_element_t e ;
  _gdsl_bintree_t root ;
  _gdsl_bintree_t parent ;
  _gdsl_bintree_t n ;
  gdsl_element_t tmp ;
  long tmp___0 ;
  gdsl_element_t tmp___1 ;
  _gdsl_bintree_t tmp___2 ;
  _gdsl_bintree_t tmp___3 ;

  {
#line 273
  comp = 0;
#line 282
  *rc = 2;
#line 285
  root = _gdsl_bintree_get_right((_gdsl_bintree_t const   )t->sent);
#line 286
  parent = t->sent;
#line 287
  while ((unsigned int )root != (unsigned int )t->sent) {
#line 289
    parent = root;
#line 290
    tmp = _gdsl_bintree_get_content((_gdsl_bintree_t const   )root);
#line 290
    tmp___0 = (*(t->comp_f))((gdsl_element_t const   )tmp, v);
#line 290
    comp = (int )tmp___0;
#line 293
    if (comp == 0) {
#line 295
      *rc = 3;
#line 296
      tmp___1 = _gdsl_bintree_get_content((_gdsl_bintree_t const   )root);
#line 296
      return (tmp___1);
    }
#line 299
    if (comp > 0) {
#line 299
      tmp___2 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )root);
#line 299
      root = tmp___2;
    } else {
#line 299
      tmp___3 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )root);
#line 299
      root = tmp___3;
    }
  }
#line 303
  e = (*(t->alloc_f))(v);
#line 305
  if ((unsigned int )e == (unsigned int )((void *)0)) {
#line 307
    *rc = -1;
#line 308
    return ((void *)0);
  }
#line 311
  n = _gdsl_bintree_alloc((gdsl_element_t const   )e, (_gdsl_bintree_t const   )((void *)0),
                          (_gdsl_bintree_t const   )((void *)0));
#line 313
  if ((unsigned int )n == (unsigned int )((void *)0)) {
#line 315
    (*(t->free_f))(e);
#line 316
    *rc = -1;
#line 317
    return ((void *)0);
  }
#line 321
  _gdsl_bintree_set_parent(n, (_gdsl_bintree_t const   )parent);
#line 322
  _gdsl_bintree_set_left(n, (_gdsl_bintree_t const   )t->sent);
#line 323
  _gdsl_bintree_set_right(n, (_gdsl_bintree_t const   )t->sent);
#line 325
  if ((unsigned int )parent == (unsigned int )t->sent) {
#line 327
    _gdsl_bintree_set_right(parent, (_gdsl_bintree_t const   )n);
  } else
#line 325
  if (comp < 0) {
#line 327
    _gdsl_bintree_set_right(parent, (_gdsl_bintree_t const   )n);
  } else {
#line 331
    _gdsl_bintree_set_left(parent, (_gdsl_bintree_t const   )n);
  }
#line 334
  (t->card) ++;
#line 336
  return (e);
}
}
#line 339 "../gdsl_bstree.c"
extern gdsl_element_t gdsl_bstree_remove(gdsl_bstree_t t , void *v ) 
{ 
  gdsl_element_t e ;
  _gdsl_bintree_t n ;
  _gdsl_bintree_t child ;
  _gdsl_bintree_t tmp ;
  _gdsl_bintree_t next ;
  _gdsl_bintree_t tmp___0 ;
  _gdsl_bintree_t nextparent ;
  _gdsl_bintree_t tmp___1 ;
  _gdsl_bintree_t tmp___2 ;
  _gdsl_bintree_t tmp___3 ;
  _gdsl_bintree_t tmp___4 ;
  _gdsl_bintree_t tmp___5 ;
  _gdsl_bintree_t tmp___6 ;
  _gdsl_bintree_t tmp___7 ;
  _gdsl_bintree_t tmp___8 ;
  _gdsl_bintree_t tmp___9 ;
  _gdsl_bintree_t tmp___10 ;
  _gdsl_bintree_t tmp___11 ;
  _gdsl_bintree_t tmp___13 ;
  _gdsl_bintree_t tmp___14 ;
  _gdsl_bintree_t tmp___15 ;
  _gdsl_bintree_t tmp___16 ;
  _gdsl_bintree_t tmp___17 ;
  _gdsl_bintree_t tmp___18 ;
  _gdsl_bintree_t tmp___19 ;
  _gdsl_bintree_t tmp___20 ;
  _gdsl_bintree_t tmp___21 ;
  _gdsl_bintree_t tmp___22 ;

  {
#line 349
  tmp = _gdsl_bintree_get_right((_gdsl_bintree_t const   )t->sent);
#line 349
  n = bstree_search(tmp, t->sent, t->comp_f, v);
#line 351
  if ((unsigned int )n == (unsigned int )((void *)0)) {
#line 353
    return ((void *)0);
  }
#line 357
  tmp___21 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )n);
#line 357
  if ((unsigned int )tmp___21 != (unsigned int )t->sent) {
#line 357
    tmp___22 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )n);
#line 357
    if ((unsigned int )tmp___22 != (unsigned int )t->sent) {
#line 359
      tmp___0 = bstree_next(t, n);
#line 359
      next = tmp___0;
#line 360
      tmp___1 = _gdsl_bintree_get_parent((_gdsl_bintree_t const   )next);
#line 360
      nextparent = tmp___1;
#line 362
      child = _gdsl_bintree_get_right((_gdsl_bintree_t const   )next);
#line 363
      _gdsl_bintree_set_parent(child, (_gdsl_bintree_t const   )nextparent);
#line 365
      tmp___2 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )nextparent);
#line 365
      if ((unsigned int )tmp___2 == (unsigned int )next) {
#line 367
        _gdsl_bintree_set_left(nextparent, (_gdsl_bintree_t const   )child);
      } else {
#line 371
        _gdsl_bintree_set_right(nextparent, (_gdsl_bintree_t const   )child);
      }
#line 374
      tmp___3 = _gdsl_bintree_get_parent((_gdsl_bintree_t const   )n);
#line 374
      _gdsl_bintree_set_parent(next, (_gdsl_bintree_t const   )tmp___3);
#line 375
      tmp___4 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )n);
#line 375
      _gdsl_bintree_set_left(next, (_gdsl_bintree_t const   )tmp___4);
#line 376
      tmp___5 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )n);
#line 376
      _gdsl_bintree_set_right(next, (_gdsl_bintree_t const   )tmp___5);
#line 377
      tmp___6 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )next);
#line 377
      _gdsl_bintree_set_parent(tmp___6, (_gdsl_bintree_t const   )next);
#line 378
      tmp___7 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )next);
#line 378
      _gdsl_bintree_set_parent(tmp___7, (_gdsl_bintree_t const   )next);
#line 380
      tmp___10 = _gdsl_bintree_get_parent((_gdsl_bintree_t const   )n);
#line 380
      tmp___11 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )tmp___10);
#line 380
      if ((unsigned int )tmp___11 == (unsigned int )n) {
#line 382
        tmp___8 = _gdsl_bintree_get_parent((_gdsl_bintree_t const   )n);
#line 382
        _gdsl_bintree_set_left(tmp___8, (_gdsl_bintree_t const   )next);
      } else {
#line 386
        tmp___9 = _gdsl_bintree_get_parent((_gdsl_bintree_t const   )n);
#line 386
        _gdsl_bintree_set_right(tmp___9, (_gdsl_bintree_t const   )next);
      }
    } else {
#line 357
      goto _L;
    }
  } else {
    _L: /* CIL Label */ 
#line 391
    tmp___15 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )n);
#line 391
    if ((unsigned int )tmp___15 != (unsigned int )t->sent) {
#line 391
      tmp___13 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )n);
#line 391
      child = tmp___13;
    } else {
#line 391
      tmp___14 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )n);
#line 391
      child = tmp___14;
    }
#line 393
    tmp___16 = _gdsl_bintree_get_parent((_gdsl_bintree_t const   )n);
#line 393
    _gdsl_bintree_set_parent(child, (_gdsl_bintree_t const   )tmp___16);
#line 395
    tmp___19 = _gdsl_bintree_get_parent((_gdsl_bintree_t const   )n);
#line 395
    tmp___20 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )tmp___19);
#line 395
    if ((unsigned int )n == (unsigned int )tmp___20) {
#line 397
      tmp___17 = _gdsl_bintree_get_parent((_gdsl_bintree_t const   )n);
#line 397
      _gdsl_bintree_set_left(tmp___17, (_gdsl_bintree_t const   )child);
    } else {
#line 401
      tmp___18 = _gdsl_bintree_get_parent((_gdsl_bintree_t const   )n);
#line 401
      _gdsl_bintree_set_right(tmp___18, (_gdsl_bintree_t const   )child);
    }
  }
#line 405
  (t->card) --;
#line 407
  e = _gdsl_bintree_get_content((_gdsl_bintree_t const   )n);
#line 408
  _gdsl_bintree_set_left(n, (_gdsl_bintree_t const   )((void *)0));
#line 409
  _gdsl_bintree_set_right(n, (_gdsl_bintree_t const   )((void *)0));
#line 410
  _gdsl_bintree_free(n, (void (* const  )(gdsl_element_t E ))((void *)0));
#line 412
  return (e);
}
}
#line 415 "../gdsl_bstree.c"
extern gdsl_bstree_t gdsl_bstree_delete(gdsl_bstree_t t , void *v ) 
{ 
  gdsl_element_t e ;

  {
#line 422
  e = gdsl_bstree_remove(t, v);
#line 424
  if ((unsigned int )e == (unsigned int )((void *)0)) {
#line 426
    return ((gdsl_bstree_t )((void *)0));
  }
#line 429
  (*(t->free_f))(e);
#line 431
  return (t);
}
}
#line 438 "../gdsl_bstree.c"
extern gdsl_element_t gdsl_bstree_search(gdsl_bstree_t const   t , long (*f)(gdsl_element_t const   E ,
                                                                             void *VALUE ) ,
                                         void *v ) 
{ 
  _gdsl_bintree_t n ;
  long (*tmp)(gdsl_element_t const   E , void *VALUE ) ;
  _gdsl_bintree_t tmp___0 ;
  gdsl_element_t tmp___1 ;
  void *tmp___2 ;

  {
#line 445
  if (f) {
#line 445
    tmp = f;
  } else {
#line 445
    tmp = t->comp_f;
  }
#line 445
  tmp___0 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )t->sent);
#line 445
  n = bstree_search(tmp___0, t->sent, tmp, v);
#line 447
  if ((unsigned int )n == (unsigned int )((void *)0)) {
#line 447
    tmp___2 = (void *)0;
  } else {
#line 447
    tmp___1 = _gdsl_bintree_get_content((_gdsl_bintree_t const   )n);
#line 447
    tmp___2 = tmp___1;
  }
#line 447
  return (tmp___2);
}
}
#line 454 "../gdsl_bstree.c"
extern gdsl_element_t gdsl_bstree_map_prefix(gdsl_bstree_t const   t , int (*map_f)(gdsl_element_t const   E ,
                                                                                    gdsl_location_t LOCATION ,
                                                                                    void *USER_DATA ) ,
                                             void *d ) 
{ 
  _gdsl_bintree_t tmp ;
  gdsl_element_t tmp___0 ;

  {
#line 461
  tmp = _gdsl_bintree_get_right((_gdsl_bintree_t const   )t->sent);
#line 461
  tmp___0 = bstree_prefix_parse(tmp, t->sent, map_f, d);
#line 461
  return (tmp___0);
}
}
#line 464 "../gdsl_bstree.c"
extern gdsl_element_t gdsl_bstree_map_infix(gdsl_bstree_t const   t , int (*map_f)(gdsl_element_t const   E ,
                                                                                   gdsl_location_t LOCATION ,
                                                                                   void *USER_DATA ) ,
                                            void *d ) 
{ 
  _gdsl_bintree_t tmp ;
  gdsl_element_t tmp___0 ;

  {
#line 470
  tmp = _gdsl_bintree_get_right((_gdsl_bintree_t const   )t->sent);
#line 470
  tmp___0 = bstree_infix_parse(tmp, t->sent, map_f, d);
#line 470
  return (tmp___0);
}
}
#line 473 "../gdsl_bstree.c"
extern gdsl_element_t gdsl_bstree_map_postfix(gdsl_bstree_t const   t , int (*map_f)(gdsl_element_t const   E ,
                                                                                     gdsl_location_t LOCATION ,
                                                                                     void *USER_DATA ) ,
                                              void *d ) 
{ 
  _gdsl_bintree_t tmp ;
  gdsl_element_t tmp___0 ;

  {
#line 480
  tmp = _gdsl_bintree_get_right((_gdsl_bintree_t const   )t->sent);
#line 480
  tmp___0 = bstree_postfix_parse(tmp, t->sent, map_f, d);
#line 480
  return (tmp___0);
}
}
#line 499 "../gdsl_bstree.c"
extern void gdsl_bstree_write(gdsl_bstree_t const   t , void (*write_f)(gdsl_element_t const   E ,
                                                                        FILE *OUTPUT_FILE ,
                                                                        gdsl_location_t LOCATION ,
                                                                        void *USER_DATA ) ,
                              FILE *file , void *d ) 
{ 
  _gdsl_bintree_t tmp ;

  {
#line 507
  tmp = _gdsl_bintree_get_right((_gdsl_bintree_t const   )t->sent);
#line 507
  bstree_write___0(tmp, t->sent, write_f, file, d);
#line 508
  return;
}
}
#line 510 "../gdsl_bstree.c"
extern void gdsl_bstree_write_xml(gdsl_bstree_t const   t , void (*write_f)(gdsl_element_t const   E ,
                                                                            FILE *OUTPUT_FILE ,
                                                                            gdsl_location_t LOCATION ,
                                                                            void *USER_DATA ) ,
                                  FILE *file , void *d ) 
{ 
  _gdsl_bintree_t tmp ;

  {
#line 517
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_BSTREE REF=\"%p\" NAME=\"%s\" CARD=\"%ld\">\n",
          (void *)t, t->name, t->card);
#line 520
  tmp = _gdsl_bintree_get_right((_gdsl_bintree_t const   )t->sent);
#line 520
  bstree_write_xml(tmp, t->sent, write_f, file, d);
#line 522
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_BSTREE>\n");
#line 523
  return;
}
}
#line 525 "../gdsl_bstree.c"
extern void gdsl_bstree_dump(gdsl_bstree_t const   t , void (*write_f)(gdsl_element_t const   E ,
                                                                       FILE *OUTPUT_FILE ,
                                                                       gdsl_location_t LOCATION ,
                                                                       void *USER_DATA ) ,
                             FILE *file , void *d ) 
{ 
  _gdsl_bintree_t tmp ;
  _gdsl_bintree_t tmp___0 ;
  _gdsl_bintree_t tmp___1 ;
  _gdsl_bintree_t tmp___2 ;

  {
#line 532
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_BSTREE REF=\"%p\" NAME=\"%s\" CARD=\"%ld\">\n",
          (void *)t, t->name, t->card);
#line 534
  tmp = _gdsl_bintree_get_parent((_gdsl_bintree_t const   )t->sent);
#line 534
  tmp___0 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )t->sent);
#line 534
  tmp___1 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )t->sent);
#line 534
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_BSTREE_SENT REF=\"%p\" LEFT=\"%p\" RIGHT=\"%p\" PARENT=\"%p\"/>\n",
          (void *)t->sent, (void *)tmp___1, (void *)tmp___0, (void *)tmp);
#line 538
  tmp___2 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )t->sent);
#line 538
  bstree_dump(tmp___2, t->sent, write_f, file, d);
#line 540
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_BSTREE>\n");
#line 541
  return;
}
}
#line 547 "../gdsl_bstree.c"
static gdsl_element_t default_alloc___4(void *e ) 
{ 


  {
#line 550
  return (e);
}
}
#line 553 "../gdsl_bstree.c"
static void default_free___4(gdsl_element_t e ) 
{ 


  {
#line 557
  return;
}
}
#line 559 "../gdsl_bstree.c"
static long default_comp___1(gdsl_element_t e , void *key ) 
{ 


  {
#line 562
  return (0L);
}
}
#line 565 "../gdsl_bstree.c"
static void bstree_free(_gdsl_bintree_t n , _gdsl_bintree_t sent , void (*f)(gdsl_element_t E ) ) 
{ 
  _gdsl_bintree_t tmp ;
  _gdsl_bintree_t tmp___0 ;
  gdsl_element_t tmp___1 ;

  {
#line 568
  if ((unsigned int )n != (unsigned int )sent) {
#line 570
    tmp = _gdsl_bintree_get_left((_gdsl_bintree_t const   )n);
#line 570
    bstree_free(tmp, sent, f);
#line 571
    tmp___0 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )n);
#line 571
    bstree_free(tmp___0, sent, f);
#line 572
    tmp___1 = _gdsl_bintree_get_content((_gdsl_bintree_t const   )n);
#line 572
    (*f)(tmp___1);
#line 573
    free((void *)n);
  }
#line 575
  return;
}
}
#line 577 "../gdsl_bstree.c"
static ulong___0 bstree_height(_gdsl_bintree_t n , _gdsl_bintree_t sent ) 
{ 
  _gdsl_bintree_t tmp ;
  _gdsl_bintree_t tmp___0 ;
  _gdsl_bintree_t tmp___5 ;
  ulong___0 tmp___6 ;
  _gdsl_bintree_t tmp___7 ;
  ulong___0 tmp___8 ;
  ulong___0 tmp___9 ;
  _gdsl_bintree_t tmp___10 ;
  ulong___0 tmp___11 ;
  _gdsl_bintree_t tmp___12 ;
  ulong___0 tmp___13 ;

  {
#line 580
  if ((unsigned int )n == (unsigned int )sent) {
#line 582
    return (0UL);
  }
#line 585
  tmp = _gdsl_bintree_get_left((_gdsl_bintree_t const   )n);
#line 585
  if ((unsigned int )tmp == (unsigned int )sent) {
#line 585
    tmp___0 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )n);
#line 585
    if ((unsigned int )tmp___0 == (unsigned int )sent) {
#line 587
      return (0UL);
    }
  }
#line 590
  tmp___10 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )n);
#line 590
  tmp___11 = bstree_height(tmp___10, sent);
#line 590
  tmp___12 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )n);
#line 590
  tmp___13 = bstree_height(tmp___12, sent);
#line 590
  if (tmp___11 > tmp___13) {
#line 590
    tmp___5 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )n);
#line 590
    tmp___6 = bstree_height(tmp___5, sent);
#line 590
    tmp___9 = tmp___6;
  } else {
#line 590
    tmp___7 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )n);
#line 590
    tmp___8 = bstree_height(tmp___7, sent);
#line 590
    tmp___9 = tmp___8;
  }
#line 590
  return (1UL + tmp___9);
}
}
#line 595 "../gdsl_bstree.c"
static _gdsl_bintree_t bstree_search(_gdsl_bintree_t root , _gdsl_bintree_t sent ,
                                     long (*f)(gdsl_element_t const   E , void *VALUE ) ,
                                     void *v ) 
{ 
  int comp ;
  gdsl_element_t tmp ;
  long tmp___0 ;

  {
#line 600
  while ((unsigned int )root != (unsigned int )sent) {
#line 602
    tmp = _gdsl_bintree_get_content((_gdsl_bintree_t const   )root);
#line 602
    tmp___0 = (*f)((gdsl_element_t const   )tmp, v);
#line 602
    comp = (int )tmp___0;
#line 604
    if (comp == 0) {
#line 606
      return (root);
    }
#line 609
    if (comp > 0) {
#line 611
      root = _gdsl_bintree_get_left((_gdsl_bintree_t const   )root);
    } else {
#line 615
      root = _gdsl_bintree_get_right((_gdsl_bintree_t const   )root);
    }
  }
#line 619
  return ((_gdsl_bintree_t )((void *)0));
}
}
#line 622 "../gdsl_bstree.c"
static _gdsl_bintree_t bstree_next(gdsl_bstree_t t , _gdsl_bintree_t n ) 
{ 
  _gdsl_bintree_t tmp ;

  {
#line 625
  n = _gdsl_bintree_get_right((_gdsl_bintree_t const   )n);
#line 627
  while (1) {
#line 627
    tmp = _gdsl_bintree_get_left((_gdsl_bintree_t const   )n);
#line 627
    if (! ((unsigned int )tmp != (unsigned int )t->sent)) {
#line 627
      break;
    }
#line 629
    n = _gdsl_bintree_get_left((_gdsl_bintree_t const   )n);
  }
#line 632
  return (n);
}
}
#line 635 "../gdsl_bstree.c"
static gdsl_element_t bstree_prefix_parse(_gdsl_bintree_t root , _gdsl_bintree_t sent ,
                                          int (*map_f)(gdsl_element_t const   E ,
                                                       gdsl_location_t LOCATION ,
                                                       void *USER_DATA ) , void *user_data ) 
{ 
  gdsl_element_t e ;
  gdsl_element_t tmp ;
  gdsl_location_t tmp___0 ;
  int tmp___1 ;
  _gdsl_bintree_t tmp___2 ;
  _gdsl_bintree_t tmp___3 ;

  {
#line 639
  if ((unsigned int )root != (unsigned int )sent) {
#line 641
    tmp = _gdsl_bintree_get_content((_gdsl_bintree_t const   )root);
#line 641
    e = tmp;
#line 643
    tmp___0 = get_location___3(root, sent);
#line 643
    tmp___1 = (*map_f)((gdsl_element_t const   )e, tmp___0, user_data);
#line 643
    if (tmp___1 == 0) {
#line 645
      return (e);
    }
#line 648
    tmp___2 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )root);
#line 648
    bstree_prefix_parse(tmp___2, sent, map_f, user_data);
#line 649
    tmp___3 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )root);
#line 649
    bstree_prefix_parse(tmp___3, sent, map_f, user_data);
  }
#line 652
  return ((void *)0);
}
}
#line 655 "../gdsl_bstree.c"
static gdsl_element_t bstree_infix_parse(_gdsl_bintree_t root , _gdsl_bintree_t sent ,
                                         int (*map_f)(gdsl_element_t const   E , gdsl_location_t LOCATION ,
                                                      void *USER_DATA ) , void *user_data ) 
{ 
  gdsl_element_t e ;
  _gdsl_bintree_t tmp ;
  gdsl_location_t tmp___0 ;
  int tmp___1 ;
  _gdsl_bintree_t tmp___2 ;

  {
#line 659
  if ((unsigned int )root != (unsigned int )sent) {
#line 663
    tmp = _gdsl_bintree_get_left((_gdsl_bintree_t const   )root);
#line 663
    bstree_infix_parse(tmp, sent, map_f, user_data);
#line 665
    e = _gdsl_bintree_get_content((_gdsl_bintree_t const   )root);
#line 667
    tmp___0 = get_location___3(root, sent);
#line 667
    tmp___1 = (*map_f)((gdsl_element_t const   )e, tmp___0, user_data);
#line 667
    if (tmp___1 == 0) {
#line 669
      return (e);
    }
#line 672
    tmp___2 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )root);
#line 672
    bstree_infix_parse(tmp___2, sent, map_f, user_data);
  }
#line 675
  return ((void *)0);
}
}
#line 678 "../gdsl_bstree.c"
static gdsl_element_t bstree_postfix_parse(_gdsl_bintree_t root , _gdsl_bintree_t sent ,
                                           int (*map_f)(gdsl_element_t const   E ,
                                                        gdsl_location_t LOCATION ,
                                                        void *USER_DATA ) , void *user_data ) 
{ 
  gdsl_element_t e ;
  _gdsl_bintree_t tmp ;
  _gdsl_bintree_t tmp___0 ;
  gdsl_location_t tmp___1 ;
  int tmp___2 ;

  {
#line 682
  if ((unsigned int )root != (unsigned int )sent) {
#line 686
    tmp = _gdsl_bintree_get_left((_gdsl_bintree_t const   )root);
#line 686
    bstree_postfix_parse(tmp, sent, map_f, user_data);
#line 687
    tmp___0 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )root);
#line 687
    bstree_postfix_parse(tmp___0, sent, map_f, user_data);
#line 689
    e = _gdsl_bintree_get_content((_gdsl_bintree_t const   )root);
#line 691
    tmp___1 = get_location___3(root, sent);
#line 691
    tmp___2 = (*map_f)((gdsl_element_t const   )e, tmp___1, user_data);
#line 691
    if (tmp___2 == 0) {
#line 693
      return (e);
    }
  }
#line 697
  return ((void *)0);
}
}
#line 700 "../gdsl_bstree.c"
static void bstree_write___0(_gdsl_bintree_t n , _gdsl_bintree_t sent , void (*write_f)(gdsl_element_t const   E ,
                                                                                        FILE *OUTPUT_FILE ,
                                                                                        gdsl_location_t LOCATION ,
                                                                                        void *USER_DATA ) ,
                             FILE *file , void *d ) 
{ 
  _gdsl_bintree_t tmp ;
  gdsl_location_t tmp___0 ;
  gdsl_element_t tmp___1 ;
  _gdsl_bintree_t tmp___2 ;

  {
#line 704
  if ((unsigned int )n != (unsigned int )sent) {
#line 706
    tmp = _gdsl_bintree_get_left((_gdsl_bintree_t const   )n);
#line 706
    bstree_write___0(tmp, sent, write_f, file, d);
#line 707
    tmp___0 = get_location___3(n, sent);
#line 707
    tmp___1 = _gdsl_bintree_get_content((_gdsl_bintree_t const   )n);
#line 707
    (*write_f)((gdsl_element_t const   )tmp___1, file, tmp___0, d);
#line 708
    tmp___2 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )n);
#line 708
    bstree_write___0(tmp___2, sent, write_f, file, d);
  }
#line 710
  return;
}
}
#line 712 "../gdsl_bstree.c"
static void bstree_write_xml(_gdsl_bintree_t n , _gdsl_bintree_t sent , void (*write_f)(gdsl_element_t const   E ,
                                                                                        FILE *OUTPUT_FILE ,
                                                                                        gdsl_location_t LOCATION ,
                                                                                        void *USER_DATA ) ,
                             FILE *file , void *d ) 
{ 
  _gdsl_bintree_t tmp ;
  _gdsl_bintree_t tmp___0 ;
  _gdsl_bintree_t tmp___1 ;
  _gdsl_bintree_t tmp___2 ;
  _gdsl_bintree_t tmp___3 ;
  _gdsl_bintree_t tmp___4 ;
  _gdsl_bintree_t tmp___5 ;
  _gdsl_bintree_t tmp___6 ;
  _gdsl_bintree_t tmp___7 ;
  _gdsl_bintree_t tmp___8 ;
  _gdsl_bintree_t tmp___9 ;
  gdsl_location_t tmp___10 ;
  gdsl_element_t tmp___11 ;
  _gdsl_bintree_t tmp___12 ;
  _gdsl_bintree_t tmp___13 ;
  _gdsl_bintree_t tmp___14 ;

  {
#line 716
  if ((unsigned int )n != (unsigned int )sent) {
#line 718
    tmp = _gdsl_bintree_get_left((_gdsl_bintree_t const   )n);
#line 718
    bstree_write_xml(tmp, sent, write_f, file, d);
#line 720
    tmp___0 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )n);
#line 720
    if ((unsigned int )tmp___0 == (unsigned int )sent) {
#line 720
      tmp___1 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )n);
#line 720
      if ((unsigned int )tmp___1 == (unsigned int )sent) {
#line 722
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_BSTREE_LEAF REF=\"%p\"",
                (void *)n);
      } else {
#line 726
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_BSTREE_NODE REF=\"%p\"",
                (void *)n);
      }
    } else {
#line 726
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_BSTREE_NODE REF=\"%p\"",
              (void *)n);
    }
#line 729
    tmp___6 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )n);
#line 729
    if ((unsigned int )tmp___6 != (unsigned int )sent) {
#line 729
      goto _L;
    } else {
#line 729
      tmp___7 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )n);
#line 729
      if ((unsigned int )tmp___7 != (unsigned int )sent) {
        _L: /* CIL Label */ 
#line 731
        tmp___3 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )n);
#line 731
        if ((unsigned int )tmp___3 != (unsigned int )sent) {
#line 733
          tmp___2 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )n);
#line 733
          fprintf((FILE * __restrict  )file, (char const   * __restrict  )" LEFT=\"%p\"",
                  (void *)tmp___2);
        } else {
#line 737
          fprintf((FILE * __restrict  )file, (char const   * __restrict  )" LEFT=\"\"");
        }
#line 740
        tmp___5 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )n);
#line 740
        if ((unsigned int )tmp___5 != (unsigned int )sent) {
#line 742
          tmp___4 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )n);
#line 742
          fprintf((FILE * __restrict  )file, (char const   * __restrict  )" RIGHT=\"%p\"",
                  (void *)tmp___4);
        } else {
#line 746
          fprintf((FILE * __restrict  )file, (char const   * __restrict  )" RIGHT=\"\"");
        }
      }
    }
#line 750
    tmp___9 = _gdsl_bintree_get_parent((_gdsl_bintree_t const   )n);
#line 750
    if ((unsigned int )tmp___9 != (unsigned int )sent) {
#line 752
      tmp___8 = _gdsl_bintree_get_parent((_gdsl_bintree_t const   )n);
#line 752
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )" PARENT=\"%p\">",
              (void *)tmp___8);
    } else {
#line 756
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )" PARENT=\"\">");
    }
#line 759
    if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 761
      tmp___10 = get_location___3(n, sent);
#line 761
      tmp___11 = _gdsl_bintree_get_content((_gdsl_bintree_t const   )n);
#line 761
      (*write_f)((gdsl_element_t const   )tmp___11, file, tmp___10, d);
    }
#line 764
    tmp___12 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )n);
#line 764
    if ((unsigned int )tmp___12 == (unsigned int )sent) {
#line 764
      tmp___13 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )n);
#line 764
      if ((unsigned int )tmp___13 == (unsigned int )sent) {
#line 766
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_BSTREE_LEAF>\n");
      } else {
#line 770
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_BSTREE_NODE>\n");
      }
    } else {
#line 770
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_BSTREE_NODE>\n");
    }
#line 773
    tmp___14 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )n);
#line 773
    bstree_write_xml(tmp___14, sent, write_f, file, d);
  }
#line 775
  return;
}
}
#line 777 "../gdsl_bstree.c"
static void bstree_dump(_gdsl_bintree_t n , _gdsl_bintree_t sent , void (*write_f)(gdsl_element_t const   E ,
                                                                                   FILE *OUTPUT_FILE ,
                                                                                   gdsl_location_t LOCATION ,
                                                                                   void *USER_DATA ) ,
                        FILE *file , void *d ) 
{ 
  _gdsl_bintree_t tmp ;
  _gdsl_bintree_t tmp___0 ;
  _gdsl_bintree_t tmp___1 ;
  gdsl_element_t tmp___2 ;
  gdsl_element_t tmp___3 ;
  _gdsl_bintree_t tmp___4 ;
  _gdsl_bintree_t tmp___5 ;
  _gdsl_bintree_t tmp___6 ;
  _gdsl_bintree_t tmp___7 ;
  gdsl_location_t tmp___8 ;
  gdsl_element_t tmp___9 ;
  _gdsl_bintree_t tmp___10 ;
  _gdsl_bintree_t tmp___11 ;
  _gdsl_bintree_t tmp___12 ;

  {
#line 781
  if ((unsigned int )n != (unsigned int )sent) {
#line 783
    tmp = _gdsl_bintree_get_left((_gdsl_bintree_t const   )n);
#line 783
    bstree_dump(tmp, sent, write_f, file, d);
#line 785
    tmp___0 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )n);
#line 785
    if ((unsigned int )tmp___0 == (unsigned int )sent) {
#line 785
      tmp___1 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )n);
#line 785
      if ((unsigned int )tmp___1 == (unsigned int )sent) {
#line 787
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_BSTREE_LEAF REF=\"%p\"",
                (void *)n);
      } else {
#line 791
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_BSTREE_NODE REF=\"%p\"",
                (void *)n);
      }
    } else {
#line 791
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_BSTREE_NODE REF=\"%p\"",
              (void *)n);
    }
#line 794
    tmp___3 = _gdsl_bintree_get_content((_gdsl_bintree_t const   )n);
#line 794
    if ((unsigned int )tmp___3 != (unsigned int )((void *)0)) {
#line 796
      tmp___2 = _gdsl_bintree_get_content((_gdsl_bintree_t const   )n);
#line 796
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )" CONTENT=\"%p\"",
              tmp___2);
    } else {
#line 800
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )" CONTENT=\"\"");
    }
#line 803
    tmp___4 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )n);
#line 803
    tmp___5 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )n);
#line 803
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )" LEFT=\"%p\" RIGHT=\"%p\"",
            (void *)tmp___5, (void *)tmp___4);
#line 805
    tmp___7 = _gdsl_bintree_get_parent((_gdsl_bintree_t const   )n);
#line 805
    if ((unsigned int )tmp___7 != (unsigned int )((void *)0)) {
#line 807
      tmp___6 = _gdsl_bintree_get_parent((_gdsl_bintree_t const   )n);
#line 807
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )" PARENT=\"%p\">",
              (void *)tmp___6);
    } else {
#line 811
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )" PARENT=\"\">");
    }
#line 814
    if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 816
      tmp___8 = get_location___3(n, sent);
#line 816
      tmp___9 = _gdsl_bintree_get_content((_gdsl_bintree_t const   )n);
#line 816
      (*write_f)((gdsl_element_t const   )tmp___9, file, tmp___8, d);
    }
#line 819
    tmp___10 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )n);
#line 819
    if ((unsigned int )tmp___10 == (unsigned int )sent) {
#line 819
      tmp___11 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )n);
#line 819
      if ((unsigned int )tmp___11 == (unsigned int )sent) {
#line 821
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_BSTREE_LEAF>\n");
      } else {
#line 825
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_BSTREE_NODE>\n");
      }
    } else {
#line 825
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_BSTREE_NODE>\n");
    }
#line 828
    tmp___12 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )n);
#line 828
    bstree_dump(tmp___12, sent, write_f, file, d);
  }
#line 830
  return;
}
}
#line 832 "../gdsl_bstree.c"
static gdsl_location_t get_location___3(_gdsl_bintree_t n , _gdsl_bintree_t s ) 
{ 
  gdsl_location_t location ;
  _gdsl_bintree_t tmp ;
  _gdsl_bintree_t tmp___0 ;
  _gdsl_bintree_t tmp___1 ;

  {
#line 835
  location = (gdsl_location_t )0;
#line 837
  tmp = _gdsl_bintree_get_parent((_gdsl_bintree_t const   )n);
#line 837
  if ((unsigned int )tmp == (unsigned int )s) {
#line 839
    location = (gdsl_location_t )((unsigned int )location | 1U);
  }
#line 842
  tmp___0 = _gdsl_bintree_get_left((_gdsl_bintree_t const   )n);
#line 842
  if ((unsigned int )tmp___0 == (unsigned int )s) {
#line 842
    tmp___1 = _gdsl_bintree_get_right((_gdsl_bintree_t const   )n);
#line 842
    if ((unsigned int )tmp___1 == (unsigned int )s) {
#line 844
      location = (gdsl_location_t )((unsigned int )location | 2U);
    }
  }
#line 847
  return (location);
}
}
#line 1 "cil-XYXBwsH2.o"
#pragma merger("0","/tmp/cil-2HArJZu6.i","")
#line 85 "../gdsl_list.h"
extern gdsl_list_t gdsl_list_alloc(char const   *name , gdsl_element_t (*alloc_func)(void *USER_DATA ) ,
                                   void (*free_func)(gdsl_element_t E ) ) ;
#line 103
extern void gdsl_list_free(gdsl_list_t list ) ;
#line 120
extern void gdsl_list_flush(gdsl_list_t list ) ;
#line 137
extern char const   *gdsl_list_get_name(gdsl_list_t const   list ) ;
#line 148
extern ulong___0 gdsl_list_get_size(gdsl_list_t const   list ) ;
#line 160
extern bool gdsl_list_is_empty(gdsl_list_t const   list ) ;
#line 174
extern gdsl_element_t gdsl_list_get_head(gdsl_list_t const   list ) ;
#line 188
extern gdsl_element_t gdsl_list_get_tail(gdsl_list_t const   list ) ;
#line 209
extern gdsl_list_t gdsl_list_set_name(gdsl_list_t list , char const   *name ) ;
#line 232
extern gdsl_element_t gdsl_list_insert_head(gdsl_list_t list , void *v ) ;
#line 255
extern gdsl_element_t gdsl_list_insert_tail(gdsl_list_t list , void *v ) ;
#line 275
extern gdsl_element_t gdsl_list_remove_head(gdsl_list_t list ) ;
#line 294
extern gdsl_element_t gdsl_list_remove_tail(gdsl_list_t list ) ;
#line 316
extern gdsl_element_t gdsl_list_remove(gdsl_list_t list , long (*comp_f)(gdsl_element_t const   E ,
                                                                         void *VALUE ) ,
                                       void const   *v ) ;
#line 337
extern gdsl_list_t gdsl_list_delete_head(gdsl_list_t list ) ;
#line 356
extern gdsl_list_t gdsl_list_delete_tail(gdsl_list_t list ) ;
#line 378
extern gdsl_list_t gdsl_list_delete(gdsl_list_t list , long (*comp_f)(gdsl_element_t const   E ,
                                                                      void *VALUE ) ,
                                    void const   *v ) ;
#line 405
extern gdsl_element_t gdsl_list_search(gdsl_list_t const   list , long (*comp_f)(gdsl_element_t const   E ,
                                                                                 void *VALUE ) ,
                                       void const   *value ) ;
#line 423
extern gdsl_element_t gdsl_list_search_by_position(gdsl_list_t const   list , ulong___0 pos ) ;
#line 444
extern gdsl_element_t gdsl_list_search_max(gdsl_list_t const   list , long (*comp_f)(gdsl_element_t const   E ,
                                                                                     void *VALUE ) ) ;
#line 465
extern gdsl_element_t gdsl_list_search_min(gdsl_list_t const   list , long (*comp_f)(gdsl_element_t const   E ,
                                                                                     void *VALUE ) ) ;
#line 486
extern gdsl_list_t gdsl_list_sort(gdsl_list_t list , long (*comp_f)(gdsl_element_t const   E ,
                                                                    void *VALUE ) ) ;
#line 512
extern gdsl_element_t gdsl_list_map_forward(gdsl_list_t const   list , int (*map_f)(gdsl_element_t const   E ,
                                                                                    gdsl_location_t LOCATION ,
                                                                                    void *USER_DATA ) ,
                                            void *user_data ) ;
#line 535
extern gdsl_element_t gdsl_list_map_backward(gdsl_list_t const   list , int (*map_f)(gdsl_element_t const   E ,
                                                                                     gdsl_location_t LOCATION ,
                                                                                     void *USER_DATA ) ,
                                             void *user_data ) ;
#line 560
extern void gdsl_list_write(gdsl_list_t const   list , void (*write_f)(gdsl_element_t const   E ,
                                                                       FILE *OUTPUT_FILE ,
                                                                       gdsl_location_t LOCATION ,
                                                                       void *USER_DATA ) ,
                            FILE *file , void *user_data ) ;
#line 583
extern void gdsl_list_write_xml(gdsl_list_t const   list , void (*write_f)(gdsl_element_t const   E ,
                                                                           FILE *OUTPUT_FILE ,
                                                                           gdsl_location_t LOCATION ,
                                                                           void *USER_DATA ) ,
                                FILE *file , void *user_data ) ;
#line 606
extern void gdsl_list_dump(gdsl_list_t const   list , void (*write_f)(gdsl_element_t const   E ,
                                                                      FILE *OUTPUT_FILE ,
                                                                      gdsl_location_t LOCATION ,
                                                                      void *USER_DATA ) ,
                           FILE *file , void *user_data ) ;
#line 626
extern gdsl_list_cursor_t gdsl_list_cursor_alloc(gdsl_list_t const   list ) ;
#line 636
extern void gdsl_list_cursor_free(gdsl_list_cursor_t c ) ;
#line 650
extern void gdsl_list_cursor_move_to_head(gdsl_list_cursor_t c ) ;
#line 664
extern void gdsl_list_cursor_move_to_tail(gdsl_list_cursor_t c ) ;
#line 683
extern gdsl_element_t gdsl_list_cursor_move_to_value(gdsl_list_cursor_t c , long (*comp_f)(gdsl_element_t const   E ,
                                                                                           void *VALUE ) ,
                                                     void *v ) ;
#line 703
extern gdsl_element_t gdsl_list_cursor_move_to_position(gdsl_list_cursor_t c , ulong___0 pos ) ;
#line 719
extern void gdsl_list_cursor_step_forward(gdsl_list_cursor_t c ) ;
#line 734
extern void gdsl_list_cursor_step_backward(gdsl_list_cursor_t c ) ;
#line 747
extern bool gdsl_list_cursor_is_on_head(gdsl_list_cursor_t const   c ) ;
#line 760
extern bool gdsl_list_cursor_is_on_tail(gdsl_list_cursor_t const   c ) ;
#line 773
extern bool gdsl_list_cursor_has_succ(gdsl_list_cursor_t const   c ) ;
#line 786
extern bool gdsl_list_cursor_has_pred(gdsl_list_cursor_t const   c ) ;
#line 803
extern void gdsl_list_cursor_set_content(gdsl_list_cursor_t c , gdsl_element_t e ) ;
#line 815
extern gdsl_element_t gdsl_list_cursor_get_content(gdsl_list_cursor_t const   c ) ;
#line 837
extern gdsl_element_t gdsl_list_cursor_insert_after(gdsl_list_cursor_t c , void *v ) ;
#line 859
extern gdsl_element_t gdsl_list_cursor_insert_before(gdsl_list_cursor_t c , void *v ) ;
#line 877
extern gdsl_element_t gdsl_list_cursor_remove(gdsl_list_cursor_t c ) ;
#line 893
extern gdsl_element_t gdsl_list_cursor_remove_after(gdsl_list_cursor_t c ) ;
#line 909
extern gdsl_element_t gdsl_list_cursor_remove_before(gdsl_list_cursor_t c ) ;
#line 928
extern gdsl_list_cursor_t gdsl_list_cursor_delete(gdsl_list_cursor_t c ) ;
#line 947
extern gdsl_list_cursor_t gdsl_list_cursor_delete_after(gdsl_list_cursor_t c ) ;
#line 965
extern gdsl_list_cursor_t gdsl_list_cursor_delete_before(gdsl_list_cursor_t c ) ;
#line 56 "../gdsl_list.c"
static gdsl_element_t default_alloc___5(void *e ) ;
#line 59
static void default_free___5(gdsl_element_t e ) ;
#line 62
static _gdsl_node_t search_by_function(gdsl_list_t l , long (*comp_f)(gdsl_element_t const   E ,
                                                                      void *VALUE ) ,
                                       void const   *value ) ;
#line 65
static _gdsl_node_t search_by_position___0(gdsl_list_t l , ulong___0 pos ) ;
#line 68
static gdsl_element_t update_cursor(gdsl_list_cursor_t c , _gdsl_node_t n ) ;
#line 71
static _gdsl_node_t sort(_gdsl_node_t u , long (*comp_f)(gdsl_element_t const   E ,
                                                         void *VALUE ) , _gdsl_node_t z ) ;
#line 74
static _gdsl_node_t merge(_gdsl_node_t s , _gdsl_node_t t , long (*comp_f)(gdsl_element_t const   E ,
                                                                           void *VALUE ) ,
                          _gdsl_node_t z ) ;
#line 78
static gdsl_location_t get_location___4(gdsl_list_t list , _gdsl_node_t node ) ;
#line 85 "../gdsl_list.c"
extern gdsl_list_t gdsl_list_alloc(char const   *name , gdsl_element_t (*alloc_func)(void *USER_DATA ) ,
                                   void (*free_func)(gdsl_element_t E ) ) 
{ 
  gdsl_list_t list ;
  void *tmp ;
  gdsl_list_t tmp___0 ;

  {
#line 91
  tmp = malloc(sizeof(struct _gdsl_list ));
#line 91
  list = (gdsl_list_t )tmp;
#line 93
  if ((unsigned int )list == (unsigned int )((void *)0)) {
#line 95
    return ((gdsl_list_t )((void *)0));
  }
#line 98
  list->d = _gdsl_node_alloc();
#line 100
  if ((unsigned int )list->d == (unsigned int )((void *)0)) {
#line 102
    free((void *)list);
#line 103
    return ((gdsl_list_t )((void *)0));
  }
#line 106
  list->z = _gdsl_node_alloc();
#line 108
  if ((unsigned int )list->z == (unsigned int )((void *)0)) {
#line 110
    _gdsl_node_free(list->d);
#line 111
    free((void *)list);
#line 112
    return ((gdsl_list_t )((void *)0));
  }
#line 115
  list->name = (char *)((void *)0);
#line 117
  tmp___0 = gdsl_list_set_name(list, name);
#line 117
  if ((unsigned int )tmp___0 == (unsigned int )((void *)0)) {
#line 119
    _gdsl_node_free(list->z);
#line 120
    _gdsl_node_free(list->d);
#line 121
    free((void *)list);
#line 122
    return ((gdsl_list_t )((void *)0));
  }
#line 125
  _gdsl_node_link(list->d, list->z);
#line 126
  _gdsl_node_set_succ(list->z, (_gdsl_node_t const   )list->z);
#line 127
  _gdsl_node_set_pred(list->d, (_gdsl_node_t const   )list->d);
#line 129
  list->card = 0UL;
#line 130
  if (alloc_func) {
#line 130
    list->alloc_func = alloc_func;
  } else {
#line 130
    list->alloc_func = & default_alloc___5;
  }
#line 131
  if (free_func) {
#line 131
    list->free_func = free_func;
  } else {
#line 131
    list->free_func = & default_free___5;
  }
#line 133
  return (list);
}
}
#line 136 "../gdsl_list.c"
extern void gdsl_list_free(gdsl_list_t list ) 
{ 
  bool tmp ;

  {
#line 141
  tmp = gdsl_list_is_empty((gdsl_list_t const   )list);
#line 141
  if (! tmp) {
#line 143
    gdsl_list_flush(list);
  }
#line 146
  _gdsl_node_free(list->d);
#line 147
  _gdsl_node_free(list->z);
#line 149
  if ((unsigned int )list->name != (unsigned int )((void *)0)) {
#line 151
    free((void *)list->name);
  }
#line 154
  free((void *)list);
#line 155
  return;
}
}
#line 157 "../gdsl_list.c"
extern void gdsl_list_flush(gdsl_list_t list ) 
{ 
  _gdsl_node_t save ;
  _gdsl_node_t tmp ;
  gdsl_element_t tmp___0 ;

  {
#line 165
  tmp = _gdsl_node_get_succ((_gdsl_node_t const   )list->d);
#line 167
  while ((unsigned int )tmp != (unsigned int )list->z) {
#line 169
    save = _gdsl_node_get_succ((_gdsl_node_t const   )tmp);
#line 170
    tmp___0 = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 170
    (*(list->free_func))(tmp___0);
#line 171
    _gdsl_node_free(tmp);
#line 172
    tmp = save;
  }
#line 175
  _gdsl_node_link(list->d, list->z);
#line 176
  _gdsl_node_set_succ(list->z, (_gdsl_node_t const   )list->z);
#line 177
  _gdsl_node_set_pred(list->d, (_gdsl_node_t const   )list->d);
#line 179
  list->card = 0UL;
#line 180
  return;
}
}
#line 186 "../gdsl_list.c"
extern char const   *gdsl_list_get_name(gdsl_list_t const   list ) 
{ 


  {
#line 191
  return ((char const   *)list->name);
}
}
#line 194 "../gdsl_list.c"
extern ulong___0 gdsl_list_get_size(gdsl_list_t const   list ) 
{ 


  {
#line 199
  return (list->card);
}
}
#line 202 "../gdsl_list.c"
extern bool gdsl_list_is_empty(gdsl_list_t const   list ) 
{ 
  _gdsl_node_t tmp ;

  {
#line 207
  tmp = _gdsl_node_get_succ((_gdsl_node_t const   )list->d);
#line 207
  return ((bool )((unsigned int )tmp == (unsigned int )list->z));
}
}
#line 210 "../gdsl_list.c"
extern gdsl_element_t gdsl_list_get_head(gdsl_list_t const   list ) 
{ 
  _gdsl_node_t tmp ;
  gdsl_element_t tmp___0 ;

  {
#line 215
  tmp = _gdsl_node_get_succ((_gdsl_node_t const   )list->d);
#line 215
  tmp___0 = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 215
  return (tmp___0);
}
}
#line 218 "../gdsl_list.c"
extern gdsl_element_t gdsl_list_get_tail(gdsl_list_t const   list ) 
{ 
  _gdsl_node_t tmp ;
  gdsl_element_t tmp___0 ;

  {
#line 223
  tmp = _gdsl_node_get_pred((_gdsl_node_t const   )list->z);
#line 223
  tmp___0 = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 223
  return (tmp___0);
}
}
#line 230 "../gdsl_list.c"
extern gdsl_list_t gdsl_list_set_name(gdsl_list_t list , char const   *name ) 
{ 
  size_t tmp ;
  void *tmp___0 ;

  {
#line 235
  if ((unsigned int )list->name != (unsigned int )((void *)0)) {
#line 237
    free((void *)list->name);
#line 238
    list->name = (char *)((void *)0);
  }
#line 241
  if ((unsigned int )name != (unsigned int )((void *)0)) {
#line 243
    tmp = strlen(name);
#line 243
    tmp___0 = malloc((1U + tmp) * sizeof(char ));
#line 243
    list->name = (char *)tmp___0;
#line 245
    if ((unsigned int )list->name == (unsigned int )((void *)0)) {
#line 247
      return ((gdsl_list_t )((void *)0));
    }
#line 250
    strcpy((char * __restrict  )list->name, (char const   * __restrict  )name);
  }
#line 253
  return (list);
}
}
#line 256 "../gdsl_list.c"
extern gdsl_element_t gdsl_list_insert_head(gdsl_list_t list , void *v ) 
{ 
  gdsl_element_t e ;
  _gdsl_node_t head ;
  _gdsl_node_t tmp ;

  {
#line 264
  head = _gdsl_node_alloc();
#line 266
  if ((unsigned int )head == (unsigned int )((void *)0)) {
#line 268
    return ((void *)0);
  }
#line 271
  e = (*(list->alloc_func))(v);
#line 273
  if ((unsigned int )e == (unsigned int )((void *)0)) {
#line 275
    _gdsl_node_free(head);
#line 276
    return ((void *)0);
  }
#line 279
  (list->card) ++;
#line 281
  _gdsl_node_set_content(head, (gdsl_element_t const   )e);
#line 282
  tmp = _gdsl_node_get_succ((_gdsl_node_t const   )list->d);
#line 282
  _gdsl_node_link(head, tmp);
#line 283
  _gdsl_node_link(list->d, head);
#line 285
  return (e);
}
}
#line 288 "../gdsl_list.c"
extern gdsl_element_t gdsl_list_insert_tail(gdsl_list_t list , void *v ) 
{ 
  gdsl_element_t e ;
  _gdsl_node_t tail ;
  _gdsl_node_t tmp ;

  {
#line 296
  tail = _gdsl_node_alloc();
#line 298
  if ((unsigned int )tail == (unsigned int )((void *)0)) {
#line 300
    return ((void *)0);
  }
#line 303
  e = (*(list->alloc_func))(v);
#line 305
  if ((unsigned int )e == (unsigned int )((void *)0)) {
#line 307
    _gdsl_node_free(tail);
#line 308
    return ((void *)0);
  }
#line 311
  (list->card) ++;
#line 313
  _gdsl_node_set_content(tail, (gdsl_element_t const   )e);
#line 314
  tmp = _gdsl_node_get_pred((_gdsl_node_t const   )list->z);
#line 314
  _gdsl_node_link(tmp, tail);
#line 315
  _gdsl_node_link(tail, list->z);
#line 317
  return (e);
}
}
#line 320 "../gdsl_list.c"
extern gdsl_element_t gdsl_list_remove_head(gdsl_list_t list ) 
{ 
  _gdsl_node_t head ;
  _gdsl_node_t tmp ;
  gdsl_element_t e ;
  gdsl_element_t tmp___0 ;
  bool tmp___1 ;

  {
#line 325
  tmp___1 = gdsl_list_is_empty((gdsl_list_t const   )list);
#line 325
  if (! tmp___1) {
#line 327
    tmp = _gdsl_node_get_succ((_gdsl_node_t const   )list->d);
#line 327
    head = tmp;
#line 328
    tmp___0 = _gdsl_node_get_content((_gdsl_node_t const   )head);
#line 328
    e = tmp___0;
#line 330
    _gdsl_list_remove(head);
#line 331
    _gdsl_node_free(head);
#line 333
    (list->card) --;
#line 334
    return (e);
  }
#line 337
  return ((void *)0);
}
}
#line 340 "../gdsl_list.c"
extern gdsl_element_t gdsl_list_remove_tail(gdsl_list_t list ) 
{ 
  _gdsl_node_t tail ;
  _gdsl_node_t tmp ;
  gdsl_element_t e ;
  gdsl_element_t tmp___0 ;
  bool tmp___1 ;

  {
#line 345
  tmp___1 = gdsl_list_is_empty((gdsl_list_t const   )list);
#line 345
  if (! tmp___1) {
#line 347
    tmp = _gdsl_node_get_pred((_gdsl_node_t const   )list->z);
#line 347
    tail = tmp;
#line 348
    tmp___0 = _gdsl_node_get_content((_gdsl_node_t const   )tail);
#line 348
    e = tmp___0;
#line 350
    _gdsl_list_remove(tail);
#line 351
    _gdsl_node_free(tail);
#line 353
    (list->card) --;
#line 354
    return (e);
  }
#line 357
  return ((void *)0);
}
}
#line 360 "../gdsl_list.c"
extern gdsl_element_t gdsl_list_remove(gdsl_list_t list , long (*comp_f)(gdsl_element_t const   E ,
                                                                         void *VALUE ) ,
                                       void const   *v ) 
{ 
  _gdsl_node_t n ;
  gdsl_element_t e ;

  {
#line 369
  n = search_by_function(list, comp_f, v);
#line 371
  if ((unsigned int )n == (unsigned int )((void *)0)) {
#line 373
    return ((void *)0);
  }
#line 376
  e = _gdsl_node_get_content((_gdsl_node_t const   )n);
#line 378
  _gdsl_list_remove(n);
#line 379
  _gdsl_node_free(n);
#line 381
  (list->card) --;
#line 383
  return (e);
}
}
#line 386 "../gdsl_list.c"
extern gdsl_list_t gdsl_list_delete_head(gdsl_list_t list ) 
{ 
  gdsl_element_t e ;

  {
#line 393
  e = gdsl_list_remove_head(list);
#line 395
  if ((unsigned int )e == (unsigned int )((void *)0)) {
#line 397
    return ((gdsl_list_t )((void *)0));
  }
#line 400
  (*(list->free_func))(e);
#line 402
  return (list);
}
}
#line 405 "../gdsl_list.c"
extern gdsl_list_t gdsl_list_delete_tail(gdsl_list_t list ) 
{ 
  gdsl_element_t e ;

  {
#line 412
  e = gdsl_list_remove_tail(list);
#line 414
  if ((unsigned int )e == (unsigned int )((void *)0)) {
#line 416
    return ((gdsl_list_t )((void *)0));
  }
#line 419
  (*(list->free_func))(e);
#line 421
  return (list);
}
}
#line 424 "../gdsl_list.c"
extern gdsl_list_t gdsl_list_delete(gdsl_list_t list , long (*comp_f)(gdsl_element_t const   E ,
                                                                      void *VALUE ) ,
                                    void const   *v ) 
{ 
  gdsl_element_t e ;

  {
#line 432
  e = gdsl_list_remove(list, comp_f, v);
#line 434
  if ((unsigned int )e == (unsigned int )((void *)0)) {
#line 436
    return ((gdsl_list_t )((void *)0));
  }
#line 439
  (*(list->free_func))(e);
#line 441
  return (list);
}
}
#line 448 "../gdsl_list.c"
extern gdsl_element_t gdsl_list_search(gdsl_list_t const   list , long (*comp_f)(gdsl_element_t const   E ,
                                                                                 void *VALUE ) ,
                                       void const   *value ) 
{ 
  _gdsl_node_t n ;
  gdsl_element_t tmp ;
  void *tmp___0 ;

  {
#line 457
  n = search_by_function((gdsl_list_t )list, comp_f, value);
#line 459
  if ((unsigned int )n == (unsigned int )((void *)0)) {
#line 459
    tmp___0 = (void *)0;
  } else {
#line 459
    tmp = _gdsl_node_get_content((_gdsl_node_t const   )n);
#line 459
    tmp___0 = tmp;
  }
#line 459
  return (tmp___0);
}
}
#line 462 "../gdsl_list.c"
extern gdsl_element_t gdsl_list_search_by_position(gdsl_list_t const   list , ulong___0 pos ) 
{ 
  _gdsl_node_t n ;
  gdsl_element_t tmp ;
  gdsl_element_t tmp___0 ;

  {
#line 470
  n = search_by_position___0((gdsl_list_t )list, pos);
#line 472
  if (n) {
#line 472
    tmp = _gdsl_node_get_content((_gdsl_node_t const   )n);
#line 472
    tmp___0 = tmp;
  } else {
#line 472
    tmp___0 = (void *)0;
  }
#line 472
  return (tmp___0);
}
}
#line 475 "../gdsl_list.c"
extern gdsl_element_t gdsl_list_search_max(gdsl_list_t const   list , long (*comp_f)(gdsl_element_t const   E ,
                                                                                     void *VALUE ) ) 
{ 
  _gdsl_node_t tmp ;
  gdsl_element_t max ;
  gdsl_element_t e ;
  gdsl_element_t tmp___0 ;
  long tmp___1 ;

  {
#line 484
  tmp = _gdsl_node_get_succ((_gdsl_node_t const   )list->d);
#line 485
  max = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 487
  while ((unsigned int )tmp != (unsigned int )list->z) {
#line 489
    tmp___0 = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 489
    e = tmp___0;
#line 491
    tmp___1 = (*comp_f)((gdsl_element_t const   )e, max);
#line 491
    if (tmp___1 > 0L) {
#line 493
      max = e;
    }
#line 496
    tmp = _gdsl_node_get_succ((_gdsl_node_t const   )tmp);
  }
#line 499
  return (max);
}
}
#line 502 "../gdsl_list.c"
extern gdsl_element_t gdsl_list_search_min(gdsl_list_t const   list , long (*comp_f)(gdsl_element_t const   E ,
                                                                                     void *VALUE ) ) 
{ 
  _gdsl_node_t tmp ;
  gdsl_element_t min ;
  gdsl_element_t e ;
  gdsl_element_t tmp___0 ;
  long tmp___1 ;

  {
#line 511
  tmp = _gdsl_node_get_succ((_gdsl_node_t const   )list->d);
#line 512
  min = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 514
  while ((unsigned int )tmp != (unsigned int )list->z) {
#line 516
    tmp___0 = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 516
    e = tmp___0;
#line 518
    tmp___1 = (*comp_f)((gdsl_element_t const   )e, min);
#line 518
    if (tmp___1 < 0L) {
#line 520
      min = e;
    }
#line 523
    tmp = _gdsl_node_get_succ((_gdsl_node_t const   )tmp);
  }
#line 526
  return (min);
}
}
#line 533 "../gdsl_list.c"
extern gdsl_list_t gdsl_list_sort(gdsl_list_t list , long (*comp_f)(gdsl_element_t const   E ,
                                                                    void *VALUE ) ) 
{ 
  _gdsl_node_t tmp ;
  _gdsl_node_t tmp___0 ;

  {
#line 556
  tmp = _gdsl_node_get_succ((_gdsl_node_t const   )list->d);
#line 556
  tmp___0 = sort(tmp, comp_f, list->z);
#line 556
  _gdsl_node_link(list->d, tmp___0);
#line 563
  return (list);
}
}
#line 570 "../gdsl_list.c"
extern gdsl_element_t gdsl_list_map_forward(gdsl_list_t const   list , int (*map_f)(gdsl_element_t const   E ,
                                                                                    gdsl_location_t LOCATION ,
                                                                                    void *USER_DATA ) ,
                                            void *user_data ) 
{ 
  _gdsl_node_t tmp ;
  gdsl_element_t e ;
  gdsl_element_t tmp___0 ;
  gdsl_location_t tmp___1 ;
  int tmp___2 ;

  {
#line 579
  tmp = _gdsl_node_get_succ((_gdsl_node_t const   )list->d);
#line 581
  while ((unsigned int )tmp != (unsigned int )list->z) {
#line 583
    tmp___0 = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 583
    e = tmp___0;
#line 585
    tmp___1 = get_location___4((gdsl_list_t )list, tmp);
#line 585
    tmp___2 = (*map_f)((gdsl_element_t const   )e, tmp___1, user_data);
#line 585
    if (tmp___2 == 0) {
#line 587
      return (e);
    }
#line 590
    tmp = _gdsl_node_get_succ((_gdsl_node_t const   )tmp);
  }
#line 593
  return ((void *)0);
}
}
#line 596 "../gdsl_list.c"
extern gdsl_element_t gdsl_list_map_backward(gdsl_list_t const   list , int (*map_f)(gdsl_element_t const   E ,
                                                                                     gdsl_location_t LOCATION ,
                                                                                     void *USER_DATA ) ,
                                             void *user_data ) 
{ 
  _gdsl_node_t tmp ;
  gdsl_element_t e ;
  gdsl_element_t tmp___0 ;
  gdsl_location_t tmp___1 ;
  int tmp___2 ;

  {
#line 605
  tmp = _gdsl_node_get_pred((_gdsl_node_t const   )list->z);
#line 607
  while ((unsigned int )tmp != (unsigned int )list->d) {
#line 609
    tmp___0 = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 609
    e = tmp___0;
#line 611
    tmp___1 = get_location___4((gdsl_list_t )list, tmp);
#line 611
    tmp___2 = (*map_f)((gdsl_element_t const   )e, tmp___1, user_data);
#line 611
    if (tmp___2 == 0) {
#line 613
      return (e);
    }
#line 616
    tmp = _gdsl_node_get_pred((_gdsl_node_t const   )tmp);
  }
#line 619
  return ((void *)0);
}
}
#line 626 "../gdsl_list.c"
extern void gdsl_list_write(gdsl_list_t const   list , void (*write_f)(gdsl_element_t const   E ,
                                                                       FILE *OUTPUT_FILE ,
                                                                       gdsl_location_t LOCATION ,
                                                                       void *USER_DATA ) ,
                            FILE *file , void *user_data ) 
{ 
  _gdsl_node_t tmp ;
  gdsl_location_t tmp___0 ;
  gdsl_element_t tmp___1 ;

  {
#line 636
  tmp = _gdsl_node_get_succ((_gdsl_node_t const   )list->d);
#line 638
  while ((unsigned int )tmp != (unsigned int )list->z) {
#line 640
    tmp___0 = get_location___4((gdsl_list_t )list, tmp);
#line 640
    tmp___1 = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 640
    (*write_f)((gdsl_element_t const   )tmp___1, file, tmp___0, user_data);
#line 642
    tmp = _gdsl_node_get_succ((_gdsl_node_t const   )tmp);
  }
#line 644
  return;
}
}
#line 646 "../gdsl_list.c"
extern void gdsl_list_write_xml(gdsl_list_t const   list , void (*write_f)(gdsl_element_t const   E ,
                                                                           FILE *OUTPUT_FILE ,
                                                                           gdsl_location_t LOCATION ,
                                                                           void *USER_DATA ) ,
                                FILE *file , void *user_data ) 
{ 
  _gdsl_node_t tmp ;
  _gdsl_node_t tmp___0 ;
  char const   *tmp___1 ;
  _gdsl_node_t tmp___2 ;
  gdsl_element_t tmp___3 ;
  _gdsl_node_t tmp___4 ;
  gdsl_element_t tmp___5 ;
  _gdsl_node_t tmp___6 ;
  _gdsl_node_t tmp___7 ;
  gdsl_element_t tmp___8 ;
  _gdsl_node_t tmp___9 ;
  _gdsl_node_t tmp___10 ;
  gdsl_location_t tmp___11 ;
  gdsl_element_t tmp___12 ;
  gdsl_element_t tmp___13 ;

  {
#line 655
  tmp = _gdsl_node_get_succ((_gdsl_node_t const   )list->d);
#line 657
  tmp___0 = _gdsl_node_get_pred((_gdsl_node_t const   )list->z);
#line 657
  if (list->name) {
#line 657
    tmp___1 = (char const   *)list->name;
  } else {
#line 657
    tmp___1 = "";
  }
#line 657
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_LIST REF=\"%p\" NAME=\"%s\" CARD=\"%ld\" HEAD=\"%p\" TAIL=\"%p\">\n",
          (void *)list, tmp___1, list->card, (void *)tmp, (void *)tmp___0);
#line 661
  while ((unsigned int )tmp != (unsigned int )list->z) {
#line 663
    tmp___10 = _gdsl_node_get_succ((_gdsl_node_t const   )list->d);
#line 663
    if ((unsigned int )tmp == (unsigned int )tmp___10) {
#line 665
      tmp___2 = _gdsl_node_get_succ((_gdsl_node_t const   )tmp);
#line 665
      tmp___3 = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 665
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_LIST_NODE REF=\"%p\" CONTENT=\"%p\" SUCC=\"%p\" PRED=\"\">",
              (void *)tmp, tmp___3, (void *)tmp___2);
    } else {
#line 669
      tmp___9 = _gdsl_node_get_pred((_gdsl_node_t const   )list->z);
#line 669
      if ((unsigned int )tmp == (unsigned int )tmp___9) {
#line 671
        tmp___4 = _gdsl_node_get_pred((_gdsl_node_t const   )tmp);
#line 671
        tmp___5 = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 671
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_LIST_NODE REF=\"%p\" CONTENT=\"%p\" SUCC=\"\" PRED=\"%p\">",
                (void *)tmp, tmp___5, (void *)tmp___4);
      } else {
#line 677
        tmp___6 = _gdsl_node_get_pred((_gdsl_node_t const   )tmp);
#line 677
        tmp___7 = _gdsl_node_get_succ((_gdsl_node_t const   )tmp);
#line 677
        tmp___8 = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 677
        fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_LIST_NODE REF=\"%p\" CONTENT=\"%p\" SUCC=\"%p\" PRED=\"%p\">",
                (void *)tmp, tmp___8, (void *)tmp___7, (void *)tmp___6);
      }
    }
#line 682
    if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 682
      tmp___13 = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 682
      if (tmp___13) {
#line 684
        tmp___11 = get_location___4((gdsl_list_t )list, tmp);
#line 684
        tmp___12 = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 684
        (*write_f)((gdsl_element_t const   )tmp___12, file, tmp___11, user_data);
      }
    }
#line 688
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_LIST_NODE>\n");
#line 690
    tmp = _gdsl_node_get_succ((_gdsl_node_t const   )tmp);
  }
#line 693
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_LIST>\n");
#line 694
  return;
}
}
#line 696 "../gdsl_list.c"
extern void gdsl_list_dump(gdsl_list_t const   list , void (*write_f)(gdsl_element_t const   E ,
                                                                      FILE *OUTPUT_FILE ,
                                                                      gdsl_location_t LOCATION ,
                                                                      void *USER_DATA ) ,
                           FILE *file , void *user_data ) 
{ 
  _gdsl_node_t tmp ;
  char const   *tmp___0 ;
  _gdsl_node_t tmp___1 ;
  _gdsl_node_t tmp___2 ;
  gdsl_element_t tmp___3 ;
  _gdsl_node_t tmp___4 ;
  _gdsl_node_t tmp___5 ;
  gdsl_element_t tmp___6 ;
  _gdsl_node_t tmp___7 ;
  _gdsl_node_t tmp___8 ;
  gdsl_element_t tmp___9 ;
  _gdsl_node_t tmp___10 ;
  _gdsl_node_t tmp___11 ;
  gdsl_element_t tmp___12 ;
  gdsl_location_t tmp___13 ;
  gdsl_element_t tmp___14 ;
  gdsl_element_t tmp___15 ;
  _gdsl_node_t tmp___16 ;
  _gdsl_node_t tmp___17 ;
  gdsl_element_t tmp___18 ;
  _gdsl_node_t tmp___19 ;
  _gdsl_node_t tmp___20 ;
  gdsl_element_t tmp___21 ;

  {
#line 705
  tmp = _gdsl_node_get_succ((_gdsl_node_t const   )list->d);
#line 707
  if (list->name) {
#line 707
    tmp___0 = (char const   *)list->name;
  } else {
#line 707
    tmp___0 = "";
  }
#line 707
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_LIST REF=\"%p\" NAME=\"%s\" CARD=\"%ld\" HEAD=\"%p\" TAIL=\"%p\">\n",
          (void *)list, tmp___0, list->card, (void *)list->d, (void *)list->z);
#line 710
  tmp___6 = _gdsl_node_get_content((_gdsl_node_t const   )list->d);
#line 710
  if (tmp___6) {
#line 712
    tmp___1 = _gdsl_node_get_pred((_gdsl_node_t const   )list->d);
#line 712
    tmp___2 = _gdsl_node_get_succ((_gdsl_node_t const   )list->d);
#line 712
    tmp___3 = _gdsl_node_get_content((_gdsl_node_t const   )list->d);
#line 712
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_LIST_HEAD REF=\"%p\" CONTENT=\"%p\" SUCC=\"%p\" PRED=\"%p\"/>\n",
            (void *)list->d, tmp___3, (void *)tmp___2, (void *)tmp___1);
  } else {
#line 718
    tmp___4 = _gdsl_node_get_pred((_gdsl_node_t const   )list->d);
#line 718
    tmp___5 = _gdsl_node_get_succ((_gdsl_node_t const   )list->d);
#line 718
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_LIST_HEAD REF=\"%p\" CONTENT=\"\" SUCC=\"%p\" PRED=\"%p\"/>\n",
            (void *)list->d, (void *)tmp___5, (void *)tmp___4);
  }
#line 722
  while ((unsigned int )tmp != (unsigned int )list->z) {
#line 724
    tmp___12 = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 724
    if (tmp___12) {
#line 726
      tmp___7 = _gdsl_node_get_pred((_gdsl_node_t const   )tmp);
#line 726
      tmp___8 = _gdsl_node_get_succ((_gdsl_node_t const   )tmp);
#line 726
      tmp___9 = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 726
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_LIST_NODE REF=\"%p\" CONTENT=\"%p\" SUCC=\"%p\" PRED=\"%p\">",
              (void *)tmp, tmp___9, (void *)tmp___8, (void *)tmp___7);
    } else {
#line 732
      tmp___10 = _gdsl_node_get_pred((_gdsl_node_t const   )tmp);
#line 732
      tmp___11 = _gdsl_node_get_succ((_gdsl_node_t const   )tmp);
#line 732
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_LIST_NODE REF=\"%p\" CONTENT=\"\" SUCC=\"%p\" PRED=\"%p\">",
              (void *)tmp, (void *)tmp___11, (void *)tmp___10);
    }
#line 737
    if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 737
      tmp___15 = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 737
      if (tmp___15) {
#line 739
        tmp___13 = get_location___4((gdsl_list_t )list, tmp);
#line 739
        tmp___14 = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 739
        (*write_f)((gdsl_element_t const   )tmp___14, file, tmp___13, user_data);
      }
    }
#line 743
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_LIST_NODE>\n");
#line 745
    tmp = _gdsl_node_get_succ((_gdsl_node_t const   )tmp);
  }
#line 748
  tmp___21 = _gdsl_node_get_content((_gdsl_node_t const   )list->z);
#line 748
  if (tmp___21) {
#line 750
    tmp___16 = _gdsl_node_get_succ((_gdsl_node_t const   )list->z);
#line 750
    tmp___17 = _gdsl_node_get_pred((_gdsl_node_t const   )list->z);
#line 750
    tmp___18 = _gdsl_node_get_content((_gdsl_node_t const   )list->z);
#line 750
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_LIST_TAIL REF=\"%p\" CONTENT=\"%p\" PRED=\"%p\" SUCC=\"%p\"/>\n</GDSL_LIST>\n",
            (void *)list->z, tmp___18, (void *)tmp___17, (void *)tmp___16);
  } else {
#line 756
    tmp___19 = _gdsl_node_get_succ((_gdsl_node_t const   )list->z);
#line 756
    tmp___20 = _gdsl_node_get_pred((_gdsl_node_t const   )list->z);
#line 756
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_LIST_TAIL REF=\"%p\" CONTENT=\"\" PRED=\"%p\" SUCC=\"%p\"/>\n</GDSL_LIST>\n",
            (void *)list->z, (void *)tmp___20, (void *)tmp___19);
  }
#line 760
  return;
}
}
#line 766 "../gdsl_list.c"
extern gdsl_list_cursor_t gdsl_list_cursor_alloc(gdsl_list_t const   list ) 
{ 
  gdsl_list_cursor_t c ;
  void *tmp ;

  {
#line 773
  tmp = malloc(sizeof(struct _gdsl_list_cursor ));
#line 773
  c = (gdsl_list_cursor_t )tmp;
#line 775
  if ((unsigned int )c == (unsigned int )((void *)0)) {
#line 777
    return ((gdsl_list_cursor_t )((void *)0));
  }
#line 780
  c->c = _gdsl_node_get_succ((_gdsl_node_t const   )list->d);
#line 781
  c->l = (gdsl_list_t )list;
#line 783
  return (c);
}
}
#line 786 "../gdsl_list.c"
extern void gdsl_list_cursor_free(gdsl_list_cursor_t c ) 
{ 


  {
#line 791
  free((void *)c);
#line 792
  return;
}
}
#line 794 "../gdsl_list.c"
extern void gdsl_list_cursor_move_to_head(gdsl_list_cursor_t c ) 
{ 


  {
#line 799
  c->c = _gdsl_node_get_succ((_gdsl_node_t const   )(c->l)->d);
#line 800
  return;
}
}
#line 802 "../gdsl_list.c"
extern void gdsl_list_cursor_move_to_tail(gdsl_list_cursor_t c ) 
{ 


  {
#line 807
  c->c = _gdsl_node_get_pred((_gdsl_node_t const   )(c->l)->z);
#line 808
  return;
}
}
#line 810 "../gdsl_list.c"
extern gdsl_element_t gdsl_list_cursor_move_to_value(gdsl_list_cursor_t c , long (*comp_f)(gdsl_element_t const   E ,
                                                                                           void *VALUE ) ,
                                                     void *v ) 
{ 
  _gdsl_node_t tmp ;
  gdsl_element_t tmp___0 ;

  {
#line 816
  tmp = search_by_function(c->l, comp_f, (void const   *)v);
#line 816
  tmp___0 = update_cursor(c, tmp);
#line 816
  return (tmp___0);
}
}
#line 819 "../gdsl_list.c"
extern gdsl_element_t gdsl_list_cursor_move_to_position(gdsl_list_cursor_t c , ulong___0 pos ) 
{ 
  _gdsl_node_t tmp ;
  gdsl_element_t tmp___0 ;

  {
#line 825
  tmp = search_by_position___0(c->l, pos);
#line 825
  tmp___0 = update_cursor(c, tmp);
#line 825
  return (tmp___0);
}
}
#line 828 "../gdsl_list.c"
extern void gdsl_list_cursor_step_forward(gdsl_list_cursor_t c ) 
{ 


  {
#line 833
  c->c = _gdsl_node_get_succ((_gdsl_node_t const   )c->c);
#line 834
  return;
}
}
#line 836 "../gdsl_list.c"
extern void gdsl_list_cursor_step_backward(gdsl_list_cursor_t c ) 
{ 


  {
#line 841
  c->c = _gdsl_node_get_pred((_gdsl_node_t const   )c->c);
#line 842
  return;
}
}
#line 844 "../gdsl_list.c"
extern bool gdsl_list_cursor_is_on_head(gdsl_list_cursor_t const   c ) 
{ 
  bool tmp ;
  _gdsl_node_t tmp___0 ;

  {
#line 850
  tmp = gdsl_list_is_empty((gdsl_list_t const   )c->l);
#line 850
  if (tmp) {
#line 852
    return ((bool )0);
  }
#line 855
  tmp___0 = _gdsl_node_get_succ((_gdsl_node_t const   )(c->l)->d);
#line 855
  return ((bool )((unsigned int )c->c == (unsigned int )tmp___0));
}
}
#line 858 "../gdsl_list.c"
extern bool gdsl_list_cursor_is_on_tail(gdsl_list_cursor_t const   c ) 
{ 
  bool tmp ;
  _gdsl_node_t tmp___0 ;

  {
#line 864
  tmp = gdsl_list_is_empty((gdsl_list_t const   )c->l);
#line 864
  if (tmp) {
#line 866
    return ((bool )0);
  }
#line 869
  tmp___0 = _gdsl_node_get_pred((_gdsl_node_t const   )(c->l)->z);
#line 869
  return ((bool )((unsigned int )c->c == (unsigned int )tmp___0));
}
}
#line 872 "../gdsl_list.c"
extern bool gdsl_list_cursor_has_succ(gdsl_list_cursor_t const   c ) 
{ 
  _gdsl_node_t tmp ;

  {
#line 877
  tmp = _gdsl_node_get_succ((_gdsl_node_t const   )c->c);
#line 877
  return ((bool )((unsigned int )tmp != (unsigned int )(c->l)->z));
}
}
#line 880 "../gdsl_list.c"
extern bool gdsl_list_cursor_has_pred(gdsl_list_cursor_t const   c ) 
{ 
  _gdsl_node_t tmp ;

  {
#line 885
  tmp = _gdsl_node_get_pred((_gdsl_node_t const   )c->c);
#line 885
  return ((bool )((unsigned int )tmp != (unsigned int )(c->l)->d));
}
}
#line 888 "../gdsl_list.c"
extern void gdsl_list_cursor_set_content(gdsl_list_cursor_t c , gdsl_element_t e ) 
{ 


  {
#line 893
  if ((unsigned int )c->c == (unsigned int )(c->l)->d) {
#line 895
    return;
  }
#line 898
  if ((unsigned int )c->c == (unsigned int )(c->l)->z) {
#line 900
    return;
  }
#line 903
  _gdsl_node_set_content(c->c, (gdsl_element_t const   )e);
#line 904
  return;
}
}
#line 906 "../gdsl_list.c"
extern gdsl_element_t gdsl_list_cursor_get_content(gdsl_list_cursor_t const   c ) 
{ 
  gdsl_element_t tmp ;

  {
#line 911
  if ((unsigned int )c->c == (unsigned int )(c->l)->d) {
#line 913
    return ((void *)0);
  }
#line 916
  if ((unsigned int )c->c == (unsigned int )(c->l)->z) {
#line 918
    return ((void *)0);
  }
#line 921
  tmp = _gdsl_node_get_content((_gdsl_node_t const   )c->c);
#line 921
  return (tmp);
}
}
#line 924 "../gdsl_list.c"
extern gdsl_element_t gdsl_list_cursor_insert_after(gdsl_list_cursor_t c , void *v ) 
{ 
  gdsl_element_t e ;
  _gdsl_node_t n ;

  {
#line 932
  if ((unsigned int )c->c == (unsigned int )(c->l)->d) {
#line 934
    return ((void *)0);
  }
#line 937
  if ((unsigned int )c->c == (unsigned int )(c->l)->z) {
#line 939
    return ((void *)0);
  }
#line 942
  n = _gdsl_node_alloc();
#line 944
  if ((unsigned int )n == (unsigned int )((void *)0)) {
#line 946
    return ((void *)0);
  }
#line 949
  e = (*((c->l)->alloc_func))(v);
#line 951
  if ((unsigned int )e == (unsigned int )((void *)0)) {
#line 953
    _gdsl_node_free(n);
#line 954
    return ((void *)0);
  }
#line 957
  _gdsl_node_set_content(n, (gdsl_element_t const   )e);
#line 958
  _gdsl_list_insert_after(n, c->c);
#line 960
  ((c->l)->card) ++;
#line 962
  return (e);
}
}
#line 965 "../gdsl_list.c"
extern gdsl_element_t gdsl_list_cursor_insert_before(gdsl_list_cursor_t c , void *v ) 
{ 
  gdsl_element_t e ;
  _gdsl_node_t n ;

  {
#line 973
  if ((unsigned int )c->c == (unsigned int )(c->l)->d) {
#line 975
    return ((void *)0);
  }
#line 978
  if ((unsigned int )c->c == (unsigned int )(c->l)->z) {
#line 980
    return ((void *)0);
  }
#line 983
  n = _gdsl_node_alloc();
#line 985
  if ((unsigned int )n == (unsigned int )((void *)0)) {
#line 987
    return ((void *)0);
  }
#line 990
  e = (*((c->l)->alloc_func))(v);
#line 992
  if ((unsigned int )e == (unsigned int )((void *)0)) {
#line 994
    _gdsl_node_free(n);
#line 995
    return ((void *)0);
  }
#line 998
  _gdsl_node_set_content(n, (gdsl_element_t const   )e);
#line 999
  _gdsl_list_insert_before(n, c->c);
#line 1001
  ((c->l)->card) ++;
#line 1003
  return (e);
}
}
#line 1006 "../gdsl_list.c"
extern gdsl_element_t gdsl_list_cursor_remove(gdsl_list_cursor_t c ) 
{ 
  gdsl_element_t e ;
  _gdsl_node_t tmp ;

  {
#line 1014
  if ((unsigned int )c->c == (unsigned int )(c->l)->d) {
#line 1016
    return ((void *)0);
  }
#line 1019
  if ((unsigned int )c->c == (unsigned int )(c->l)->z) {
#line 1021
    return ((void *)0);
  }
#line 1024
  tmp = _gdsl_node_get_succ((_gdsl_node_t const   )c->c);
#line 1026
  _gdsl_list_remove(c->c);
#line 1027
  e = _gdsl_node_get_content((_gdsl_node_t const   )c->c);
#line 1028
  _gdsl_node_free(c->c);
#line 1029
  c->c = tmp;
#line 1030
  ((c->l)->card) --;
#line 1032
  return (e);
}
}
#line 1035 "../gdsl_list.c"
extern gdsl_element_t gdsl_list_cursor_remove_after(gdsl_list_cursor_t c ) 
{ 
  gdsl_element_t e ;
  _gdsl_node_t tmp ;

  {
#line 1043
  if ((unsigned int )c->c == (unsigned int )(c->l)->d) {
#line 1045
    return ((void *)0);
  }
#line 1048
  tmp = _gdsl_node_get_succ((_gdsl_node_t const   )c->c);
#line 1050
  if ((unsigned int )tmp == (unsigned int )(c->l)->z) {
#line 1052
    return ((void *)0);
  }
#line 1055
  _gdsl_list_remove(tmp);
#line 1056
  e = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 1057
  _gdsl_node_free(tmp);
#line 1059
  ((c->l)->card) --;
#line 1061
  return (e);
}
}
#line 1064 "../gdsl_list.c"
extern gdsl_element_t gdsl_list_cursor_remove_before(gdsl_list_cursor_t c ) 
{ 
  gdsl_element_t e ;
  _gdsl_node_t tmp ;

  {
#line 1072
  if ((unsigned int )c->c == (unsigned int )(c->l)->z) {
#line 1074
    return ((void *)0);
  }
#line 1077
  tmp = _gdsl_node_get_pred((_gdsl_node_t const   )c->c);
#line 1079
  if ((unsigned int )tmp == (unsigned int )(c->l)->d) {
#line 1081
    return ((void *)0);
  }
#line 1084
  _gdsl_list_remove(tmp);
#line 1085
  e = _gdsl_node_get_content((_gdsl_node_t const   )tmp);
#line 1086
  _gdsl_node_free(tmp);
#line 1088
  ((c->l)->card) --;
#line 1090
  return (e);
}
}
#line 1093 "../gdsl_list.c"
extern gdsl_list_cursor_t gdsl_list_cursor_delete(gdsl_list_cursor_t c ) 
{ 
  gdsl_element_t e ;

  {
#line 1100
  e = gdsl_list_cursor_remove(c);
#line 1102
  if ((unsigned int )e != (unsigned int )((void *)0)) {
#line 1104
    (*((c->l)->free_func))(e);
#line 1105
    return (c);
  }
#line 1108
  return ((gdsl_list_cursor_t )((void *)0));
}
}
#line 1111 "../gdsl_list.c"
extern gdsl_list_cursor_t gdsl_list_cursor_delete_after(gdsl_list_cursor_t c ) 
{ 
  gdsl_element_t e ;

  {
#line 1118
  e = gdsl_list_cursor_remove_after(c);
#line 1120
  if ((unsigned int )e != (unsigned int )((void *)0)) {
#line 1122
    (*((c->l)->free_func))(e);
#line 1123
    return (c);
  }
#line 1126
  return ((gdsl_list_cursor_t )((void *)0));
}
}
#line 1129 "../gdsl_list.c"
extern gdsl_list_cursor_t gdsl_list_cursor_delete_before(gdsl_list_cursor_t c ) 
{ 
  gdsl_element_t e ;

  {
#line 1136
  e = gdsl_list_cursor_remove_before(c);
#line 1138
  if ((unsigned int )e != (unsigned int )((void *)0)) {
#line 1140
    (*((c->l)->free_func))(e);
#line 1141
    return (c);
  }
#line 1144
  return ((gdsl_list_cursor_t )((void *)0));
}
}
#line 1151 "../gdsl_list.c"
static gdsl_element_t default_alloc___5(void *e ) 
{ 


  {
#line 1154
  return (e);
}
}
#line 1157 "../gdsl_list.c"
static void default_free___5(gdsl_element_t e ) 
{ 


  {
#line 1161
  return;
}
}
#line 1163 "../gdsl_list.c"
static _gdsl_node_t search_by_function(gdsl_list_t l , long (*comp_f)(gdsl_element_t const   E ,
                                                                      void *VALUE ) ,
                                       void const   *value ) 
{ 
  _gdsl_node_t left ;
  _gdsl_node_t right ;
  gdsl_element_t tmp ;
  long tmp___0 ;
  gdsl_element_t tmp___1 ;
  long tmp___2 ;
  _gdsl_node_t tmp___3 ;

  {
#line 1169
  left = _gdsl_node_get_succ((_gdsl_node_t const   )l->d);
#line 1170
  right = _gdsl_node_get_pred((_gdsl_node_t const   )l->z);
#line 1172
  while (1) {
#line 1172
    tmp___3 = _gdsl_node_get_succ((_gdsl_node_t const   )right);
#line 1172
    if (! ((unsigned int )left != (unsigned int )tmp___3)) {
#line 1172
      break;
    }
#line 1174
    tmp = _gdsl_node_get_content((_gdsl_node_t const   )left);
#line 1174
    tmp___0 = (*comp_f)((gdsl_element_t const   )tmp, (void *)value);
#line 1174
    if (tmp___0 == 0L) {
#line 1176
      return (left);
    }
#line 1179
    if ((unsigned int )left == (unsigned int )right) {
#line 1181
      return ((_gdsl_node_t )((void *)0));
    }
#line 1184
    tmp___1 = _gdsl_node_get_content((_gdsl_node_t const   )right);
#line 1184
    tmp___2 = (*comp_f)((gdsl_element_t const   )tmp___1, (void *)value);
#line 1184
    if (tmp___2 == 0L) {
#line 1186
      return (right);
    }
#line 1189
    left = _gdsl_node_get_succ((_gdsl_node_t const   )left);
#line 1190
    right = _gdsl_node_get_pred((_gdsl_node_t const   )right);
  }
#line 1193
  return ((_gdsl_node_t )((void *)0));
}
}
#line 1196 "../gdsl_list.c"
static _gdsl_node_t search_by_position___0(gdsl_list_t l , ulong___0 pos ) 
{ 
  ulong___0 m ;
  _gdsl_node_t tmp ;

  {
#line 1202
  if (pos <= 0UL) {
#line 1204
    return ((_gdsl_node_t )((void *)0));
  } else
#line 1202
  if (pos > l->card) {
#line 1204
    return ((_gdsl_node_t )((void *)0));
  }
#line 1207
  m = l->card / 2UL + 1UL;
#line 1209
  if (pos < m) {
#line 1211
    tmp = _gdsl_node_get_succ((_gdsl_node_t const   )l->d);
#line 1213
    while (pos > 1UL) {
#line 1215
      tmp = _gdsl_node_get_succ((_gdsl_node_t const   )tmp);
#line 1216
      pos --;
    }
  } else {
#line 1221
    pos = l->card - pos;
#line 1222
    tmp = _gdsl_node_get_pred((_gdsl_node_t const   )l->z);
#line 1224
    while (pos > 0UL) {
#line 1226
      tmp = _gdsl_node_get_pred((_gdsl_node_t const   )tmp);
#line 1227
      pos --;
    }
  }
#line 1231
  return (tmp);
}
}
#line 1234 "../gdsl_list.c"
static gdsl_element_t update_cursor(gdsl_list_cursor_t c , _gdsl_node_t n ) 
{ 
  gdsl_element_t tmp ;

  {
#line 1237
  if ((unsigned int )n == (unsigned int )((void *)0)) {
#line 1239
    return ((void *)0);
  }
#line 1242
  c->c = n;
#line 1244
  tmp = _gdsl_node_get_content((_gdsl_node_t const   )n);
#line 1244
  return (tmp);
}
}
#line 1247 "../gdsl_list.c"
static _gdsl_node_t sort(_gdsl_node_t u , long (*comp_f)(gdsl_element_t const   E ,
                                                         void *VALUE ) , _gdsl_node_t z ) 
{ 
  _gdsl_node_t s ;
  _gdsl_node_t t ;
  _gdsl_node_t tmp ;
  _gdsl_node_t tmp___0 ;
  _gdsl_node_t tmp___1 ;
  _gdsl_node_t tmp___2 ;
  _gdsl_node_t tmp___3 ;
  _gdsl_node_t tmp___4 ;
  _gdsl_node_t tmp___5 ;

  {
#line 1253
  tmp = _gdsl_node_get_succ((_gdsl_node_t const   )u);
#line 1253
  if ((unsigned int )tmp == (unsigned int )z) {
#line 1255
    return (u);
  }
#line 1258
  s = u;
#line 1259
  tmp___0 = _gdsl_node_get_succ((_gdsl_node_t const   )u);
#line 1259
  tmp___1 = _gdsl_node_get_succ((_gdsl_node_t const   )tmp___0);
#line 1259
  t = _gdsl_node_get_succ((_gdsl_node_t const   )tmp___1);
#line 1260
  while ((unsigned int )t != (unsigned int )z) {
#line 1262
    u = _gdsl_node_get_succ((_gdsl_node_t const   )u);
#line 1263
    tmp___2 = _gdsl_node_get_succ((_gdsl_node_t const   )t);
#line 1263
    t = _gdsl_node_get_succ((_gdsl_node_t const   )tmp___2);
  }
#line 1266
  t = _gdsl_node_get_succ((_gdsl_node_t const   )u);
#line 1267
  _gdsl_node_set_succ(u, (_gdsl_node_t const   )z);
#line 1269
  tmp___3 = sort(t, comp_f, z);
#line 1269
  tmp___4 = sort(s, comp_f, z);
#line 1269
  tmp___5 = merge(tmp___4, tmp___3, comp_f, z);
#line 1269
  return (tmp___5);
}
}
#line 1272 "../gdsl_list.c"
static _gdsl_node_t merge(_gdsl_node_t s , _gdsl_node_t t , long (*comp_f)(gdsl_element_t const   E ,
                                                                           void *VALUE ) ,
                          _gdsl_node_t z ) 
{ 
  _gdsl_node_t u ;
  gdsl_element_t tmp ;
  gdsl_element_t tmp___0 ;
  long tmp___1 ;

  {
#line 1275
  u = z;
#line 1277
  while (1) {
#line 1284
    if ((unsigned int )t == (unsigned int )z) {
#line 1286
      _gdsl_node_link(u, s);
#line 1287
      u = s;
#line 1288
      s = _gdsl_node_get_succ((_gdsl_node_t const   )s);
#line 1289
      goto __Cont;
    }
#line 1293
    if ((unsigned int )s == (unsigned int )z) {
#line 1295
      _gdsl_node_link(u, t);
#line 1296
      u = t;
#line 1297
      t = _gdsl_node_get_succ((_gdsl_node_t const   )t);
#line 1298
      goto __Cont;
    }
#line 1302
    tmp = _gdsl_node_get_content((_gdsl_node_t const   )t);
#line 1302
    tmp___0 = _gdsl_node_get_content((_gdsl_node_t const   )s);
#line 1302
    tmp___1 = (*comp_f)((gdsl_element_t const   )tmp___0, tmp);
#line 1302
    if (tmp___1 <= 0L) {
#line 1304
      _gdsl_node_link(u, s);
#line 1305
      u = s;
#line 1306
      s = _gdsl_node_get_succ((_gdsl_node_t const   )s);
    } else {
#line 1310
      _gdsl_node_link(u, t);
#line 1311
      u = t;
#line 1312
      t = _gdsl_node_get_succ((_gdsl_node_t const   )t);
    }
    __Cont: /* CIL Label */ 
#line 1277
    if (! ((unsigned int )u != (unsigned int )z)) {
#line 1277
      break;
    }
  }
#line 1317
  u = _gdsl_node_get_succ((_gdsl_node_t const   )z);
#line 1318
  _gdsl_node_set_succ(z, (_gdsl_node_t const   )z);
#line 1320
  return (u);
}
}
#line 1323 "../gdsl_list.c"
static gdsl_location_t get_location___4(gdsl_list_t list , _gdsl_node_t node ) 
{ 
  gdsl_location_t location ;
  _gdsl_node_t tmp ;
  _gdsl_node_t tmp___0 ;

  {
#line 1326
  location = (gdsl_location_t )0;
#line 1328
  tmp = _gdsl_node_get_succ((_gdsl_node_t const   )list->d);
#line 1328
  if ((unsigned int )node == (unsigned int )tmp) {
#line 1330
    location = (gdsl_location_t )((unsigned int )location | 1U);
  }
#line 1333
  tmp___0 = _gdsl_node_get_pred((_gdsl_node_t const   )list->z);
#line 1333
  if ((unsigned int )node == (unsigned int )tmp___0) {
#line 1335
    location = (gdsl_location_t )((unsigned int )location | 2U);
  }
#line 1338
  return (location);
}
}
#line 1 "cil-_8iBobj_.o"
#pragma merger("0","/tmp/cil-gdHsgPik.i","")
#line 32 "../gdsl_sort.c"
static void taslactite___0(gdsl_element_t *t , ulong___0 n , ulong___0 k , long (*comp_f)(gdsl_element_t const   E ,
                                                                                          void *VALUE ) ) ;
#line 39 "../gdsl_sort.c"
extern void gdsl_sort(gdsl_element_t *t , ulong___0 n , long (* const  comp_f)(gdsl_element_t const   E ,
                                                                               void *VALUE ) ) 
{ 
  ulong___0 i ;
  gdsl_element_t v ;

  {
#line 47
  i = n / 2UL;
#line 47
  while (i >= 1UL) {
#line 49
    taslactite___0(t, n, i, (long (*)(gdsl_element_t const   E , void *VALUE ))comp_f);
#line 47
    i --;
  }
#line 52
  i = n;
#line 53
  while (i > 1UL) {
#line 55
    v = *(t + 0);
#line 57
    *(t + 0) = *(t + (i - 1UL));
#line 58
    *(t + (i - 1UL)) = v;
#line 60
    i --;
#line 60
    taslactite___0(t, i, (ulong___0 )1, (long (*)(gdsl_element_t const   E , void *VALUE ))comp_f);
  }
#line 62
  return;
}
}
#line 68 "../gdsl_sort.c"
static void taslactite___0(gdsl_element_t *t , ulong___0 n , ulong___0 k , long (*comp_f)(gdsl_element_t const   E ,
                                                                                          void *VALUE ) ) 
{ 
  ulong___0 j ;
  gdsl_element_t v ;
  long tmp ;
  long tmp___0 ;

  {
#line 74
  v = *(t + (k - 1UL));
#line 76
  while (k <= n / 2UL) {
#line 78
    j = k + k;
#line 80
    if (j < n) {
#line 80
      tmp = (*comp_f)((gdsl_element_t const   )*(t + (j - 1UL)), *(t + j));
#line 80
      if (tmp < 0L) {
#line 82
        j ++;
      }
    }
#line 85
    tmp___0 = (*comp_f)((gdsl_element_t const   )*(t + (j - 1UL)), v);
#line 85
    if (tmp___0 <= 0L) {
#line 87
      break;
    }
#line 90
    *(t + (k - 1UL)) = *(t + (j - 1UL));
#line 91
    k = j;
  }
#line 94
  *(t + (k - 1UL)) = v;
#line 95
  return;
}
}
#line 1 "cil-N0cqcBwj.o"
#pragma merger("0","/tmp/cil-vMelXVV7.i","")
#line 237 "../_gdsl_node.h"
extern void _gdsl_node_unlink(_gdsl_node_t node1 , _gdsl_node_t node2 ) ;
#line 49 "../_gdsl_node.c"
extern _gdsl_node_t _gdsl_node_alloc(void) 
{ 
  _gdsl_node_t n ;
  void *tmp ;

  {
#line 54
  tmp = malloc(sizeof(struct _gdsl_node ));
#line 54
  n = (_gdsl_node_t )tmp;
#line 56
  if ((unsigned int )n == (unsigned int )((void *)0)) {
#line 58
    return ((_gdsl_node_t )((void *)0));
  }
#line 61
  n->content = (void *)0;
#line 62
  n->succ = (struct _gdsl_node *)((void *)0);
#line 63
  n->pred = (struct _gdsl_node *)((void *)0);
#line 65
  return (n);
}
}
#line 68 "../_gdsl_node.c"
extern gdsl_element_t _gdsl_node_free(_gdsl_node_t n ) 
{ 
  gdsl_element_t e ;

  {
#line 75
  e = n->content;
#line 76
  free((void *)n);
#line 78
  return (e);
}
}
#line 85 "../_gdsl_node.c"
extern _gdsl_node_t _gdsl_node_get_succ(_gdsl_node_t const   n ) 
{ 


  {
#line 90
  return (n->succ);
}
}
#line 93 "../_gdsl_node.c"
extern _gdsl_node_t _gdsl_node_get_pred(_gdsl_node_t const   n ) 
{ 


  {
#line 98
  return (n->pred);
}
}
#line 101 "../_gdsl_node.c"
extern gdsl_element_t _gdsl_node_get_content(_gdsl_node_t const   n ) 
{ 


  {
#line 106
  return (n->content);
}
}
#line 113 "../_gdsl_node.c"
extern void _gdsl_node_set_succ(_gdsl_node_t n , _gdsl_node_t const   succ ) 
{ 


  {
#line 118
  n->succ = (struct _gdsl_node *)succ;
#line 119
  return;
}
}
#line 121 "../_gdsl_node.c"
extern void _gdsl_node_set_pred(_gdsl_node_t n , _gdsl_node_t const   pred ) 
{ 


  {
#line 126
  n->pred = (struct _gdsl_node *)pred;
#line 127
  return;
}
}
#line 129 "../_gdsl_node.c"
extern void _gdsl_node_set_content(_gdsl_node_t n , gdsl_element_t const   e ) 
{ 


  {
#line 134
  n->content = (gdsl_element_t )e;
#line 135
  return;
}
}
#line 137 "../_gdsl_node.c"
extern void _gdsl_node_link(_gdsl_node_t node1 , _gdsl_node_t node2 ) 
{ 


  {
#line 143
  node1->succ = node2;
#line 144
  node2->pred = node1;
#line 145
  return;
}
}
#line 147 "../_gdsl_node.c"
extern void _gdsl_node_unlink(_gdsl_node_t node1 , _gdsl_node_t node2 ) 
{ 


  {
#line 153
  node1->succ = (struct _gdsl_node *)((void *)0);
#line 154
  node2->pred = (struct _gdsl_node *)((void *)0);
#line 155
  return;
}
}
#line 161 "../_gdsl_node.c"
extern void _gdsl_node_write(_gdsl_node_t const   n , void (* const  write_f)(_gdsl_node_t const   NODE ,
                                                                              FILE *OUTPUT_FILE ,
                                                                              void *USER_DATA ) ,
                             FILE *file , void *user_data ) 
{ 


  {
#line 169
  (*write_f)(n, file, user_data);
#line 170
  return;
}
}
#line 172 "../_gdsl_node.c"
extern void _gdsl_node_write_xml(_gdsl_node_t const   n , void (* const  write_f)(_gdsl_node_t const   NODE ,
                                                                                  FILE *OUTPUT_FILE ,
                                                                                  void *USER_DATA ) ,
                                 FILE *file , void *user_data ) 
{ 


  {
#line 180
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<_GDSL_NODE REF=\"%p\"",
          (void *)n);
#line 182
  if ((unsigned int )n->succ != (unsigned int )((void *)0)) {
#line 184
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )" SUCC=\"%p\"",
            (void *)n->succ);
  } else {
#line 188
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )" SUCC=\"\"");
  }
#line 191
  if ((unsigned int )n->pred != (unsigned int )((void *)0)) {
#line 193
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )" PRED=\"%p\">",
            (void *)n->pred);
  } else {
#line 197
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )" PRED=\"\">");
  }
#line 200
  if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 202
    (*write_f)(n, file, user_data);
  }
#line 205
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</_GDSL_NODE>\n");
#line 206
  return;
}
}
#line 208 "../_gdsl_node.c"
extern void _gdsl_node_dump(_gdsl_node_t const   n , void (* const  write_f)(_gdsl_node_t const   NODE ,
                                                                             FILE *OUTPUT_FILE ,
                                                                             void *USER_DATA ) ,
                            FILE *file , void *user_data ) 
{ 


  {
#line 215
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<_GDSL_NODE REF=\"%p\"",
          (void *)n);
#line 217
  if ((unsigned int )n->content != (unsigned int )((void *)0)) {
#line 219
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )" CONTENT=\"%p\"",
            n->content);
  } else {
#line 223
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )" CONTENT=\"\"");
  }
#line 226
  if ((unsigned int )n->succ != (unsigned int )((void *)0)) {
#line 228
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )" SUCC=\"%p\"",
            (void *)n->succ);
  } else {
#line 232
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )" SUCC=\"\"");
  }
#line 235
  if ((unsigned int )n->pred != (unsigned int )((void *)0)) {
#line 237
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )" PRED=\"%p\">",
            (void *)n->pred);
  } else {
#line 241
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )" PRED=\"\">");
  }
#line 244
  if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 246
    (*write_f)(n, file, user_data);
  }
#line 249
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</_GDSL_NODE>\n");
#line 250
  return;
}
}
#line 1 "cil-4U6BoACb.o"
#pragma merger("0","/tmp/cil-qlq5uj6u.i","")
#line 142 "/usr/include/string.h"
extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1,2))) strcmp)(char const   *__s1 ,
                                                                                     char const   *__s2 )  __attribute__((__pure__)) ;
#line 87 "../gdsl_hash.h"
extern ulong___0 gdsl_hash(char const   *key ) ;
#line 127
extern gdsl_hash_t gdsl_hash_alloc(char const   *name , gdsl_element_t (*alloc_func)(void *USER_DATA ) ,
                                   void (*free_func)(gdsl_element_t E ) , char const   *(*key_func)(void *VALUE ) ,
                                   ulong___0 (*hash_func)(char const   *KEY ) , ushort___0 initial_size ) ;
#line 149
extern void gdsl_hash_free(gdsl_hash_t ht ) ;
#line 166
extern void gdsl_hash_flush(gdsl_hash_t ht ) ;
#line 183
extern char const   *gdsl_hash_get_name(gdsl_hash_t const   ht ) ;
#line 196
extern ushort___0 gdsl_hash_get_entries_number(gdsl_hash_t const   ht ) ;
#line 214
extern ushort___0 gdsl_hash_get_lists_max_size(gdsl_hash_t const   ht ) ;
#line 229
extern ushort___0 gdsl_hash_get_longest_list_size(gdsl_hash_t const   ht ) ;
#line 243
extern ulong___0 gdsl_hash_get_size(gdsl_hash_t const   ht ) ;
#line 257
extern double gdsl_hash_get_fill_factor(gdsl_hash_t const   ht ) ;
#line 278
extern gdsl_hash_t gdsl_hash_set_name(gdsl_hash_t ht , char const   *name ) ;
#line 312
extern gdsl_element_t gdsl_hash_insert(gdsl_hash_t ht , void *value ) ;
#line 333
extern gdsl_element_t gdsl_hash_remove(gdsl_hash_t ht , char const   *key ) ;
#line 354
extern gdsl_hash_t gdsl_hash_delete(gdsl_hash_t ht , char const   *key ) ;
#line 387
extern gdsl_hash_t gdsl_hash_modify(gdsl_hash_t ht , ushort___0 new_size , ushort___0 new_max_lists_size ) ;
#line 412
extern gdsl_element_t gdsl_hash_search(gdsl_hash_t const   ht , char const   *key ) ;
#line 436
extern gdsl_element_t gdsl_hash_map(gdsl_hash_t const   ht , int (*f)(gdsl_element_t const   E ,
                                                                      gdsl_location_t LOCATION ,
                                                                      void *USER_DATA ) ,
                                    void *user_data ) ;
#line 461
extern void gdsl_hash_write(gdsl_hash_t const   ht , void (*f)(gdsl_element_t const   E ,
                                                               FILE *OUTPUT_FILE ,
                                                               gdsl_location_t LOCATION ,
                                                               void *USER_DATA ) ,
                            FILE *file , void *user_data ) ;
#line 484
extern void gdsl_hash_write_xml(gdsl_hash_t const   ht , void (*f)(gdsl_element_t const   E ,
                                                                   FILE *OUTPUT_FILE ,
                                                                   gdsl_location_t LOCATION ,
                                                                   void *USER_DATA ) ,
                                FILE *file , void *user_data ) ;
#line 507
extern void gdsl_hash_dump(gdsl_hash_t const   ht , void (*f)(gdsl_element_t const   E ,
                                                              FILE *OUTPUT_FILE ,
                                                              gdsl_location_t LOCATION ,
                                                              void *USER_DATA ) ,
                           FILE *file , void *user_data ) ;
#line 72 "../gdsl_hash.c"
static gdsl_element_t default_alloc___6(void *e ) ;
#line 75
static void default_free___6(gdsl_element_t e ) ;
#line 78
static char const   *default_key(void *e ) ;
#line 81
static long search_element_by_key(gdsl_element_t e , void *key ) ;
#line 84
static int local_map_f(gdsl_element_t e , gdsl_location_t location , void *user_data ) ;
#line 87
static void local_write_f(gdsl_element_t e , FILE *file , gdsl_location_t location ,
                          void *user_data ) ;
#line 90
static void local_write_xml_f(gdsl_element_t e , FILE *file , gdsl_location_t location ,
                              void *user_data ) ;
#line 93
static int destroy_element(gdsl_element_t e , gdsl_location_t location , void *user_infos ) ;
#line 100 "../gdsl_hash.c"
extern ulong___0 gdsl_hash(char const   *key ) 
{ 
  ulong___0 hash ;
  char *ptr ;
  char *tmp ;

  {
#line 103
  hash = (ulong___0 )0;
#line 104
  ptr = (char *)key;
#line 106
  while ((int )*ptr != 0) {
#line 108
    tmp = ptr;
#line 108
    ptr ++;
#line 108
    hash = hash * 2UL + (ulong___0 )*tmp;
  }
#line 111
  return (hash);
}
}
#line 118 "../gdsl_hash.c"
extern gdsl_hash_t gdsl_hash_alloc(char const   *name , gdsl_element_t (*alloc_func)(void *USER_DATA ) ,
                                   void (*free_func)(gdsl_element_t E ) , char const   *(*key_func)(void *VALUE ) ,
                                   ulong___0 (*hash_func)(char const   *KEY ) , ushort___0 initial_size ) 
{ 
  ushort___0 i ;
  ushort___0 j ;
  gdsl_hash_t ht ;
  void *tmp ;
  gdsl_hash_t tmp___0 ;
  void *tmp___1 ;

  {
#line 128
  tmp = malloc(sizeof(struct hash_table ));
#line 128
  ht = (gdsl_hash_t )tmp;
#line 130
  if ((unsigned int )ht == (unsigned int )((void *)0)) {
#line 132
    return ((gdsl_hash_t )((void *)0));
  }
#line 135
  ht->name = (char *)((void *)0);
#line 137
  tmp___0 = gdsl_hash_set_name(ht, name);
#line 137
  if ((unsigned int )tmp___0 == (unsigned int )((void *)0)) {
#line 139
    free((void *)ht);
#line 140
    return ((gdsl_hash_t )((void *)0));
  }
#line 143
  if ((int )initial_size < 2) {
#line 143
    ht->lists_count = (ushort___0 )51;
  } else {
#line 143
    ht->lists_count = initial_size;
  }
#line 145
  tmp___1 = malloc((unsigned int )ht->lists_count * sizeof(gdsl_list_t ));
#line 145
  ht->lists = (gdsl_list_t *)tmp___1;
#line 147
  if ((unsigned int )ht->lists == (unsigned int )((void *)0)) {
#line 149
    free((void *)ht->name);
#line 150
    free((void *)ht);
#line 151
    return ((gdsl_hash_t )((void *)0));
  }
#line 154
  i = (ushort___0 )0;
#line 154
  while ((int )i < (int )ht->lists_count) {
#line 156
    *(ht->lists + i) = gdsl_list_alloc((char const   *)((void *)0), (gdsl_element_t (*)(void *USER_DATA ))((void *)0),
                                       (void (*)(gdsl_element_t E ))((void *)0));
#line 158
    if ((unsigned int )*(ht->lists + i) == (unsigned int )((void *)0)) {
#line 160
      j = (ushort___0 )0;
#line 160
      while ((int )j < (int )i) {
#line 162
        gdsl_list_free(*(ht->lists + j));
#line 160
        j = (ushort___0 )((int )j + 1);
      }
#line 165
      if ((unsigned int )ht->name != (unsigned int )((void *)0)) {
#line 167
        free((void *)ht->name);
      }
#line 170
      free((void *)ht->lists);
#line 171
      free((void *)ht);
#line 172
      return ((gdsl_hash_t )((void *)0));
    }
#line 154
    i = (ushort___0 )((int )i + 1);
  }
#line 176
  ht->lists_max_size = (ushort___0 )0;
#line 178
  if ((unsigned int )key_func == (unsigned int )((void *)0)) {
#line 178
    ht->key_func = & default_key;
  } else {
#line 178
    ht->key_func = key_func;
  }
#line 179
  if ((unsigned int )hash_func == (unsigned int )((void *)0)) {
#line 179
    ht->hash_func = & gdsl_hash;
  } else {
#line 179
    ht->hash_func = hash_func;
  }
#line 180
  if ((unsigned int )alloc_func == (unsigned int )((void *)0)) {
#line 180
    ht->alloc_func = & default_alloc___6;
  } else {
#line 180
    ht->alloc_func = alloc_func;
  }
#line 181
  if ((unsigned int )free_func == (unsigned int )((void *)0)) {
#line 181
    ht->free_func = & default_free___6;
  } else {
#line 181
    ht->free_func = free_func;
  }
#line 183
  return (ht);
}
}
#line 186 "../gdsl_hash.c"
extern void gdsl_hash_free(gdsl_hash_t ht ) 
{ 
  ushort___0 i ;

  {
#line 191
  i = (ushort___0 )0;
#line 191
  while ((int )i < (int )ht->lists_count) {
#line 193
    gdsl_list_map_forward((gdsl_list_t const   )*(ht->lists + i), (int (*)(gdsl_element_t const   E ,
                                                                           gdsl_location_t LOCATION ,
                                                                           void *USER_DATA ))(& destroy_element),
                          (void *)ht);
#line 194
    gdsl_list_free(*(ht->lists + i));
#line 191
    i = (ushort___0 )((int )i + 1);
  }
#line 197
  if ((unsigned int )ht->name != (unsigned int )((void *)0)) {
#line 199
    free((void *)ht->name);
  }
#line 202
  free((void *)ht->lists);
#line 203
  free((void *)ht);
#line 204
  return;
}
}
#line 206 "../gdsl_hash.c"
extern void gdsl_hash_flush(gdsl_hash_t ht ) 
{ 
  ushort___0 i ;

  {
#line 211
  i = (ushort___0 )0;
#line 211
  while ((int )i < (int )ht->lists_count) {
#line 213
    gdsl_list_map_forward((gdsl_list_t const   )*(ht->lists + i), (int (*)(gdsl_element_t const   E ,
                                                                           gdsl_location_t LOCATION ,
                                                                           void *USER_DATA ))(& destroy_element),
                          (void *)ht);
#line 214
    gdsl_list_flush(*(ht->lists + i));
#line 211
    i = (ushort___0 )((int )i + 1);
  }
#line 216
  return;
}
}
#line 222 "../gdsl_hash.c"
extern char const   *gdsl_hash_get_name(gdsl_hash_t const   ht ) 
{ 


  {
#line 225
  return ((char const   *)ht->name);
}
}
#line 228 "../gdsl_hash.c"
extern ushort___0 gdsl_hash_get_entries_number(gdsl_hash_t const   ht ) 
{ 


  {
#line 231
  return (ht->lists_count);
}
}
#line 234 "../gdsl_hash.c"
extern ushort___0 gdsl_hash_get_lists_max_size(gdsl_hash_t const   ht ) 
{ 


  {
#line 237
  return (ht->lists_max_size);
}
}
#line 240 "../gdsl_hash.c"
extern ushort___0 gdsl_hash_get_longest_list_size(gdsl_hash_t const   ht ) 
{ 
  ushort___0 i ;
  ushort___0 m ;
  ulong___0 tmp ;
  ulong___0 tmp___0 ;

  {
#line 244
  m = (ushort___0 )0;
#line 246
  i = (ushort___0 )0;
#line 246
  while ((int )i < (int )ht->lists_count) {
#line 248
    tmp___0 = gdsl_list_get_size((gdsl_list_t const   )*(ht->lists + i));
#line 248
    if (tmp___0 > (ulong___0 )m) {
#line 250
      tmp = gdsl_list_get_size((gdsl_list_t const   )*(ht->lists + i));
#line 250
      m = (ushort___0 )tmp;
    }
#line 246
    i = (ushort___0 )((int )i + 1);
  }
#line 254
  return (m);
}
}
#line 257 "../gdsl_hash.c"
extern ulong___0 gdsl_hash_get_size(gdsl_hash_t const   ht ) 
{ 
  ushort___0 i ;
  ulong___0 n ;
  ulong___0 tmp ;

  {
#line 261
  n = (ulong___0 )0;
#line 263
  i = (ushort___0 )0;
#line 263
  while ((int )i < (int )ht->lists_count) {
#line 265
    tmp = gdsl_list_get_size((gdsl_list_t const   )*(ht->lists + i));
#line 265
    n += tmp;
#line 263
    i = (ushort___0 )((int )i + 1);
  }
#line 268
  return (n);
}
}
#line 271 "../gdsl_hash.c"
extern double gdsl_hash_get_fill_factor(gdsl_hash_t const   ht ) 
{ 
  ulong___0 tmp ;

  {
#line 274
  tmp = gdsl_hash_get_size(ht);
#line 274
  return ((double )tmp / (double )ht->lists_count);
}
}
#line 281 "../gdsl_hash.c"
extern gdsl_hash_t gdsl_hash_set_name(gdsl_hash_t ht , char const   *name ) 
{ 
  size_t tmp ;
  void *tmp___0 ;

  {
#line 284
  if ((unsigned int )ht->name != (unsigned int )((void *)0)) {
#line 286
    free((void *)ht->name);
#line 287
    ht->name = (char *)((void *)0);
  }
#line 290
  if ((unsigned int )name != (unsigned int )((void *)0)) {
#line 292
    tmp = strlen(name);
#line 292
    tmp___0 = malloc((1U + tmp) * sizeof(char ));
#line 292
    ht->name = (char *)tmp___0;
#line 294
    if ((unsigned int )ht->name == (unsigned int )((void *)0)) {
#line 296
      return ((gdsl_hash_t )((void *)0));
    }
#line 299
    strcpy((char * __restrict  )ht->name, (char const   * __restrict  )name);
  }
#line 302
  return (ht);
}
}
#line 305 "../gdsl_hash.c"
extern gdsl_element_t gdsl_hash_insert(gdsl_hash_t ht , void *value ) 
{ 
  ushort___0 indix ;
  hash_element he ;
  gdsl_list_t l ;
  void *tmp ;
  ulong___0 tmp___0 ;
  ulong___0 tmp___1 ;
  gdsl_hash_t tmp___2 ;
  ulong___0 tmp___3 ;
  gdsl_element_t tmp___4 ;

  {
#line 312
  tmp = malloc(sizeof(struct hash_element ));
#line 312
  he = (hash_element )tmp;
#line 314
  if ((unsigned int )he == (unsigned int )((void *)0)) {
#line 316
    return ((void *)0);
  }
#line 319
  he->content = (*(ht->alloc_func))(value);
#line 321
  if ((unsigned int )he->content == (unsigned int )((void *)0)) {
#line 323
    free((void *)he);
#line 324
    return ((void *)0);
  }
#line 327
  he->key = (*(ht->key_func))(he->content);
#line 329
  tmp___0 = (*(ht->hash_func))(he->key);
#line 329
  indix = (ushort___0 )(tmp___0 % (unsigned long )ht->lists_count);
#line 330
  l = *(ht->lists + indix);
#line 332
  if ((int )ht->lists_max_size != 0) {
#line 332
    tmp___3 = gdsl_list_get_size((gdsl_list_t const   )l);
#line 332
    if (tmp___3 + 1UL > (ulong___0 )ht->lists_max_size) {
#line 335
      tmp___2 = gdsl_hash_modify(ht, (ushort___0 )((int )ht->lists_count * 2 + 1),
                                 (ushort___0 )((int )ht->lists_max_size * 2));
#line 335
      if ((unsigned int )tmp___2 != (unsigned int )((void *)0)) {
#line 338
        tmp___1 = (*(ht->hash_func))(he->key);
#line 338
        indix = (ushort___0 )(tmp___1 % (unsigned long )ht->lists_count);
#line 339
        l = *(ht->lists + indix);
      }
    }
  }
#line 343
  tmp___4 = gdsl_list_insert_head(l, (void *)he);
#line 343
  if ((unsigned int )tmp___4 == (unsigned int )((void *)0)) {
#line 345
    (*(ht->free_func))(he->content);
#line 346
    free((void *)he);
#line 347
    return ((void *)0);
  }
#line 350
  return (he->content);
}
}
#line 353 "../gdsl_hash.c"
extern gdsl_element_t gdsl_hash_remove(gdsl_hash_t ht , char const   *key ) 
{ 
  ushort___0 indix ;
  hash_element he ;
  gdsl_element_t e ;
  ulong___0 tmp ;
  gdsl_element_t tmp___0 ;

  {
#line 360
  tmp = (*(ht->hash_func))(key);
#line 360
  indix = (ushort___0 )(tmp % (unsigned long )ht->lists_count);
#line 362
  tmp___0 = gdsl_list_remove(*(ht->lists + indix), (long (*)(gdsl_element_t const   E ,
                                                             void *VALUE ))(& search_element_by_key),
                             (void const   *)((void *)key));
#line 362
  he = (hash_element )tmp___0;
#line 366
  if ((unsigned int )he == (unsigned int )((void *)0)) {
#line 368
    return ((void *)0);
  }
#line 371
  e = he->content;
#line 372
  free((void *)he);
#line 374
  return (e);
}
}
#line 377 "../gdsl_hash.c"
extern gdsl_hash_t gdsl_hash_delete(gdsl_hash_t ht , char const   *key ) 
{ 
  gdsl_element_t e ;

  {
#line 382
  e = gdsl_hash_remove(ht, key);
#line 384
  if ((unsigned int )e == (unsigned int )((void *)0)) {
#line 386
    return ((gdsl_hash_t )((void *)0));
  }
#line 389
  (*(ht->free_func))(e);
#line 391
  return (ht);
}
}
#line 394 "../gdsl_hash.c"
extern gdsl_hash_t gdsl_hash_modify(gdsl_hash_t ht , ushort___0 new_size , ushort___0 new_max_lists_size ) 
{ 
  ushort___0 i ;
  ushort___0 j ;
  gdsl_list_t *lists ;
  void *tmp ;
  gdsl_list_t l ;
  gdsl_list_cursor_t c ;
  gdsl_list_cursor_t tmp___0 ;
  hash_element he ;
  ushort___0 indix ;
  ulong___0 tmp___1 ;
  gdsl_list_t l2 ;
  gdsl_element_t tmp___2 ;
  gdsl_element_t tmp___3 ;

  {
#line 404
  tmp = malloc((unsigned int )new_size * sizeof(gdsl_list_t ));
#line 404
  lists = (gdsl_list_t *)tmp;
#line 406
  if ((unsigned int )lists == (unsigned int )((void *)0)) {
#line 408
    return ((gdsl_hash_t )((void *)0));
  }
#line 412
  i = (ushort___0 )0;
#line 412
  while ((int )i < (int )new_size) {
#line 414
    *(lists + i) = gdsl_list_alloc((char const   *)((void *)0), (gdsl_element_t (*)(void *USER_DATA ))((void *)0),
                                   (void (*)(gdsl_element_t E ))((void *)0));
#line 416
    if ((unsigned int )*(lists + i) == (unsigned int )((void *)0)) {
#line 418
      j = (ushort___0 )0;
#line 418
      while ((int )j < (int )i) {
#line 420
        gdsl_list_free(*(lists + j));
#line 418
        j = (ushort___0 )((int )j + 1);
      }
#line 423
      free((void *)lists);
#line 424
      return ((gdsl_hash_t )((void *)0));
    }
#line 412
    i = (ushort___0 )((int )i + 1);
  }
#line 429
  i = (ushort___0 )0;
#line 429
  while ((int )i < (int )ht->lists_count) {
#line 431
    l = *(ht->lists + i);
#line 432
    tmp___0 = gdsl_list_cursor_alloc((gdsl_list_t const   )l);
#line 432
    c = tmp___0;
#line 435
    gdsl_list_cursor_move_to_head(c);
#line 435
    while (1) {
#line 435
      tmp___3 = gdsl_list_cursor_get_content((gdsl_list_cursor_t const   )c);
#line 435
      he = (hash_element )tmp___3;
#line 435
      if (! he) {
#line 435
        break;
      }
#line 437
      tmp___1 = (*(ht->hash_func))(he->key);
#line 437
      indix = (ushort___0 )(tmp___1 % (unsigned long )new_size);
#line 438
      l2 = *(lists + indix);
#line 440
      tmp___2 = gdsl_list_insert_head(l2, (void *)he);
#line 440
      if ((unsigned int )tmp___2 == (unsigned int )((void *)0)) {
#line 442
        return ((gdsl_hash_t )((void *)0));
      }
#line 435
      gdsl_list_cursor_step_forward(c);
    }
#line 446
    gdsl_list_cursor_free(c);
#line 429
    i = (ushort___0 )((int )i + 1);
  }
#line 450
  i = (ushort___0 )0;
#line 450
  while ((int )i < (int )ht->lists_count) {
#line 452
    gdsl_list_flush(*(ht->lists + i));
#line 450
    i = (ushort___0 )((int )i + 1);
  }
#line 454
  free((void *)ht->lists);
#line 456
  ht->lists = lists;
#line 457
  ht->lists_count = new_size;
#line 458
  ht->lists_max_size = new_max_lists_size;
#line 460
  return (ht);
}
}
#line 467 "../gdsl_hash.c"
extern gdsl_element_t gdsl_hash_search(gdsl_hash_t const   ht , char const   *key ) 
{ 
  ushort___0 indix ;
  hash_element he ;
  ulong___0 tmp ;
  gdsl_element_t tmp___0 ;

  {
#line 473
  tmp = (*(ht->hash_func))(key);
#line 473
  indix = (ushort___0 )(tmp % (unsigned long )ht->lists_count);
#line 475
  tmp___0 = gdsl_list_search((gdsl_list_t const   )*(ht->lists + indix), (long (*)(gdsl_element_t const   E ,
                                                                                   void *VALUE ))(& search_element_by_key),
                             (void const   *)((void *)key));
#line 475
  he = (hash_element )tmp___0;
#line 478
  if ((unsigned int )he == (unsigned int )((void *)0)) {
#line 480
    return ((void *)0);
  }
#line 483
  return (he->content);
}
}
#line 490 "../gdsl_hash.c"
extern gdsl_element_t gdsl_hash_map(gdsl_hash_t const   ht , int (*f)(gdsl_element_t const   E ,
                                                                      gdsl_location_t LOCATION ,
                                                                      void *USER_DATA ) ,
                                    void *user_data ) 
{ 
  ushort___0 i ;
  struct infos infos ;
  ulong___0 tmp ;
  gdsl_element_t tmp___0 ;

  {
#line 496
  infos.f = (void *(*)(void * , void * , void * ))f;
#line 497
  infos.d = user_data;
#line 498
  infos.e = (void *)0;
#line 500
  i = (ushort___0 )0;
#line 500
  while ((int )i < (int )ht->lists_count) {
#line 502
    tmp = gdsl_list_get_size((gdsl_list_t const   )*(ht->lists + i));
#line 502
    if (tmp == 0UL) {
#line 504
      goto __Cont;
    }
#line 507
    tmp___0 = gdsl_list_map_forward((gdsl_list_t const   )*(ht->lists + i), (int (*)(gdsl_element_t const   E ,
                                                                                     gdsl_location_t LOCATION ,
                                                                                     void *USER_DATA ))(& local_map_f),
                                    (void *)(& infos));
#line 507
    if ((unsigned int )tmp___0 != (unsigned int )((void *)0)) {
#line 510
      return (infos.e);
    }
    __Cont: /* CIL Label */ 
#line 500
    i = (ushort___0 )((int )i + 1);
  }
#line 514
  return ((void *)0);
}
}
#line 521 "../gdsl_hash.c"
extern void gdsl_hash_write(gdsl_hash_t const   ht , void (*f)(gdsl_element_t const   E ,
                                                               FILE *OUTPUT_FILE ,
                                                               gdsl_location_t LOCATION ,
                                                               void *USER_DATA ) ,
                            FILE *file , void *user_data ) 
{ 
  ushort___0 i ;
  struct infos infos ;
  ulong___0 tmp ;

  {
#line 528
  infos.f = (void *(*)(void * , void * , void * ))f;
#line 529
  infos.d = (void *)file;
#line 530
  infos.ud = user_data;
#line 532
  i = (ushort___0 )0;
#line 532
  while ((int )i < (int )ht->lists_count) {
#line 534
    tmp = gdsl_list_get_size((gdsl_list_t const   )*(ht->lists + i));
#line 534
    if (tmp != 0UL) {
#line 536
      gdsl_list_write((gdsl_list_t const   )*(ht->lists + i), (void (*)(gdsl_element_t const   E ,
                                                                        FILE *OUTPUT_FILE ,
                                                                        gdsl_location_t LOCATION ,
                                                                        void *USER_DATA ))(& local_write_f),
                      file, (void *)(& infos));
    }
#line 532
    i = (ushort___0 )((int )i + 1);
  }
#line 540
  return;
}
}
#line 542 "../gdsl_hash.c"
extern void gdsl_hash_write_xml(gdsl_hash_t const   ht , void (*f)(gdsl_element_t const   E ,
                                                                   FILE *OUTPUT_FILE ,
                                                                   gdsl_location_t LOCATION ,
                                                                   void *USER_DATA ) ,
                                FILE *file , void *user_data ) 
{ 
  ushort___0 i ;
  struct infos infos ;
  ulong___0 tmp ;
  char const   *tmp___0 ;
  ulong___0 tmp___1 ;

  {
#line 549
  infos.f = (void *(*)(void * , void * , void * ))f;
#line 550
  infos.d = (void *)file;
#line 551
  infos.ud = user_data;
#line 553
  tmp = gdsl_hash_get_size(ht);
#line 553
  if ((unsigned int )ht->name == (unsigned int )((void *)0)) {
#line 553
    tmp___0 = "";
  } else {
#line 553
    tmp___0 = (char const   *)ht->name;
  }
#line 553
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_HASH REF=\"%p\" NAME=\"%s\" SIZE=\"%ld\" ENTRIES_COUNT=\"%d\">\n",
          (void *)ht, tmp___0, tmp, (int )ht->lists_count);
#line 557
  i = (ushort___0 )0;
#line 557
  while ((int )i < (int )ht->lists_count) {
#line 559
    tmp___1 = gdsl_list_get_size((gdsl_list_t const   )*(ht->lists + i));
#line 559
    if (tmp___1 != 0UL) {
#line 561
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_HASH_ENTRY VALUE=\"%d\">\n",
              (int )i);
#line 562
      gdsl_list_write_xml((gdsl_list_t const   )*(ht->lists + i), (void (*)(gdsl_element_t const   E ,
                                                                            FILE *OUTPUT_FILE ,
                                                                            gdsl_location_t LOCATION ,
                                                                            void *USER_DATA ))(& local_write_xml_f),
                          file, (void *)(& infos));
#line 564
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_HASH_ENTRY>\n");
    }
#line 557
    i = (ushort___0 )((int )i + 1);
  }
#line 568
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_HASH>\n");
#line 569
  return;
}
}
#line 571 "../gdsl_hash.c"
extern void gdsl_hash_dump(gdsl_hash_t const   ht , void (*f)(gdsl_element_t const   E ,
                                                              FILE *OUTPUT_FILE ,
                                                              gdsl_location_t LOCATION ,
                                                              void *USER_DATA ) ,
                           FILE *file , void *user_data ) 
{ 
  ushort___0 i ;
  struct infos infos ;
  ulong___0 tmp ;
  char const   *tmp___0 ;

  {
#line 578
  infos.f = (void *(*)(void * , void * , void * ))f;
#line 579
  infos.d = (void *)file;
#line 580
  infos.ud = user_data;
#line 582
  tmp = gdsl_hash_get_size(ht);
#line 582
  if ((unsigned int )ht->name == (unsigned int )((void *)0)) {
#line 582
    tmp___0 = "";
  } else {
#line 582
    tmp___0 = (char const   *)ht->name;
  }
#line 582
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_HASH REF=\"%p\" NAME=\"%s\" SIZE=\"%ld\" ENTRIES_COUNT=\"%d\" MAX_LISTS_SIZE=\"%d\">\n",
          (void *)ht, tmp___0, tmp, (int )ht->lists_count, (int )ht->lists_max_size);
#line 586
  i = (ushort___0 )0;
#line 586
  while ((int )i < (int )ht->lists_count) {
#line 588
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_HASH_ENTRY VALUE=\"%d\">\n",
            (int )i);
#line 589
    gdsl_list_dump((gdsl_list_t const   )*(ht->lists + i), (void (*)(gdsl_element_t const   E ,
                                                                     FILE *OUTPUT_FILE ,
                                                                     gdsl_location_t LOCATION ,
                                                                     void *USER_DATA ))(& local_write_xml_f),
                   file, (void *)(& infos));
#line 590
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_HASH_ENTRY>\n");
#line 586
    i = (ushort___0 )((int )i + 1);
  }
#line 593
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_HASH>\n");
#line 594
  return;
}
}
#line 600 "../gdsl_hash.c"
static gdsl_element_t default_alloc___6(void *e ) 
{ 


  {
#line 603
  return (e);
}
}
#line 606 "../gdsl_hash.c"
static void default_free___6(gdsl_element_t e ) 
{ 


  {
#line 610
  return;
}
}
#line 612 "../gdsl_hash.c"
static char const   *default_key(void *e ) 
{ 


  {
#line 615
  return ((char const   *)e);
}
}
#line 618 "../gdsl_hash.c"
static long search_element_by_key(gdsl_element_t e , void *key ) 
{ 
  hash_element he ;
  int tmp ;

  {
#line 621
  he = (hash_element )e;
#line 623
  tmp = strcmp(he->key, (char const   *)key);
#line 623
  return ((long )tmp);
}
}
#line 626 "../gdsl_hash.c"
static int local_map_f(gdsl_element_t e , gdsl_location_t location , void *user_data ) 
{ 
  hash_element he ;
  struct infos *infos ;
  int (*map)(gdsl_element_t const   E , gdsl_location_t LOCATION , void *USER_DATA ) ;
  int tmp ;

  {
#line 629
  he = (hash_element )e;
#line 630
  infos = (struct infos *)user_data;
#line 631
  map = (int (*)(gdsl_element_t const   E , gdsl_location_t LOCATION , void *USER_DATA ))infos->f;
#line 633
  infos->e = he->content;
#line 635
  tmp = (*map)((gdsl_element_t const   )he->content, (gdsl_location_t )0, infos->d);
#line 635
  return (tmp);
}
}
#line 638 "../gdsl_hash.c"
static void local_write_f(gdsl_element_t e , FILE *file , gdsl_location_t location ,
                          void *user_data ) 
{ 
  hash_element he ;
  struct infos *infos ;
  void (*write)(gdsl_element_t const   E , FILE *OUTPUT_FILE , gdsl_location_t LOCATION ,
                void *USER_DATA ) ;

  {
#line 641
  he = (hash_element )e;
#line 642
  infos = (struct infos *)user_data;
#line 643
  write = (void (*)(gdsl_element_t const   E , FILE *OUTPUT_FILE , gdsl_location_t LOCATION ,
                    void *USER_DATA ))infos->f;
#line 645
  (*write)((gdsl_element_t const   )he->content, file, (gdsl_location_t )0, infos->ud);
#line 646
  return;
}
}
#line 648 "../gdsl_hash.c"
static void local_write_xml_f(gdsl_element_t e , FILE *file , gdsl_location_t location ,
                              void *user_data ) 
{ 
  hash_element he ;
  struct infos *infos ;
  void (*write)(gdsl_element_t const   E , FILE *OUTPUT_FILE , gdsl_location_t LOCATION ,
                void *USER_DATA ) ;

  {
#line 651
  he = (hash_element )e;
#line 652
  infos = (struct infos *)user_data;
#line 653
  write = (void (*)(gdsl_element_t const   E , FILE *OUTPUT_FILE , gdsl_location_t LOCATION ,
                    void *USER_DATA ))infos->f;
#line 655
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"\n<CONTENT KEY=\"%s\">",
          he->key);
#line 656
  (*write)((gdsl_element_t const   )he->content, file, (gdsl_location_t )0, infos->ud);
#line 657
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</CONTENT>\n");
#line 658
  return;
}
}
#line 660 "../gdsl_hash.c"
static int destroy_element(gdsl_element_t e , gdsl_location_t location , void *user_infos ) 
{ 
  gdsl_hash_t ht ;
  hash_element he ;

  {
#line 663
  ht = (gdsl_hash_t )user_infos;
#line 664
  he = (hash_element )e;
#line 666
  (*(ht->free_func))(he->content);
#line 667
  free((void *)he);
#line 669
  return (1);
}
}
/* compiler builtin: 
   void *__builtin_alloca(unsigned int  ) ;  */
#line 1 "cil-d4vQKQLV.o"
#pragma merger("0","/tmp/cil-VdRCPdfZ.i","")
#line 380 "/usr/include/stdlib.h"
extern  __attribute__((__nothrow__)) int rand(void) ;
#line 382
extern  __attribute__((__nothrow__)) void srand(unsigned int __seed ) ;
#line 43 "/usr/include/string.h"
extern  __attribute__((__nothrow__)) void *( __attribute__((__nonnull__(1,2))) memcpy)(void * __restrict  __dest ,
                                                                                       void const   * __restrict  __src ,
                                                                                       size_t __n ) ;
#line 73 "/usr/include/sys/time.h"
extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1))) gettimeofday)(struct timeval * __restrict  __tv ,
                                                                                         __timezone_ptr_t __tz ) ;
#line 102 "../gdsl_perm.h"
extern gdsl_perm_t gdsl_perm_alloc(char const   *name , ulong___0 const   n ) ;
#line 118
extern void gdsl_perm_free(gdsl_perm_t p ) ;
#line 136
extern gdsl_perm_t gdsl_perm_copy(gdsl_perm_t const   p ) ;
#line 153
extern char const   *gdsl_perm_get_name(gdsl_perm_t const   p ) ;
#line 166
extern ulong___0 gdsl_perm_get_size(gdsl_perm_t const   p ) ;
#line 180
extern ulong___0 gdsl_perm_get_element(gdsl_perm_t const   p , ulong___0 const   i ) ;
#line 194
extern ulong___0 *gdsl_perm_get_elements_array(gdsl_perm_t const   p ) ;
#line 205
extern ulong___0 gdsl_perm_linear_inversions_count(gdsl_perm_t const   p ) ;
#line 217
extern ulong___0 gdsl_perm_linear_cycles_count(gdsl_perm_t const   p ) ;
#line 229
extern ulong___0 gdsl_perm_canonical_cycles_count(gdsl_perm_t const   p ) ;
#line 250
extern gdsl_perm_t gdsl_perm_set_name(gdsl_perm_t p , char const   *name ) ;
#line 267
extern gdsl_perm_t gdsl_perm_linear_next(gdsl_perm_t p ) ;
#line 283
extern gdsl_perm_t gdsl_perm_linear_prev(gdsl_perm_t p ) ;
#line 302
extern gdsl_perm_t gdsl_perm_set_elements_array(gdsl_perm_t p , ulong___0 const   *v ) ;
#line 325
extern gdsl_perm_t gdsl_perm_multiply(gdsl_perm_t r , gdsl_perm_t const   a , gdsl_perm_t const   b ) ;
#line 344
extern gdsl_perm_t gdsl_perm_linear_to_canonical(gdsl_perm_t q , gdsl_perm_t const   p ) ;
#line 362
extern gdsl_perm_t gdsl_perm_canonical_to_linear(gdsl_perm_t q , gdsl_perm_t const   p ) ;
#line 376
extern gdsl_perm_t gdsl_perm_inverse(gdsl_perm_t p ) ;
#line 388
extern gdsl_perm_t gdsl_perm_reverse(gdsl_perm_t p ) ;
#line 403
extern gdsl_perm_t gdsl_perm_randomize(gdsl_perm_t p ) ;
#line 417
extern gdsl_element_t *gdsl_perm_apply_on_array(gdsl_element_t *t , gdsl_perm_t const   p ) ;
#line 442
extern void gdsl_perm_write(gdsl_perm_t const   p , void (* const  write_f)(gdsl_element_t const   E ,
                                                                            FILE *OUTPUT_FILE ,
                                                                            gdsl_location_t LOCATION ,
                                                                            void *USER_DATA ) ,
                            FILE *file , void *user_data ) ;
#line 467
extern void gdsl_perm_write_xml(gdsl_perm_t const   p , void (* const  write_f)(gdsl_element_t const   E ,
                                                                                FILE *OUTPUT_FILE ,
                                                                                gdsl_location_t LOCATION ,
                                                                                void *USER_DATA ) ,
                                FILE *file , void *user_data ) ;
#line 491
extern void gdsl_perm_dump(gdsl_perm_t const   p , void (* const  write_f)(gdsl_element_t const   E ,
                                                                           FILE *OUTPUT_FILE ,
                                                                           gdsl_location_t LOCATION ,
                                                                           void *USER_DATA ) ,
                           FILE *file , void *user_data ) ;
#line 48 "../gdsl_perm.c"
static bool _array_is_valid(ulong___0 const   *v , ulong___0 n ) ;
#line 55 "../gdsl_perm.c"
extern gdsl_perm_t gdsl_perm_alloc(char const   *name , ulong___0 const   n ) 
{ 
  ulong___0 i ;
  gdsl_perm_t p ;
  void *tmp ;
  void *tmp___0 ;
  gdsl_perm_t tmp___1 ;

  {
#line 63
  tmp = malloc(sizeof(struct gdsl_perm ));
#line 63
  p = (gdsl_perm_t )tmp;
#line 65
  if ((unsigned int )p == (unsigned int )((void *)0)) {
#line 67
    return ((gdsl_perm_t )((void *)0));
  }
#line 70
  p->n = (ulong___0 )n;
#line 72
  tmp___0 = malloc((size_t )(p->n * (ulong___0 )sizeof(ulong___0 )));
#line 72
  p->e = (ulong___0 *)tmp___0;
#line 74
  if ((unsigned int )p->e == (unsigned int )((void *)0)) {
#line 76
    free((void *)p);
#line 77
    return ((gdsl_perm_t )((void *)0));
  }
#line 80
  p->name = (char *)((void *)0);
#line 82
  tmp___1 = gdsl_perm_set_name(p, name);
#line 82
  if ((unsigned int )tmp___1 == (unsigned int )((void *)0)) {
#line 84
    free((void *)p->e);
#line 85
    free((void *)p);
#line 86
    return ((gdsl_perm_t )((void *)0));
  }
#line 89
  i = (ulong___0 )0;
#line 89
  while (i < p->n) {
#line 91
    *(p->e + i) = i;
#line 89
    i ++;
  }
#line 94
  return (p);
}
}
#line 97 "../gdsl_perm.c"
extern void gdsl_perm_free(gdsl_perm_t p ) 
{ 


  {
#line 102
  if ((unsigned int )p->name != (unsigned int )((void *)0)) {
#line 104
    free((void *)p->name);
  }
#line 107
  free((void *)p->e);
#line 108
  free((void *)p);
#line 109
  return;
}
}
#line 111 "../gdsl_perm.c"
extern gdsl_perm_t gdsl_perm_copy(gdsl_perm_t const   p ) 
{ 
  ulong___0 i ;
  gdsl_perm_t copy ;

  {
#line 119
  copy = gdsl_perm_alloc((char const   *)p->name, (ulong___0 const   )p->n);
#line 121
  if ((unsigned int )copy == (unsigned int )((void *)0)) {
#line 123
    return ((gdsl_perm_t )((void *)0));
  }
#line 126
  i = (ulong___0 )0;
#line 126
  while (i < p->n) {
#line 128
    *(copy->e + i) = *(p->e + i);
#line 126
    i ++;
  }
#line 131
  return (copy);
}
}
#line 138 "../gdsl_perm.c"
extern char const   *gdsl_perm_get_name(gdsl_perm_t const   p ) 
{ 


  {
#line 143
  return ((char const   *)p->name);
}
}
#line 146 "../gdsl_perm.c"
extern ulong___0 gdsl_perm_get_size(gdsl_perm_t const   p ) 
{ 


  {
#line 151
  return (p->n);
}
}
#line 154 "../gdsl_perm.c"
extern ulong___0 gdsl_perm_get_element(gdsl_perm_t const   p , ulong___0 const   i ) 
{ 


  {
#line 160
  return (*(p->e + i));
}
}
#line 163 "../gdsl_perm.c"
extern ulong___0 *gdsl_perm_get_elements_array(gdsl_perm_t const   p ) 
{ 


  {
#line 168
  return (p->e);
}
}
#line 171 "../gdsl_perm.c"
extern ulong___0 gdsl_perm_linear_inversions_count(gdsl_perm_t const   p ) 
{ 
  ulong___0 i ;
  ulong___0 j ;
  ulong___0 count ;

  {
#line 176
  count = (ulong___0 )0;
#line 180
  i = (ulong___0 )0;
#line 180
  while (i < p->n - 1UL) {
#line 182
    j = i + 1UL;
#line 182
    while (j < p->n) {
#line 184
      if (*(p->e + i) > *(p->e + j)) {
#line 186
        count ++;
      }
#line 182
      j ++;
    }
#line 180
    i ++;
  }
#line 191
  return (count);
}
}
#line 194 "../gdsl_perm.c"
extern ulong___0 gdsl_perm_linear_cycles_count(gdsl_perm_t const   p ) 
{ 
  ulong___0 i ;
  ulong___0 j ;
  ulong___0 count ;

  {
#line 199
  count = (ulong___0 )0;
#line 203
  i = (ulong___0 )0;
#line 203
  while (i < p->n) {
#line 205
    j = *(p->e + i);
#line 207
    while (j > i) {
#line 209
      j = *(p->e + j);
    }
#line 212
    if (j < i) {
#line 214
      goto __Cont;
    }
#line 217
    count ++;
    __Cont: /* CIL Label */ 
#line 203
    i ++;
  }
#line 220
  return (count);
}
}
#line 223 "../gdsl_perm.c"
extern ulong___0 gdsl_perm_canonical_cycles_count(gdsl_perm_t const   p ) 
{ 
  ulong___0 i ;
  ulong___0 min ;
  ulong___0 count ;

  {
#line 228
  count = (ulong___0 )1;
#line 232
  min = *(p->e + 0);
#line 234
  i = (ulong___0 )1;
#line 234
  while (i < p->n) {
#line 236
    if (*(p->e + i) < min) {
#line 238
      min = *(p->e + i);
#line 239
      count ++;
    }
#line 234
    i ++;
  }
#line 243
  return (count);
}
}
#line 250 "../gdsl_perm.c"
extern gdsl_perm_t gdsl_perm_set_name(gdsl_perm_t p , char const   *name ) 
{ 
  size_t tmp ;
  void *tmp___0 ;

  {
#line 255
  if ((unsigned int )p->name != (unsigned int )((void *)0)) {
#line 257
    free((void *)p->name);
#line 258
    p->name = (char *)((void *)0);
  }
#line 261
  if ((unsigned int )name != (unsigned int )((void *)0)) {
#line 263
    tmp = strlen(name);
#line 263
    tmp___0 = malloc((1U + tmp) * sizeof(char ));
#line 263
    p->name = (char *)tmp___0;
#line 265
    if ((unsigned int )p->name == (unsigned int )((void *)0)) {
#line 267
      return ((gdsl_perm_t )((void *)0));
    }
#line 270
    strcpy((char * __restrict  )p->name, (char const   * __restrict  )name);
  }
#line 273
  return (p);
}
}
#line 276 "../gdsl_perm.c"
extern gdsl_perm_t gdsl_perm_linear_next(gdsl_perm_t p ) 
{ 
  long i ;
  long j ;
  long k ;
  ulong___0 tmp ;
  ulong___0 tmp___0 ;

  {
#line 289
  i = (long )(p->n - 2UL);
#line 291
  while (1) {
#line 291
    if (*(p->e + i) > *(p->e + (i + 1L))) {
#line 291
      if (! (i != 0L)) {
#line 291
        break;
      }
    } else {
#line 291
      break;
    }
#line 293
    i --;
  }
#line 296
  if (i == 0L) {
#line 296
    if (*(p->e + 0) > *(p->e + 1)) {
#line 298
      return ((gdsl_perm_t )((void *)0));
    }
  }
#line 301
  k = i + 1L;
#line 303
  j = i + 2L;
#line 303
  while ((ulong___0 )j < p->n) {
#line 305
    if (*(p->e + j) > *(p->e + i)) {
#line 305
      if (*(p->e + j) < *(p->e + k)) {
#line 307
        k = j;
      }
    }
#line 303
    j ++;
  }
#line 314
  tmp = *(p->e + i);
#line 315
  *(p->e + i) = *(p->e + k);
#line 316
  *(p->e + k) = tmp;
#line 319
  j = i + 1L;
#line 319
  while ((ulong___0 )j <= (p->n + (ulong___0 )i) / 2UL) {
#line 321
    tmp___0 = *(p->e + j);
#line 322
    *(p->e + j) = *(p->e + ((p->n + (ulong___0 )i) - (ulong___0 )j));
#line 323
    *(p->e + ((p->n + (ulong___0 )i) - (ulong___0 )j)) = tmp___0;
#line 319
    j ++;
  }
#line 326
  return (p);
}
}
#line 329 "../gdsl_perm.c"
extern gdsl_perm_t gdsl_perm_linear_prev(gdsl_perm_t p ) 
{ 
  long i ;
  long j ;
  long k ;
  ulong___0 tmp ;
  ulong___0 tmp___0 ;

  {
#line 342
  i = (long )(p->n - 2UL);
#line 344
  while (1) {
#line 344
    if (*(p->e + i) < *(p->e + (i + 1L))) {
#line 344
      if (! (i != 0L)) {
#line 344
        break;
      }
    } else {
#line 344
      break;
    }
#line 346
    i --;
  }
#line 349
  if (i == 0L) {
#line 349
    if (*(p->e + 0) < *(p->e + 1)) {
#line 351
      return ((gdsl_perm_t )((void *)0));
    }
  }
#line 354
  k = i + 1L;
#line 356
  j = i + 2L;
#line 356
  while ((ulong___0 )j < p->n) {
#line 358
    if (*(p->e + j) < *(p->e + i)) {
#line 358
      if (*(p->e + j) > *(p->e + k)) {
#line 360
        k = j;
      }
    }
#line 356
    j ++;
  }
#line 367
  tmp = *(p->e + i);
#line 368
  *(p->e + i) = *(p->e + k);
#line 369
  *(p->e + k) = tmp;
#line 372
  j = i + 1L;
#line 372
  while ((ulong___0 )j <= (p->n + (ulong___0 )i) / 2UL) {
#line 374
    tmp___0 = *(p->e + j);
#line 375
    *(p->e + j) = *(p->e + ((p->n + (ulong___0 )i) - (ulong___0 )j));
#line 376
    *(p->e + ((p->n + (ulong___0 )i) - (ulong___0 )j)) = tmp___0;
#line 372
    j ++;
  }
#line 379
  return (p);
}
}
#line 382 "../gdsl_perm.c"
extern gdsl_perm_t gdsl_perm_set_elements_array(gdsl_perm_t p , ulong___0 const   *v ) 
{ 
  ulong___0 i ;
  bool tmp ;

  {
#line 390
  tmp = _array_is_valid(v, p->n);
#line 390
  if (! tmp) {
#line 392
    return ((gdsl_perm_t )((void *)0));
  }
#line 395
  i = (ulong___0 )0;
#line 395
  while (i < p->n) {
#line 397
    *(p->e + i) = (ulong___0 )*(v + i);
#line 395
    i ++;
  }
#line 400
  return (p);
}
}
#line 407 "../gdsl_perm.c"
extern gdsl_perm_t gdsl_perm_multiply(gdsl_perm_t r , gdsl_perm_t const   a , gdsl_perm_t const   b ) 
{ 
  ulong___0 i ;

  {
#line 418
  i = (ulong___0 )0;
#line 418
  while (i < r->n) {
#line 420
    *(r->e + i) = *(b->e + *(a->e + i));
#line 418
    i ++;
  }
#line 423
  return (r);
}
}
#line 426 "../gdsl_perm.c"
extern gdsl_perm_t gdsl_perm_linear_to_canonical(gdsl_perm_t q , gdsl_perm_t const   p ) 
{ 
  ulong___0 i ;
  ulong___0 k ;
  ulong___0 s ;
  ulong___0 t ;
  ulong___0 const   *pp ;
  ulong___0 *qq ;

  {
#line 438
  t = p->n;
#line 439
  pp = (ulong___0 const   *)p->e;
#line 440
  qq = q->e;
#line 442
  i = (ulong___0 )0;
#line 442
  while (i < p->n) {
#line 445
    k = (ulong___0 )*(pp + i);
#line 446
    s = (ulong___0 )1;
#line 448
    while (k > i) {
#line 450
      k = (ulong___0 )*(pp + k);
#line 451
      s ++;
    }
#line 454
    if (k < i) {
#line 456
      goto __Cont;
    }
#line 461
    t -= s;
#line 463
    *(qq + t) = i;
#line 465
    k = (ulong___0 )*(pp + i);
#line 466
    s = (ulong___0 )1;
#line 468
    while (k > i) {
#line 470
      *(qq + (t + s)) = k;
#line 471
      k = (ulong___0 )*(pp + k);
#line 472
      s ++;
    }
#line 475
    if (t == 0UL) {
#line 477
      break;
    }
    __Cont: /* CIL Label */ 
#line 442
    i ++;
  }
#line 482
  return (q);
}
}
#line 485 "../gdsl_perm.c"
extern gdsl_perm_t gdsl_perm_canonical_to_linear(gdsl_perm_t q , gdsl_perm_t const   p ) 
{ 
  ulong___0 i ;
  ulong___0 k ;
  ulong___0 kk ;
  ulong___0 first ;
  ulong___0 const   *pp ;
  ulong___0 *qq ;

  {
#line 498
  pp = (ulong___0 const   *)p->e;
#line 499
  qq = q->e;
#line 501
  i = (ulong___0 )0;
#line 501
  while (i < p->n) {
#line 503
    *(qq + i) = i;
#line 501
    i ++;
  }
#line 506
  k = (ulong___0 )*(pp + 0);
#line 507
  first = *(qq + k);
#line 509
  i = (ulong___0 )1;
#line 509
  while (i < p->n) {
#line 511
    kk = (ulong___0 )*(pp + i);
#line 513
    if (kk > first) {
#line 515
      *(qq + k) = *(qq + kk);
#line 516
      k = kk;
    } else {
#line 520
      *(qq + k) = first;
#line 521
      k = kk;
#line 522
      first = *(qq + kk);
    }
#line 509
    i ++;
  }
#line 526
  *(qq + k) = first;
#line 529
  return (q);
}
}
#line 532 "../gdsl_perm.c"
extern gdsl_perm_t gdsl_perm_inverse(gdsl_perm_t p ) 
{ 
  ulong___0 i ;
  ulong___0 *t ;
  void *tmp ;

  {
#line 540
  tmp = __builtin_alloca((unsigned int )(p->n * (ulong___0 )sizeof(ulong___0 )));
#line 540
  t = (ulong___0 *)tmp;
#line 542
  if ((unsigned int )t == (unsigned int )((void *)0)) {
#line 544
    return ((gdsl_perm_t )((void *)0));
  }
#line 547
  i = (ulong___0 )0;
#line 547
  while (i < p->n) {
#line 549
    *(t + i) = *(p->e + i);
#line 547
    i ++;
  }
#line 552
  i = (ulong___0 )0;
#line 552
  while (i < p->n) {
#line 554
    *(p->e + *(t + i)) = i;
#line 552
    i ++;
  }
#line 557
  return (p);
}
}
#line 560 "../gdsl_perm.c"
extern gdsl_perm_t gdsl_perm_reverse(gdsl_perm_t p ) 
{ 
  ulong___0 i ;
  ulong___0 j ;
  ulong___0 tmp ;

  {
#line 567
  i = (ulong___0 )0;
#line 567
  while (i < p->n / 2UL) {
#line 569
    j = (p->n - i) - 1UL;
#line 571
    tmp = *(p->e + i);
#line 572
    *(p->e + i) = *(p->e + j);
#line 573
    *(p->e + j) = tmp;
#line 567
    i ++;
  }
#line 576
  return (p);
}
}
#line 579 "../gdsl_perm.c"
extern gdsl_perm_t gdsl_perm_randomize(gdsl_perm_t p ) 
{ 
  ulong___0 i ;
  long j ;
  long k ;
  ulong___0 *t ;
  struct timeval tv ;
  void *tmp ;
  int tmp___0 ;

  {
#line 591
  gettimeofday((struct timeval * __restrict  )(& tv), (__timezone_ptr_t )((void *)0));
#line 592
  srand((unsigned int )tv.tv_usec);
#line 594
  tmp = __builtin_alloca((unsigned int )(p->n * (ulong___0 )sizeof(ulong___0 )));
#line 594
  t = (ulong___0 *)tmp;
#line 596
  if ((unsigned int )t == (unsigned int )((void *)0)) {
#line 598
    return ((gdsl_perm_t )((void *)0));
  }
#line 601
  i = (ulong___0 )0;
#line 601
  while (i < p->n - 1UL) {
#line 606
    tmp___0 = rand();
#line 606
    *(t + i) = (ulong___0 )((int )(((double )(p->n - i) * (double )tmp___0) / ((double )2147483647 + 1.0)));
#line 601
    i ++;
  }
#line 609
  *(t + i) = (ulong___0 )0;
#line 612
  k = (long )(p->n - 1UL);
#line 612
  while (k >= 0L) {
#line 614
    j = (long )((p->n - (ulong___0 )k) - 1UL);
#line 614
    while ((ulong___0 )j > *(t + k)) {
#line 616
      *(p->e + j) = *(p->e + (j - 1L));
#line 614
      j --;
    }
#line 619
    *(p->e + j) = (ulong___0 )k;
#line 612
    k --;
  }
#line 622
  return (p);
}
}
#line 625 "../gdsl_perm.c"
extern gdsl_element_t *gdsl_perm_apply_on_array(gdsl_element_t *t , gdsl_perm_t const   p ) 
{ 
  ulong___0 i ;
  gdsl_element_t *b ;
  void *tmp ;

  {
#line 634
  tmp = __builtin_alloca((unsigned int )(p->n * (ulong___0 )sizeof(gdsl_element_t )));
#line 634
  b = (gdsl_element_t *)tmp;
#line 636
  if ((unsigned int )b == (unsigned int )((void *)0)) {
#line 638
    return ((gdsl_element_t *)((void *)0));
  }
#line 642
  i = (ulong___0 )0;
#line 642
  while (i < p->n) {
#line 644
    *(b + i) = *(t + *(p->e + i));
#line 642
    i ++;
  }
#line 647
  memcpy((void * __restrict  )t, (void const   * __restrict  )b, (size_t )(p->n * (ulong___0 )sizeof(gdsl_element_t )));
#line 649
  return (t);
}
}
#line 656 "../gdsl_perm.c"
extern void gdsl_perm_write(gdsl_perm_t const   p , void (* const  write_f)(gdsl_element_t const   E ,
                                                                            FILE *OUTPUT_FILE ,
                                                                            gdsl_location_t LOCATION ,
                                                                            void *USER_DATA ) ,
                            FILE *file , void *user_data ) 
{ 
  ulong___0 i ;
  gdsl_location_t pos ;

  {
#line 661
  pos = (gdsl_location_t )0;
#line 667
  pos = (gdsl_location_t )((unsigned int )pos | 1U);
#line 668
  (*write_f)((gdsl_element_t const   )((gdsl_element_t )(p->e + 0)), file, pos, user_data);
#line 670
  pos = (gdsl_location_t )((unsigned int )pos & 4294967294U);
#line 671
  i = (ulong___0 )1;
#line 671
  while (i < p->n - 1UL) {
#line 673
    (*write_f)((gdsl_element_t const   )((gdsl_element_t )(p->e + i)), file, pos,
               user_data);
#line 671
    i ++;
  }
#line 676
  pos = (gdsl_location_t )((unsigned int )pos | 2U);
#line 677
  (*write_f)((gdsl_element_t const   )((gdsl_element_t )(p->e + i)), file, pos, user_data);
#line 678
  return;
}
}
#line 680 "../gdsl_perm.c"
extern void gdsl_perm_write_xml(gdsl_perm_t const   p , void (* const  write_f)(gdsl_element_t const   E ,
                                                                                FILE *OUTPUT_FILE ,
                                                                                gdsl_location_t LOCATION ,
                                                                                void *USER_DATA ) ,
                                FILE *file , void *user_data ) 
{ 
  ulong___0 i ;
  gdsl_location_t pos ;

  {
#line 685
  pos = (gdsl_location_t )0;
#line 690
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_PERM REF=\"%p\" NAME=\"%s\" CARD=\"%ld\">\n",
          (void *)p, p->name, p->n);
#line 693
  i = (ulong___0 )0;
#line 693
  while (i < p->n) {
#line 695
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_PERM_ELEMENT INDIX=\"%ld\" VALUE=\"%ld\">",
            i, *(p->e + i));
#line 697
    if ((unsigned int )write_f != (unsigned int )((void *)0)) {
#line 699
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )"\n");
#line 700
      if (i == 0UL) {
#line 702
        pos = (gdsl_location_t )((unsigned int )pos | 1U);
      }
#line 705
      if (i == 1UL) {
#line 707
        pos = (gdsl_location_t )((unsigned int )pos & 4294967294U);
      }
#line 710
      if (i == p->n) {
#line 712
        pos = (gdsl_location_t )((unsigned int )pos | 2U);
      }
#line 715
      (*write_f)((gdsl_element_t const   )((gdsl_element_t )(p->e + i)), file, pos,
                 user_data);
#line 716
      fprintf((FILE * __restrict  )file, (char const   * __restrict  )"\n");
    }
#line 719
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_PERM_ELEMENT>\n");
#line 693
    i ++;
  }
#line 722
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_PERM>\n");
#line 723
  return;
}
}
#line 725 "../gdsl_perm.c"
extern void gdsl_perm_dump(gdsl_perm_t const   p , void (* const  write_f)(gdsl_element_t const   E ,
                                                                           FILE *OUTPUT_FILE ,
                                                                           gdsl_location_t LOCATION ,
                                                                           void *USER_DATA ) ,
                           FILE *file , void *user_data ) 
{ 


  {
#line 732
  gdsl_perm_write_xml(p, write_f, file, user_data);
#line 733
  return;
}
}
#line 739 "../gdsl_perm.c"
static bool _array_is_valid(ulong___0 const   *v , ulong___0 n ) 
{ 
  ulong___0 i ;
  ulong___0 j ;

  {
#line 747
  i = (ulong___0 )0;
#line 747
  while (i < n) {
#line 749
    if (*(v + i) >= (ulong___0 const   )n) {
#line 751
      return ((bool )0);
    }
#line 754
    j = (ulong___0 )0;
#line 754
    while (j < i) {
#line 756
      if (*(v + i) == *(v + j)) {
#line 758
        return ((bool )0);
      }
#line 754
      j ++;
    }
#line 747
    i ++;
  }
#line 763
  return ((bool )1);
}
}
#line 1 "cil-0ymStf9v.o"
#pragma merger("0","/tmp/cil-MwwytVQz.i","")
#line 79 "../gdsl_stack.h"
extern gdsl_stack_t gdsl_stack_alloc(char const   *name , gdsl_element_t (*alloc_f)(void *USER_DATA ) ,
                                     void (*free_f)(gdsl_element_t E ) ) ;
#line 98
extern void gdsl_stack_free(gdsl_stack_t s ) ;
#line 115
extern void gdsl_stack_flush(gdsl_stack_t s ) ;
#line 132
extern char const   *gdsl_stack_get_name(gdsl_stack_t const   s ) ;
#line 143
extern ulong___0 gdsl_stack_get_size(gdsl_stack_t const   s ) ;
#line 164
extern ulong___0 gdsl_stack_get_growing_factor(gdsl_stack_t const   s ) ;
#line 176
extern bool gdsl_stack_is_empty(gdsl_stack_t const   s ) ;
#line 190
extern gdsl_element_t gdsl_stack_get_top(gdsl_stack_t const   s ) ;
#line 204
extern gdsl_element_t gdsl_stack_get_bottom(gdsl_stack_t const   s ) ;
#line 225
extern gdsl_stack_t gdsl_stack_set_name(gdsl_stack_t s , char const   *name ) ;
#line 248
extern void gdsl_stack_set_growing_factor(gdsl_stack_t s , ulong___0 growing_factor ) ;
#line 272
extern gdsl_element_t gdsl_stack_insert(gdsl_stack_t s , void *value ) ;
#line 289
extern gdsl_element_t gdsl_stack_remove(gdsl_stack_t s ) ;
#line 312
extern gdsl_element_t gdsl_stack_search(gdsl_stack_t const   s , long (*f)(gdsl_element_t const   E ,
                                                                           void *VALUE ) ,
                                        void *value ) ;
#line 328
extern gdsl_element_t gdsl_stack_search_by_position(gdsl_stack_t const   s , ulong___0 pos ) ;
#line 354
extern gdsl_element_t gdsl_stack_map_forward(gdsl_stack_t const   s , int (*map_f)(gdsl_element_t const   E ,
                                                                                   gdsl_location_t LOCATION ,
                                                                                   void *USER_DATA ) ,
                                             void *user_data ) ;
#line 377
extern gdsl_element_t gdsl_stack_map_backward(gdsl_stack_t const   s , int (*map_f)(gdsl_element_t const   E ,
                                                                                    gdsl_location_t LOCATION ,
                                                                                    void *USER_DATA ) ,
                                              void *user_data ) ;
#line 402
extern void gdsl_stack_write(gdsl_stack_t const   s , void (*write_f)(gdsl_element_t const   E ,
                                                                      FILE *OUTPUT_FILE ,
                                                                      gdsl_location_t LOCATION ,
                                                                      void *USER_DATA ) ,
                             FILE *file , void *user_data ) ;
#line 425
extern void gdsl_stack_write_xml(gdsl_stack_t const   s , void (*write_f)(gdsl_element_t const   E ,
                                                                          FILE *OUTPUT_FILE ,
                                                                          gdsl_location_t LOCATION ,
                                                                          void *USER_DATA ) ,
                                 FILE *file , void *user_data ) ;
#line 448
extern void gdsl_stack_dump(gdsl_stack_t const   s , void (*write_f)(gdsl_element_t const   E ,
                                                                     FILE *OUTPUT_FILE ,
                                                                     gdsl_location_t LOCATION ,
                                                                     void *USER_DATA ) ,
                            FILE *file , void *user_data ) ;
#line 55 "../gdsl_stack.c"
static gdsl_element_t default_alloc___7(void *e ) ;
#line 58
static void default_free___7(gdsl_element_t e ) ;
#line 61
static gdsl_location_t get_location___5(gdsl_stack_t stack , int i ) ;
#line 68 "../gdsl_stack.c"
extern gdsl_stack_t gdsl_stack_alloc(char const   *name , gdsl_element_t (*alloc_f)(void *USER_DATA ) ,
                                     void (*free_f)(gdsl_element_t E ) ) 
{ 
  register int i ;
  gdsl_stack_t s ;
  void *tmp ;
  void *tmp___0 ;
  gdsl_stack_t tmp___1 ;

  {
#line 73
  s = (gdsl_stack_t )((void *)0);
#line 75
  tmp = malloc(sizeof(struct _gdsl_stack ));
#line 75
  s = (gdsl_stack_t )tmp;
#line 77
  if ((unsigned int )s == (unsigned int )((void *)0)) {
#line 79
    return ((gdsl_stack_t )((void *)0));
  }
#line 82
  s->growing_factor = (ulong___0 )1;
#line 84
  tmp___0 = malloc((size_t )((1UL + s->growing_factor) * (ulong___0 )sizeof(gdsl_element_t )));
#line 84
  s->nodes = (gdsl_element_t *)tmp___0;
#line 86
  if ((unsigned int )s->nodes == (unsigned int )((void *)0)) {
#line 88
    free((void *)s);
#line 89
    return ((gdsl_stack_t )((void *)0));
  }
#line 92
  i = 0;
#line 92
  while ((ulong___0 )i <= s->growing_factor) {
#line 94
    *(s->nodes + i) = (void *)0;
#line 92
    i ++;
  }
#line 97
  s->card = 0UL;
#line 98
  s->size = s->growing_factor;
#line 99
  s->name = (char *)((void *)0);
#line 101
  tmp___1 = gdsl_stack_set_name(s, name);
#line 101
  if ((unsigned int )tmp___1 == (unsigned int )((void *)0)) {
#line 103
    free((void *)s->nodes);
#line 104
    free((void *)s);
#line 105
    return ((gdsl_stack_t )((void *)0));
  }
#line 108
  if (alloc_f) {
#line 108
    s->alloc_f = alloc_f;
  } else {
#line 108
    s->alloc_f = & default_alloc___7;
  }
#line 109
  if (free_f) {
#line 109
    s->free_f = free_f;
  } else {
#line 109
    s->free_f = & default_free___7;
  }
#line 111
  return (s);
}
}
#line 114 "../gdsl_stack.c"
extern void gdsl_stack_free(gdsl_stack_t s ) 
{ 
  bool tmp ;

  {
#line 119
  tmp = gdsl_stack_is_empty((gdsl_stack_t const   )s);
#line 119
  if ((unsigned int )tmp == 0U) {
#line 121
    gdsl_stack_flush(s);
  }
#line 124
  free((void *)s->nodes);
#line 125
  free((void *)s->name);
#line 126
  free((void *)s);
#line 127
  return;
}
}
#line 129 "../gdsl_stack.c"
extern void gdsl_stack_flush(gdsl_stack_t s ) 
{ 
  register int i ;

  {
#line 136
  i = 1;
#line 136
  while ((ulong___0 )i <= s->card) {
#line 138
    (*(s->free_f))(*(s->nodes + i));
#line 139
    *(s->nodes + i) = (void *)0;
#line 136
    i ++;
  }
#line 142
  s->card = 0UL;
#line 143
  return;
}
}
#line 149 "../gdsl_stack.c"
extern char const   *gdsl_stack_get_name(gdsl_stack_t const   s ) 
{ 


  {
#line 154
  return ((char const   *)s->name);
}
}
#line 157 "../gdsl_stack.c"
extern ulong___0 gdsl_stack_get_size(gdsl_stack_t const   s ) 
{ 


  {
#line 162
  return (s->card);
}
}
#line 165 "../gdsl_stack.c"
extern ulong___0 gdsl_stack_get_growing_factor(gdsl_stack_t const   s ) 
{ 


  {
#line 170
  return (s->growing_factor);
}
}
#line 173 "../gdsl_stack.c"
extern bool gdsl_stack_is_empty(gdsl_stack_t const   s ) 
{ 
  int tmp ;

  {
#line 178
  if (s->card == 0UL) {
#line 178
    tmp = 1;
  } else {
#line 178
    tmp = 0;
  }
#line 178
  return ((bool )tmp);
}
}
#line 181 "../gdsl_stack.c"
extern gdsl_element_t gdsl_stack_get_top(gdsl_stack_t const   s ) 
{ 


  {
#line 186
  return (*(s->nodes + s->card));
}
}
#line 189 "../gdsl_stack.c"
extern gdsl_element_t gdsl_stack_get_bottom(gdsl_stack_t const   s ) 
{ 


  {
#line 194
  return (*(s->nodes + 1));
}
}
#line 201 "../gdsl_stack.c"
extern gdsl_stack_t gdsl_stack_set_name(gdsl_stack_t s , char const   *name ) 
{ 
  size_t tmp ;
  void *tmp___0 ;

  {
#line 206
  if ((unsigned int )s->name != (unsigned int )((void *)0)) {
#line 208
    free((void *)s->name);
#line 209
    s->name = (char *)((void *)0);
  }
#line 212
  if ((unsigned int )name != (unsigned int )((void *)0)) {
#line 214
    tmp = strlen(name);
#line 214
    tmp___0 = malloc((1U + tmp) * sizeof(char ));
#line 214
    s->name = (char *)tmp___0;
#line 216
    if ((unsigned int )s->name == (unsigned int )((void *)0)) {
#line 218
      return ((gdsl_stack_t )((void *)0));
    }
#line 221
    strcpy((char * __restrict  )s->name, (char const   * __restrict  )name);
  }
#line 224
  return (s);
}
}
#line 227 "../gdsl_stack.c"
extern void gdsl_stack_set_growing_factor(gdsl_stack_t s , ulong___0 growing_factor ) 
{ 


  {
#line 233
  s->growing_factor = growing_factor;
#line 234
  return;
}
}
#line 236 "../gdsl_stack.c"
extern gdsl_element_t gdsl_stack_insert(gdsl_stack_t s , void *value ) 
{ 
  gdsl_element_t e ;
  void *tmp ;

  {
#line 243
  e = (*(s->alloc_f))(value);
#line 245
  if ((unsigned int )e == (unsigned int )((void *)0)) {
#line 247
    return ((void *)0);
  }
#line 250
  if (s->card == s->size) {
#line 252
    tmp = realloc((void *)s->nodes, (size_t )(((1UL + s->size) + s->growing_factor) * (ulong___0 )sizeof(gdsl_element_t )));
#line 252
    s->nodes = (gdsl_element_t *)tmp;
#line 255
    if ((unsigned int )s->nodes == (unsigned int )((void *)0)) {
#line 257
      (*(s->free_f))(e);
#line 258
      return ((void *)0);
    }
#line 261
    s->size += s->growing_factor;
  }
#line 264
  (s->card) ++;
#line 265
  *(s->nodes + s->card) = e;
#line 267
  return (e);
}
}
#line 270 "../gdsl_stack.c"
extern gdsl_element_t gdsl_stack_remove(gdsl_stack_t s ) 
{ 
  gdsl_element_t e ;

  {
#line 277
  if (s->card == 0UL) {
#line 279
    return ((void *)0);
  }
#line 282
  e = *(s->nodes + s->card);
#line 283
  *(s->nodes + s->card) = (void *)0;
#line 284
  (s->card) --;
#line 286
  return (e);
}
}
#line 293 "../gdsl_stack.c"
extern gdsl_element_t gdsl_stack_search(gdsl_stack_t const   s , long (*f)(gdsl_element_t const   E ,
                                                                           void *VALUE ) ,
                                        void *value ) 
{ 
  register int i ;
  long tmp ;

  {
#line 301
  i = 1;
#line 301
  while ((ulong___0 )i <= s->card) {
#line 303
    tmp = (*f)((gdsl_element_t const   )*(s->nodes + i), value);
#line 303
    if (tmp == 0L) {
#line 305
      return (*(s->nodes + i));
    }
#line 301
    i ++;
  }
#line 309
  return ((void *)0);
}
}
#line 312 "../gdsl_stack.c"
extern gdsl_element_t gdsl_stack_search_by_position(gdsl_stack_t const   s , ulong___0 pos ) 
{ 


  {
#line 318
  return (*(s->nodes + pos));
}
}
#line 325 "../gdsl_stack.c"
extern gdsl_element_t gdsl_stack_map_forward(gdsl_stack_t const   s , int (*map_f)(gdsl_element_t const   E ,
                                                                                   gdsl_location_t LOCATION ,
                                                                                   void *USER_DATA ) ,
                                             void *user_data ) 
{ 
  register int i ;
  gdsl_location_t tmp ;
  int tmp___0 ;

  {
#line 334
  i = (int )s->card;
#line 334
  while (i > 0) {
#line 336
    tmp = get_location___5((gdsl_stack_t )s, i);
#line 336
    tmp___0 = (*map_f)((gdsl_element_t const   )*(s->nodes + i), tmp, user_data);
#line 336
    if (tmp___0 == 0) {
#line 338
      return (*(s->nodes + i));
    }
#line 334
    i --;
  }
#line 342
  return ((void *)0);
}
}
#line 345 "../gdsl_stack.c"
extern gdsl_element_t gdsl_stack_map_backward(gdsl_stack_t const   s , int (*map_f)(gdsl_element_t const   E ,
                                                                                    gdsl_location_t LOCATION ,
                                                                                    void *USER_DATA ) ,
                                              void *user_data ) 
{ 
  register int i ;
  gdsl_location_t tmp ;
  int tmp___0 ;

  {
#line 354
  i = 1;
#line 354
  while ((ulong___0 )i <= s->card) {
#line 356
    tmp = get_location___5((gdsl_stack_t )s, i);
#line 356
    tmp___0 = (*map_f)((gdsl_element_t const   )*(s->nodes + i), tmp, user_data);
#line 356
    if (tmp___0 == 0) {
#line 358
      return (*(s->nodes + i));
    }
#line 354
    i ++;
  }
#line 362
  return ((void *)0);
}
}
#line 369 "../gdsl_stack.c"
extern void gdsl_stack_write(gdsl_stack_t const   s , void (*write_f)(gdsl_element_t const   E ,
                                                                      FILE *OUTPUT_FILE ,
                                                                      gdsl_location_t LOCATION ,
                                                                      void *USER_DATA ) ,
                             FILE *file , void *user_data ) 
{ 
  register int i ;
  gdsl_location_t tmp ;

  {
#line 379
  i = (int )s->card;
#line 379
  while (i > 0) {
#line 381
    tmp = get_location___5((gdsl_stack_t )s, i);
#line 381
    (*write_f)((gdsl_element_t const   )*(s->nodes + i), file, tmp, user_data);
#line 379
    i --;
  }
#line 383
  return;
}
}
#line 385 "../gdsl_stack.c"
extern void gdsl_stack_write_xml(gdsl_stack_t const   s , void (*write_f)(gdsl_element_t const   E ,
                                                                          FILE *OUTPUT_FILE ,
                                                                          gdsl_location_t LOCATION ,
                                                                          void *USER_DATA ) ,
                                 FILE *file , void *user_data ) 
{ 
  register int i ;
  gdsl_location_t tmp ;

  {
#line 394
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_STACK REF=\"%p\" NAME=\"%s\" CARD=\"%ld\" TOP=\"%p\" BOTTOM=\"%p\">\n",
          (void *)s, s->name, s->card, (void *)(s->nodes + s->card), (void *)(s->nodes + 1));
#line 397
  i = (int )s->card;
#line 397
  while (i > 0) {
#line 399
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_STACK_NODE REF=\"%p\" CONTENT=\"%p\">",
            (void *)(s->nodes + i), *(s->nodes + i));
#line 402
    if (write_f) {
#line 402
      if (*(s->nodes + i)) {
#line 404
        tmp = get_location___5((gdsl_stack_t )s, i);
#line 404
        (*write_f)((gdsl_element_t const   )*(s->nodes + i), file, tmp, user_data);
      }
    }
#line 407
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_STACK_NODE>\n");
#line 397
    i --;
  }
#line 410
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_STACK>\n");
#line 411
  return;
}
}
#line 413 "../gdsl_stack.c"
extern void gdsl_stack_dump(gdsl_stack_t const   s , void (*write_f)(gdsl_element_t const   E ,
                                                                     FILE *OUTPUT_FILE ,
                                                                     gdsl_location_t LOCATION ,
                                                                     void *USER_DATA ) ,
                            FILE *file , void *user_data ) 
{ 
  register int i ;
  gdsl_location_t tmp ;

  {
#line 421
  fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_STACK REF=\"%p\" NAME=\"%s\" CARD=\"%lu\" TOP=\"%p\" BOTTOM=\"%p\" SIZE=\"%lu\" GROW_FACTOR=\"%lu\">\n",
          (void *)s, s->name, s->card, (void *)(s->nodes + s->card), (void *)(s->nodes + 1),
          s->size, s->growing_factor);
#line 425
  i = 0;
#line 425
  while ((ulong___0 )i <= s->size) {
#line 427
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"<GDSL_STACK_NODE REF=\"%p\" CONTENT=\"%p\">",
            (void *)(s->nodes + i), *(s->nodes + i));
#line 430
    if (write_f) {
#line 430
      if (*(s->nodes + i)) {
#line 432
        tmp = get_location___5((gdsl_stack_t )s, i);
#line 432
        (*write_f)((gdsl_element_t const   )*(s->nodes + i), file, tmp, user_data);
      }
    }
#line 435
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"</GDSL_STACK_NODE>\n");
#line 425
    i ++;
  }
#line 437
  return;
}
}
#line 443 "../gdsl_stack.c"
static gdsl_element_t default_alloc___7(void *e ) 
{ 


  {
#line 446
  return (e);
}
}
#line 449 "../gdsl_stack.c"
static void default_free___7(gdsl_element_t e ) 
{ 


  {
#line 453
  return;
}
}
#line 455 "../gdsl_stack.c"
static gdsl_location_t get_location___5(gdsl_stack_t stack , int i ) 
{ 
  gdsl_location_t location ;

  {
#line 458
  location = (gdsl_location_t )0;
#line 460
  if (stack->card == (ulong___0 )i) {
#line 462
    location = (gdsl_location_t )((unsigned int )location | 1U);
  }
#line 465
  if (i == 1) {
#line 467
    location = (gdsl_location_t )((unsigned int )location | 2U);
  }
#line 470
  return (location);
}
}
#line 1 "cil-NpwvvmDO.o"
#pragma merger("0","/tmp/cil-j0IQG_Ry.i","")
#line 33 "_integers.h"
extern gdsl_element_t alloc_integer(void *integer ) ;
#line 36
extern void free_integer(gdsl_element_t e ) ;
#line 39
extern void print_integer(gdsl_element_t e , FILE *file , gdsl_location_t location ,
                          void *d ) ;
#line 42
extern long compare_integers(gdsl_element_t e1 , void *e2 ) ;
#line 40 "_integers.c"
extern gdsl_element_t alloc_integer(void *integer ) 
{ 
  long *n ;
  long *value ;
  void *tmp ;

  {
#line 43
  n = (long *)integer;
#line 44
  tmp = malloc(sizeof(long ));
#line 44
  value = (long *)tmp;
#line 48
  memcpy((void * __restrict  )value, (void const   * __restrict  )n, sizeof(long ));
#line 50
  return ((gdsl_element_t )value);
}
}
#line 53 "_integers.c"
extern void free_integer(gdsl_element_t e ) 
{ 


  {
#line 56
  free(e);
#line 57
  return;
}
}
#line 59 "_integers.c"
extern void print_integer(gdsl_element_t e , FILE *file , gdsl_location_t location ,
                          void *d ) 
{ 
  long **n ;

  {
#line 62
  n = (long **)e;
#line 64
  if ((unsigned int )d == (unsigned int )((void *)0)) {
#line 66
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"%ld", (long )*n);
  } else {
#line 70
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"%ld%s", (long )*n,
            (char *)d);
  }
#line 72
  return;
}
}
#line 74 "_integers.c"
extern long compare_integers(gdsl_element_t e1 , void *e2 ) 
{ 


  {
#line 77
  return (*((long *)e1) - *((long *)e2));
}
}
#line 1 "cil-qOUfiuXb.o"
#pragma merger("0","/tmp/cil-k38J5hTC.i","")
#line 135 "/usr/include/string.h"
extern  __attribute__((__nothrow__)) char *( __attribute__((__nonnull__(1,2))) strcat)(char * __restrict  __dest ,
                                                                                       char const   * __restrict  __src ) ;
#line 173
extern  __attribute__((__nothrow__)) char *( __attribute__((__nonnull__(1))) strdup)(char const   *__s )  __attribute__((__malloc__)) ;
#line 33 "_strings.h"
extern gdsl_element_t alloc_string(void *string ) ;
#line 36
extern void free_string(gdsl_element_t e ) ;
#line 39
extern gdsl_element_t copy_string(gdsl_element_t e ) ;
#line 42
extern void print_string(gdsl_element_t e , FILE *file , gdsl_location_t location ,
                         void *d ) ;
#line 45
extern long compare_strings(gdsl_element_t s1 , void *s2 ) ;
#line 36 "_strings.c"
extern gdsl_element_t alloc_string(void *string ) 
{ 
  char *tmp ;

  {
#line 39
  tmp = strdup((char const   *)((char *)string));
#line 39
  return ((gdsl_element_t )tmp);
}
}
#line 42 "_strings.c"
extern void free_string(gdsl_element_t e ) 
{ 


  {
#line 45
  free(e);
#line 46
  return;
}
}
#line 48 "_strings.c"
extern gdsl_element_t copy_string(gdsl_element_t e ) 
{ 
  char *tmp ;

  {
#line 51
  tmp = strdup((char const   *)((char *)e));
#line 51
  return ((gdsl_element_t )tmp);
}
}
#line 54 "_strings.c"
extern void print_string(gdsl_element_t e , FILE *file , gdsl_location_t location ,
                         void *d ) 
{ 
  char loc[256] ;
  unsigned int tmp ;

  {
#line 57
  loc[0] = (char )'\000';
#line 57
  tmp = 1U;
#line 57
  while (! (tmp >= 256U)) {
#line 57
    loc[tmp] = (char)0;
#line 57
    tmp ++;
  }
#line 59
  if ((unsigned int )location & 1U) {
#line 61
    strcat((char * __restrict  )(loc), (char const   * __restrict  )"ROOT ");
  }
#line 64
  if ((unsigned int )location & 2U) {
#line 66
    strcat((char * __restrict  )(loc), (char const   * __restrict  )"LEAF ");
  }
#line 69
  if ((unsigned int )d == (unsigned int )((void *)0)) {
#line 71
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"%s%s", (char *)e,
            loc);
  } else {
#line 75
    fprintf((FILE * __restrict  )file, (char const   * __restrict  )"%s%s%s", (char *)e,
            loc, (char *)d);
  }
#line 77
  return;
}
}
#line 79 "_strings.c"
extern long compare_strings(gdsl_element_t s1 , void *s2 ) 
{ 
  int tmp ;

  {
#line 82
  tmp = strcmp((char const   *)((char *)s1), (char const   *)((char *)s2));
#line 82
  return ((long )tmp);
}
}
#line 1 "cil-IpdXkp6x.o"
#pragma merger("0","/tmp/cil-M5kpa104.i","")
#line 146 "/usr/include/stdio.h"
extern struct _IO_FILE *stdout ;
#line 413

#line 43 "main_bstree.c"
int main(int argc , char **argv ) 
{ 
  int choice ;
  char name[50] ;
  gdsl_bstree_t t ;
  gdsl_bstree_t tmp ;
  int rc ;
  gdsl_bstree_t tmp___0 ;
  bool tmp___1 ;
  gdsl_element_t tmp___2 ;
  bool tmp___3 ;
  ulong___0 tmp___4 ;
  ulong___0 tmp___5 ;
  gdsl_element_t tmp___6 ;
  bool tmp___7 ;
  int i ;
  int rc___0 ;
  gdsl_perm_t p ;
  gdsl_perm_t tmp___8 ;
  gdsl_bstree_t nt ;
  gdsl_bstree_t tmp___9 ;
  int n ;
  ulong___0 tmp___10 ;
  ulong___0 tmp___11 ;

  {
#line 47
  tmp = gdsl_bstree_alloc("MY BSTREE", & alloc_string, & free_string, (long (*)(gdsl_element_t const   E ,
                                                                                void *VALUE ))(& compare_strings));
#line 47
  t = tmp;
#line 49
  while (1) {
#line 51
    printf((char const   * __restrict  )"\t\tMENU - BSTREE\n\n");
#line 52
    printf((char const   * __restrict  )"\t 1> Insert\n");
#line 53
    printf((char const   * __restrict  )"\t 2> Remove\n");
#line 54
    printf((char const   * __restrict  )"\t 3> Flush\n");
#line 55
    printf((char const   * __restrict  )"\t 4> Root content\n");
#line 56
    printf((char const   * __restrict  )"\t 5> Size\n");
#line 57
    printf((char const   * __restrict  )"\t 6> Height\n");
#line 58
    printf((char const   * __restrict  )"\t 7> Search\n");
#line 59
    printf((char const   * __restrict  )"\t 8> Display\n");
#line 60
    printf((char const   * __restrict  )"\t 9> XML display\n");
#line 61
    printf((char const   * __restrict  )"\t10> Dump\n");
#line 62
    printf((char const   * __restrict  )"\t11> Insertion of a random permutation\n");
#line 63
    printf((char const   * __restrict  )"\t 0> Quit\n\n");
#line 64
    printf((char const   * __restrict  )"\t\tYour choice: ");
#line 65
    scanf((char const   * __restrict  )"%d", & choice);
#line 67
    switch (choice) {
    case 1: 
#line 73
    printf((char const   * __restrict  )"Enter a string: ");
#line 74
    scanf((char const   * __restrict  )"%s", name);
#line 76
    gdsl_bstree_insert(t, (void *)(name), & rc);
#line 78
    if (rc == 3) {
#line 80
      printf((char const   * __restrict  )"\'%s\' is already into the tree\n", name);
    } else
#line 82
    if (rc == -1) {
#line 84
      printf((char const   * __restrict  )"memory allocation error\n");
    }
#line 87
    break;
    case 2: 
#line 90
    tmp___1 = gdsl_bstree_is_empty((gdsl_bstree_t const   )t);
#line 90
    if (tmp___1) {
#line 92
      printf((char const   * __restrict  )"The tree is empty.\n");
    } else {
#line 96
      printf((char const   * __restrict  )"Enter a string: ");
#line 97
      scanf((char const   * __restrict  )"%s", name);
#line 99
      tmp___0 = gdsl_bstree_delete(t, (void *)(name));
#line 99
      if (tmp___0) {
#line 101
        printf((char const   * __restrict  )"String \'%s\' removed from the tree\n",
               name);
      } else {
#line 105
        printf((char const   * __restrict  )"String \'%s\' not found\n", name);
      }
    }
#line 108
    break;
    case 3: 
#line 111
    gdsl_bstree_flush(t);
#line 112
    break;
    case 4: 
#line 115
    tmp___3 = gdsl_bstree_is_empty((gdsl_bstree_t const   )t);
#line 115
    if (tmp___3) {
#line 117
      printf((char const   * __restrict  )"The tree is empty.\n");
    } else {
#line 121
      tmp___2 = gdsl_bstree_get_root((gdsl_bstree_t const   )t);
#line 121
      print_string(tmp___2, stdout, (gdsl_location_t )0, (void *)" \n");
    }
#line 123
    break;
    case 5: 
#line 126
    tmp___4 = gdsl_bstree_get_size((gdsl_bstree_t const   )t);
#line 126
    printf((char const   * __restrict  )"Tree\'s size: %lu\n", tmp___4);
#line 127
    break;
    case 6: 
#line 130
    tmp___5 = gdsl_bstree_get_height((gdsl_bstree_t const   )t);
#line 130
    printf((char const   * __restrict  )"Tree\'s height: %lu\n", tmp___5);
#line 131
    break;
    case 7: 
#line 134
    printf((char const   * __restrict  )"Enter a string: ");
#line 135
    scanf((char const   * __restrict  )"%s", name);
#line 137
    tmp___6 = gdsl_bstree_search((gdsl_bstree_t const   )t, (long (*)(gdsl_element_t const   E ,
                                                                      void *VALUE ))((void *)0),
                                 (void *)(name));
#line 137
    if (tmp___6) {
#line 139
      printf((char const   * __restrict  )"String \'%s\' found\n", name);
    } else {
#line 143
      printf((char const   * __restrict  )"String \'%s\' not found\n", name);
    }
#line 145
    break;
    case 8: 
#line 148
    tmp___7 = gdsl_bstree_is_empty((gdsl_bstree_t const   )t);
#line 148
    if (tmp___7) {
#line 150
      printf((char const   * __restrict  )"The tree is empty.\n");
    } else {
#line 154
      printf((char const   * __restrict  )"Tree\'s content: ");
#line 155
      gdsl_bstree_write((gdsl_bstree_t const   )t, (void (*)(gdsl_element_t const   E ,
                                                             FILE *OUTPUT_FILE , gdsl_location_t LOCATION ,
                                                             void *USER_DATA ))(& print_string),
                        stdout, (void *)0);
#line 156
      printf((char const   * __restrict  )"\n");
    }
#line 158
    break;
    case 9: 
#line 161
    gdsl_bstree_write_xml((gdsl_bstree_t const   )t, (void (*)(gdsl_element_t const   E ,
                                                               FILE *OUTPUT_FILE ,
                                                               gdsl_location_t LOCATION ,
                                                               void *USER_DATA ))(& print_string),
                          stdout, (void *)0);
#line 162
    break;
    case 10: 
#line 165
    gdsl_bstree_dump((gdsl_bstree_t const   )t, (void (*)(gdsl_element_t const   E ,
                                                          FILE *OUTPUT_FILE , gdsl_location_t LOCATION ,
                                                          void *USER_DATA ))(& print_string),
                     stdout, (void *)0);
#line 166
    break;
    case 11: 
#line 172
    tmp___8 = gdsl_perm_alloc("p", (ulong___0 const   )100);
#line 172
    p = tmp___8;
#line 173
    tmp___9 = gdsl_bstree_alloc("INTEGERS", & alloc_integer, & free_integer, (long (*)(gdsl_element_t const   E ,
                                                                                       void *VALUE ))(& compare_integers));
#line 173
    nt = tmp___9;
#line 175
    gdsl_perm_randomize(p);
#line 177
    i = 0;
#line 177
    while (i < 100) {
#line 179
      tmp___10 = gdsl_perm_get_element((gdsl_perm_t const   )p, (ulong___0 const   )i);
#line 179
      n = (int )tmp___10;
#line 180
      gdsl_bstree_insert(nt, (void *)(& n), & rc___0);
#line 177
      i ++;
    }
#line 183
    tmp___11 = gdsl_bstree_get_height((gdsl_bstree_t const   )nt);
#line 183
    printf((char const   * __restrict  )"Tree\'s height: %lu\n", tmp___11);
#line 184
    gdsl_bstree_dump((gdsl_bstree_t const   )nt, (void (*)(gdsl_element_t const   E ,
                                                           FILE *OUTPUT_FILE , gdsl_location_t LOCATION ,
                                                           void *USER_DATA ))(& print_integer),
                     stdout, (void *)"");
#line 186
    gdsl_bstree_free(nt);
#line 187
    gdsl_perm_free(p);
#line 189
    break;
    }
#line 49
    if (! (choice != 0)) {
#line 49
      break;
    }
  }
#line 194
  gdsl_bstree_free(t);
#line 196
  exit(0);
}
}
